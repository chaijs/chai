{
	"drawioXML": "<mxfile>\n  <diagram id=\"RGpC2eFFA3CfiugEgVgO\" name=\"Page-1\">\n    <mxGraphModel dx=\"3249\" dy=\"1804\" grid=\"0\" gridSize=\"10\" guides=\"1\" tooltips=\"1\" connect=\"0\" arrows=\"1\" fold=\"1\" page=\"0\" pageScale=\"1\" pageWidth=\"850\" pageHeight=\"1100\" math=\"0\" shadow=\"0\">\n      <root>\n        <mxCell id=\"0\" />\n        <mxCell id=\"1\" style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=9;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;align=left;verticalAlign=bottom;spacing=0;spacingTop=-14;spacingLeft=15;arcSize=4;labelPosition=center;verticalLabelPosition=top;;fillColor=#fffefe\" parent=\"0\" />\n        <UserObject label=\"lib\" value=\"lib\" id=\"1f5c4ae6-1ee0-44d5-af43-2b58776742c5\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=55;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;align=left;verticalAlign=bottom;spacing=0;spacingTop=-14;spacingLeft=15;arcSize=4;labelPosition=center;verticalLabelPosition=top;;fillColor=#fffefe\" vertex=\"1\" parent=\"1\">\n            <mxGeometry x=\"745\" y=\"70\" width=\"7445\" height=\"3077.7610101917435\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <UserObject label=\"chai\" value=\"chai\" id=\"3b40d2fd-134a-4e51-a482-b1661a48d960\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=55;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;align=left;verticalAlign=bottom;spacing=0;spacingTop=-14;spacingLeft=15;arcSize=4;labelPosition=center;verticalLabelPosition=top;;fillColor=#f9f3f3\" vertex=\"1\" parent=\"1f5c4ae6-1ee0-44d5-af43-2b58776742c5\">\n            <mxGeometry x=\"185\" y=\"70\" width=\"6285\" height=\"2780.5710938093366\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <UserObject label=\"interface\" value=\"interface\" id=\"da5ad0fd-2820-4a06-a046-1943ee671a0f\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=31;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;align=left;verticalAlign=bottom;spacing=0;spacingTop=-14;spacingLeft=15;arcSize=4;labelPosition=center;verticalLabelPosition=top;;fillColor=#f4e9e9\" vertex=\"1\" parent=\"3b40d2fd-134a-4e51-a482-b1661a48d960\">\n            <mxGeometry x=\"175\" y=\"170.99999999999997\" width=\"885\" height=\"1950.0000000000002\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <UserObject label=\"expect.js\" value=\"expect.js\" id=\"d029c765-a63a-4466-991a-3ca0ac663ea4\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=22;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;align=left;verticalAlign=bottom;spacing=0;spacingTop=-14;spacingLeft=15;arcSize=4;labelPosition=center;verticalLabelPosition=top;;fillColor=#efdfdf\" vertex=\"1\" parent=\"da5ad0fd-2820-4a06-a046-1943ee671a0f\">\n            <mxGeometry x=\"390\" y=\"470.0000000000002\" width=\"320\" height=\"360\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <UserObject label=\"Start: expect() - expect.js:L15-17\" value=\"Start: expect() - expect.js:L15-17\" id=\"3d7b6b57-5884-429f-9697-7b237b43fc8e\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=12;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;\" vertex=\"1\" parent=\"d029c765-a63a-4466-991a-3ca0ac663ea4\">\n            <mxGeometry x=\"70\" y=\"70\" width=\"180\" height=\"90\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <UserObject label=\"Flow 1 (expect): Call `expect()` to Start Assertion - expect.js:L16-18\" value=\"Flow 1 (expect): Call `expect()` to Start Assertion - expect.js:L16-18\" id=\"78c5daf9-33aa-4345-8ce8-0b3d6779ad32\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=12;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;\" vertex=\"1\" parent=\"d029c765-a63a-4466-991a-3ca0ac663ea4\">\n            <mxGeometry x=\"70\" y=\"200\" width=\"180\" height=\"90\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <UserObject label=\"assert.js\" value=\"assert.js\" id=\"1ddd4839-b3e2-43af-8b5e-9b585c757bb7\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=25;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;align=left;verticalAlign=bottom;spacing=0;spacingTop=-14;spacingLeft=15;arcSize=4;labelPosition=center;verticalLabelPosition=top;;fillColor=#efdfdf\" vertex=\"1\" parent=\"da5ad0fd-2820-4a06-a046-1943ee671a0f\">\n            <mxGeometry x=\"196.25\" y=\"870\" width=\"480\" height=\"1010.0000000000002\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <UserObject label=\"Creating an Assertion Object - assert.js:L220\" value=\"Creating an Assertion Object - assert.js:L220\" id=\"e835a025-f767-405a-a33a-c0f542b392f7\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=12;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;\" vertex=\"1\" parent=\"1ddd4839-b3e2-43af-8b5e-9b585c757bb7\">\n            <mxGeometry x=\"150\" y=\"850.0000000000002\" width=\"180\" height=\"90\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <UserObject label=\"Flow 2 (assert): Call `assert.deepEqual()` - assert.js:L216-218\" value=\"Flow 2 (assert): Call `assert.deepEqual()` - assert.js:L216-218\" id=\"5d95bf56-eb2d-4a9a-84ff-c22854329ade\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=12;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;\" vertex=\"1\" parent=\"1ddd4839-b3e2-43af-8b5e-9b585c757bb7\">\n            <mxGeometry x=\"150\" y=\"329.99999999999994\" width=\"180\" height=\"90\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <UserObject label=\"Flow 3 (type check): Call `assert.typeOf()` - assert.js:L829-831\" value=\"Flow 3 (type check): Call `assert.typeOf()` - assert.js:L829-831\" id=\"87dbf5e6-441d-4764-9508-43ab5d27a5b9\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=12;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;\" vertex=\"1\" parent=\"1ddd4839-b3e2-43af-8b5e-9b585c757bb7\">\n            <mxGeometry x=\"150\" y=\"589.9999999999999\" width=\"180\" height=\"90\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <UserObject label=\"Assert Interface Flow: User Call to `assert.property()` - assert.js:L1263-1265\" value=\"Assert Interface Flow: User Call to `assert.property()` - assert.js:L1263-1265\" id=\"33e4ebe1-541d-4240-9a7e-89cf413453fb\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=12;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;\" vertex=\"1\" parent=\"1ddd4839-b3e2-43af-8b5e-9b585c757bb7\">\n            <mxGeometry x=\"150\" y=\"199.99999999999994\" width=\"180\" height=\"90\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <UserObject label=\"Flow 1: Start - `assert.throws` is called - assert.js:L1993-2000\" value=\"Flow 1: Start - `assert.throws` is called - assert.js:L1993-2000\" id=\"1899beed-01ef-4c54-b347-1cedacb7ae6b\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=12;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;\" vertex=\"1\" parent=\"1ddd4839-b3e2-43af-8b5e-9b585c757bb7\">\n            <mxGeometry x=\"150\" y=\"70\" width=\"180\" height=\"90\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <UserObject label=\"Flow 2: Start - `assert.doesNotThrow` is called - assert.js:L2033-2041\" value=\"Flow 2: Start - `assert.doesNotThrow` is called - assert.js:L2033-2041\" id=\"b01e639f-18ef-4373-b85c-97964c77650e\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=12;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;\" vertex=\"1\" parent=\"1ddd4839-b3e2-43af-8b5e-9b585c757bb7\">\n            <mxGeometry x=\"150\" y=\"719.9999999999999\" width=\"180\" height=\"90\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <UserObject label=\"Flow 3 (Failure): `assert.throws` is called with a non-throwing function - assert.js:L1993-2000\" value=\"Flow 3 (Failure): `assert.throws` is called with a non-throwing function - assert.js:L1993-2000\" id=\"6419a1c1-4003-4f53-a1f5-2f40b7c0fa4f\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=12;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;\" vertex=\"1\" parent=\"1ddd4839-b3e2-43af-8b5e-9b585c757bb7\">\n            <mxGeometry x=\"150\" y=\"460\" width=\"180\" height=\"90\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <UserObject label=\"should.js\" value=\"should.js\" id=\"66baa147-b9dc-4dfa-a269-bef39a73c529\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=28;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;align=left;verticalAlign=bottom;spacing=0;spacingTop=-14;spacingLeft=15;arcSize=4;labelPosition=center;verticalLabelPosition=top;;fillColor=#efdfdf\" vertex=\"1\" parent=\"da5ad0fd-2820-4a06-a046-1943ee671a0f\">\n            <mxGeometry x=\"70\" y=\"70.00000000000006\" width=\"640\" height=\"360.00000000000006\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <UserObject label=\"Initialization: Activate `should` Interface - should.js:L12-228\" value=\"Initialization: Activate `should` Interface - should.js:L12-228\" id=\"4c2d40e1-545b-4139-bbe7-a6a013a0b3cb\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=12;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;\" vertex=\"1\" parent=\"66baa147-b9dc-4dfa-a269-bef39a73c529\">\n            <mxGeometry x=\"70\" y=\"70\" width=\"180\" height=\"90\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <UserObject label=\"Initialization: Add `.should` Getter to Object.prototype - should.js:L46-51\" value=\"Initialization: Add `.should` Getter to Object.prototype - should.js:L46-51\" id=\"59be314e-78d5-49d0-b962-bf711c994978\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=12;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;\" vertex=\"1\" parent=\"66baa147-b9dc-4dfa-a269-bef39a73c529\">\n            <mxGeometry x=\"390\" y=\"70\" width=\"180\" height=\"90\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <UserObject label=\"Assertion: Access `.should` Property - should.js:L48\" value=\"Assertion: Access `.should` Property - should.js:L48\" id=\"29ddb142-2459-46fa-b75f-7bd1b5a855c3\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=12;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;\" vertex=\"1\" parent=\"66baa147-b9dc-4dfa-a269-bef39a73c529\">\n            <mxGeometry x=\"70\" y=\"200.00000000000006\" width=\"180\" height=\"90\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <UserObject label=\"Assertion: Create New Assertion Instance - should.js:L26\" value=\"Assertion: Create New Assertion Instance - should.js:L26\" id=\"1c04e1fd-12be-4748-8350-56b2dcb56d36\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=12;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;\" vertex=\"1\" parent=\"66baa147-b9dc-4dfa-a269-bef39a73c529\">\n            <mxGeometry x=\"390\" y=\"200.00000000000006\" width=\"180\" height=\"90\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <mxCell id=\"b0ae7ae0-8463-4138-8fa1-502e7f67c9ee\" value=\"Initialization: Trigger&#xa;Prototype Modification\" style=\"edgeStyle=orthogonalEdgeStyle;shape=connector;rounded=1;sketch=0;jumpStyle=arc;jumpSize=17;orthogonalLoop=1;jettySize=auto;html=0;shadow=0;labelBackgroundColor=none;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontSize=11;fontColor=#5C5C5C;endArrow=block;endFill=1;endSize=5;sourcePerimeterSpacing=0;targetPerimeterSpacing=0;strokeColor=#A1A1A1;strokeWidth=2;arcSize=50;labelPosition=center;verticalLabelPosition=top;align=center;verticalAlign=bottom;container=1;\" edge=\"1\" parent=\"66baa147-b9dc-4dfa-a269-bef39a73c529\" source=\"4c2d40e1-545b-4139-bbe7-a6a013a0b3cb\" target=\"59be314e-78d5-49d0-b962-bf711c994978\">\n          <mxGeometry relative=\"1\" as=\"geometry\">\n            <Array as=\"points\" />\n          </mxGeometry>\n        </mxCell>\n        <mxCell id=\"5b89f24c-4bd1-496d-91df-80d188f400cc\" value=\"Assertion: Invoke&#xa;`shouldGetter`\" style=\"edgeStyle=orthogonalEdgeStyle;shape=connector;rounded=1;sketch=0;jumpStyle=arc;jumpSize=17;orthogonalLoop=1;jettySize=auto;html=0;shadow=0;labelBackgroundColor=none;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontSize=11;fontColor=#5C5C5C;endArrow=block;endFill=1;endSize=5;sourcePerimeterSpacing=0;targetPerimeterSpacing=0;strokeColor=#A1A1A1;strokeWidth=2;arcSize=50;labelPosition=center;verticalLabelPosition=top;align=center;verticalAlign=bottom;container=1;\" edge=\"1\" parent=\"66baa147-b9dc-4dfa-a269-bef39a73c529\" source=\"29ddb142-2459-46fa-b75f-7bd1b5a855c3\" target=\"1c04e1fd-12be-4748-8350-56b2dcb56d36\">\n          <mxGeometry relative=\"1\" as=\"geometry\">\n            <Array as=\"points\" />\n          </mxGeometry>\n        </mxCell>\n        <UserObject label=\"core\" value=\"core\" id=\"70f0d932-23c0-40f2-b1ae-7a592a892276\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=45;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;align=left;verticalAlign=bottom;spacing=0;spacingTop=-14;spacingLeft=15;arcSize=4;labelPosition=center;verticalLabelPosition=top;;fillColor=#f4e9e9\" vertex=\"1\" parent=\"3b40d2fd-134a-4e51-a482-b1661a48d960\">\n            <mxGeometry x=\"1250\" y=\"221.00000000000003\" width=\"2030\" height=\"2227.0256410853153\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <UserObject label=\"assertions.js\" value=\"assertions.js\" id=\"cb2d632b-b1e7-41e2-8642-977653392c81\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=43;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;align=left;verticalAlign=bottom;spacing=0;spacingTop=-14;spacingLeft=15;arcSize=4;labelPosition=center;verticalLabelPosition=top;;fillColor=#efdfdf\" vertex=\"1\" parent=\"70f0d932-23c0-40f2-b1ae-7a592a892276\">\n            <mxGeometry x=\"175\" y=\"70\" width=\"1680\" height=\"2087.0256410853153\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <UserObject label=\"Language Chain: .to - assertions.js:L61-63\" value=\"Language Chain: .to - assertions.js:L61-63\" id=\"9a018c67-2789-4a30-99bb-21f2cbb1086a\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=12;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;\" vertex=\"1\" parent=\"cb2d632b-b1e7-41e2-8642-977653392c81\">\n            <mxGeometry x=\"70\" y=\"497.02564108531567\" width=\"180\" height=\"90\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <UserObject label=\"Language Chain: .be - assertions.js:L61-63\" value=\"Language Chain: .be - assertions.js:L61-63\" id=\"98fe157b-c465-40e7-9879-af8abb572a33\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=12;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;\" vertex=\"1\" parent=\"cb2d632b-b1e7-41e2-8642-977653392c81\">\n            <mxGeometry x=\"390\" y=\"497.02564108531567\" width=\"180\" height=\"90\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <UserObject label=\"Assertion Call: .a() - assertions.js:L324-353\" value=\"Assertion Call: .a() - assertions.js:L324-353\" id=\"6c3832b1-0a35-45e0-9be8-2287555beaad\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=12;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;\" vertex=\"1\" parent=\"cb2d632b-b1e7-41e2-8642-977653392c81\">\n            <mxGeometry x=\"710\" y=\"516.570453378791\" width=\"180\" height=\"90\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <mxCell id=\"f0466bf2-9593-4717-8b9e-75f4189007be\" value=\"Chain Assertion&#xa;Object\" style=\"edgeStyle=orthogonalEdgeStyle;shape=connector;rounded=1;sketch=0;jumpStyle=arc;jumpSize=17;orthogonalLoop=1;jettySize=auto;html=0;shadow=0;labelBackgroundColor=none;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontSize=11;fontColor=#5C5C5C;endArrow=block;endFill=1;endSize=5;sourcePerimeterSpacing=0;targetPerimeterSpacing=0;strokeColor=#A1A1A1;strokeWidth=2;arcSize=50;labelPosition=center;verticalLabelPosition=top;align=center;verticalAlign=bottom;container=1;\" edge=\"1\" parent=\"cb2d632b-b1e7-41e2-8642-977653392c81\" source=\"9a018c67-2789-4a30-99bb-21f2cbb1086a\" target=\"98fe157b-c465-40e7-9879-af8abb572a33\">\n          <mxGeometry relative=\"1\" as=\"geometry\">\n            <Array as=\"points\" />\n          </mxGeometry>\n        </mxCell>\n        <mxCell id=\"c1f07aac-5242-4cdd-baad-33459f5ec2c4\" value=\"Chain Assertion&#xa;Object\" style=\"edgeStyle=orthogonalEdgeStyle;shape=connector;rounded=1;sketch=0;jumpStyle=arc;jumpSize=17;orthogonalLoop=1;jettySize=auto;html=0;shadow=0;labelBackgroundColor=none;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontSize=11;fontColor=#5C5C5C;endArrow=block;endFill=1;endSize=5;sourcePerimeterSpacing=0;targetPerimeterSpacing=0;strokeColor=#A1A1A1;strokeWidth=2;arcSize=50;labelPosition=center;verticalLabelPosition=top;align=center;verticalAlign=bottom;container=1;\" edge=\"1\" parent=\"cb2d632b-b1e7-41e2-8642-977653392c81\" source=\"98fe157b-c465-40e7-9879-af8abb572a33\" target=\"6c3832b1-0a35-45e0-9be8-2287555beaad\">\n          <mxGeometry relative=\"1\" as=\"geometry\">\n            <Array as=\"points\">\n              <mxPoint x=\"610\" y=\"542.0256410853157\" />\n              <mxPoint x=\"610\" y=\"561.570453378791\" />\n            </Array>\n          </mxGeometry>\n        </mxCell>\n        <UserObject label=\"Performing Deep Equality Check - assertions.js:L1190-1196\" value=\"Performing Deep Equality Check - assertions.js:L1190-1196\" id=\"7e1b33fe-16d9-4d47-9794-0dd9f3d99673\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=12;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;\" vertex=\"1\" parent=\"cb2d632b-b1e7-41e2-8642-977653392c81\">\n            <mxGeometry x=\"70\" y=\"1927.0256410853156\" width=\"180\" height=\"90\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <UserObject label=\"Assertion: Execute Terminal Assertion Method - assertions.js:L895-909\" value=\"Assertion: Execute Terminal Assertion Method - assertions.js:L895-909\" id=\"a1109ae1-7092-4965-b238-8a25b920c091\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=12;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;\" vertex=\"1\" parent=\"cb2d632b-b1e7-41e2-8642-977653392c81\">\n            <mxGeometry x=\"70\" y=\"367.0256410853156\" width=\"180\" height=\"90\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <UserObject label=\"Flow 1 (expect): Access `.deep` Property to Set Flag - assertions.js:L131-133\" value=\"Flow 1 (expect): Access `.deep` Property to Set Flag - assertions.js:L131-133\" id=\"d0e4abd6-88c2-4a83-a735-efeb4261bc1a\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=12;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;\" vertex=\"1\" parent=\"cb2d632b-b1e7-41e2-8642-977653392c81\">\n            <mxGeometry x=\"70\" y=\"627.0256410853156\" width=\"180\" height=\"90\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <UserObject label=\"Flow 1 (expect): Call `.equal()` to Perform Comparison - assertions.js:L1116-1133\" value=\"Flow 1 (expect): Call `.equal()` to Perform Comparison - assertions.js:L1116-1133\" id=\"311ab964-3643-4a03-a2eb-86baa60c3803\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=12;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;\" vertex=\"1\" parent=\"cb2d632b-b1e7-41e2-8642-977653392c81\">\n            <mxGeometry x=\"390\" y=\"628.3020767420937\" width=\"180\" height=\"90\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <UserObject label=\"Flow 2 (assert): Execute `.eql()` Deep Comparison - assertions.js:L1180-1191\" value=\"Flow 2 (assert): Execute `.eql()` Deep Comparison - assertions.js:L1180-1191\" id=\"6eef333b-2667-42fb-b1d6-1ade44f08169\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=12;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;\" vertex=\"1\" parent=\"cb2d632b-b1e7-41e2-8642-977653392c81\">\n            <mxGeometry x=\"70\" y=\"1147.0256410853156\" width=\"180\" height=\"90\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <UserObject label=\"Flow 3 (type check): Execute `.a()` Type Assertion - assertions.js:L327-348\" value=\"Flow 3 (type check): Execute `.a()` Type Assertion - assertions.js:L327-348\" id=\"867c90fe-63e6-47e3-a6bc-8a4780fb7948\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=12;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;\" vertex=\"1\" parent=\"cb2d632b-b1e7-41e2-8642-977653392c81\">\n            <mxGeometry x=\"70\" y=\"1407.0256410853156\" width=\"180\" height=\"90\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <mxCell id=\"87ac7881-87ff-48d0-8cbd-2c14d57c526f\" value=\"Flow 1&#xa;(expect): Modified&#xa;Assertion Object&#xa;Propagation\" style=\"edgeStyle=orthogonalEdgeStyle;shape=connector;rounded=1;sketch=0;jumpStyle=arc;jumpSize=17;orthogonalLoop=1;jettySize=auto;html=0;shadow=0;labelBackgroundColor=none;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontSize=12;fontColor=#5C5C5C;endArrow=block;endFill=1;endSize=5;sourcePerimeterSpacing=0;targetPerimeterSpacing=0;strokeColor=#A1A1A1;strokeWidth=2;arcSize=50;labelPosition=center;verticalLabelPosition=top;align=center;verticalAlign=bottom;container=1;\" edge=\"1\" parent=\"cb2d632b-b1e7-41e2-8642-977653392c81\" source=\"d0e4abd6-88c2-4a83-a735-efeb4261bc1a\" target=\"311ab964-3643-4a03-a2eb-86baa60c3803\">\n          <mxGeometry relative=\"1\" as=\"geometry\">\n            <Array as=\"points\">\n              <mxPoint x=\"290\" y=\"672.0256410853156\" />\n              <mxPoint x=\"290\" y=\"673.3020767420937\" />\n            </Array>\n          </mxGeometry>\n        </mxCell>\n        <UserObject label=\"Property Assertion Flow: Set `.nested` Flag - assertions.js:L161-163\" value=\"Property Assertion Flow: Set `.nested` Flag - assertions.js:L161-163\" id=\"21921551-9e0d-4282-9389-af27e5d0114e\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=12;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;\" vertex=\"1\" parent=\"cb2d632b-b1e7-41e2-8642-977653392c81\">\n            <mxGeometry x=\"70\" y=\"237.02564108531567\" width=\"180\" height=\"90\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <UserObject label=\"Property Assertion Flow: Call `.property()` for Nested Value Check - assertions.js:L1922-2021\" value=\"Property Assertion Flow: Call `.property()` for Nested Value Check - assertions.js:L1922-2021\" id=\"55e16a39-7839-4cc4-9acc-239022050196\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=12;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;\" vertex=\"1\" parent=\"cb2d632b-b1e7-41e2-8642-977653392c81\">\n            <mxGeometry x=\"390\" y=\"325.11832314055755\" width=\"180\" height=\"90\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <UserObject label=\"Property Assertion Flow: Assert Nested Property Value - assertions.js:L2001-2019\" value=\"Property Assertion Flow: Assert Nested Property Value - assertions.js:L2001-2019\" id=\"7e8fede8-26fd-4cab-b856-2e346e9af8f2\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=12;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;\" vertex=\"1\" parent=\"cb2d632b-b1e7-41e2-8642-977653392c81\">\n            <mxGeometry x=\"710\" y=\"325.11832314055755\" width=\"180\" height=\"90\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <UserObject label=\"Own Property Flow: Set `.own` Flag - assertions.js:L187-189\" value=\"Own Property Flow: Set `.own` Flag - assertions.js:L187-189\" id=\"d721a770-8000-427b-89be-8bf3b5844697\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=12;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;\" vertex=\"1\" parent=\"cb2d632b-b1e7-41e2-8642-977653392c81\">\n            <mxGeometry x=\"1030\" y=\"381.1284497576843\" width=\"180\" height=\"90\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <UserObject label=\"Own Property Flow: Check for Own Property - assertions.js:L1990-1991\" value=\"Own Property Flow: Check for Own Property - assertions.js:L1990-1991\" id=\"68e92267-8ca9-47a7-b850-37cb8ad1e9d4\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=12;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;\" vertex=\"1\" parent=\"cb2d632b-b1e7-41e2-8642-977653392c81\">\n            <mxGeometry x=\"1350\" y=\"381.1284497576843\" width=\"180\" height=\"90\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <UserObject label=\"Keys Assertion Flow: Call `.keys()` Method - assertions.js:L2480-2591\" value=\"Keys Assertion Flow: Call `.keys()` Method - assertions.js:L2480-2591\" id=\"30085bc9-0bfa-4cc9-bcf7-d56a98b03843\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=12;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;\" vertex=\"1\" parent=\"cb2d632b-b1e7-41e2-8642-977653392c81\">\n            <mxGeometry x=\"70\" y=\"107.02564108531556\" width=\"180\" height=\"90\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <UserObject label=\"Keys Assertion Flow: Compare Key Sets - assertions.js:L2539-2557\" value=\"Keys Assertion Flow: Compare Key Sets - assertions.js:L2539-2557\" id=\"5672de1c-1b3b-4e88-a903-227864227636\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=12;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;\" vertex=\"1\" parent=\"cb2d632b-b1e7-41e2-8642-977653392c81\">\n            <mxGeometry x=\"390\" y=\"138.4444887615531\" width=\"180\" height=\"90\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <mxCell id=\"42b0d357-26ae-4201-8bb2-bc90bf01af18\" value=\"Property Assertion&#xa;Flow: Chain&#xa;Assertion with&#xa;`nested` flag\" style=\"edgeStyle=orthogonalEdgeStyle;shape=connector;rounded=1;sketch=0;jumpStyle=arc;jumpSize=17;orthogonalLoop=1;jettySize=auto;html=0;shadow=0;labelBackgroundColor=none;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontSize=12;fontColor=#5C5C5C;endArrow=block;endFill=1;endSize=5;sourcePerimeterSpacing=0;targetPerimeterSpacing=0;strokeColor=#A1A1A1;strokeWidth=2;arcSize=50;labelPosition=center;verticalLabelPosition=top;align=center;verticalAlign=bottom;container=1;\" edge=\"1\" parent=\"cb2d632b-b1e7-41e2-8642-977653392c81\" source=\"21921551-9e0d-4282-9389-af27e5d0114e\" target=\"55e16a39-7839-4cc4-9acc-239022050196\">\n          <mxGeometry relative=\"1\" as=\"geometry\">\n            <Array as=\"points\">\n              <mxPoint x=\"290\" y=\"282.02564108531567\" />\n              <mxPoint x=\"290\" y=\"370.11832314055755\" />\n            </Array>\n          </mxGeometry>\n        </mxCell>\n        <mxCell id=\"8aa2962b-1ace-4fb9-801f-1ee6e08d55ca\" value=\"Property Assertion&#xa;Flow: Evaluate&#xa;Nested Path\" style=\"edgeStyle=orthogonalEdgeStyle;shape=connector;rounded=1;sketch=0;jumpStyle=arc;jumpSize=17;orthogonalLoop=1;jettySize=auto;html=0;shadow=0;labelBackgroundColor=none;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontSize=11;fontColor=#5C5C5C;endArrow=block;endFill=1;endSize=5;sourcePerimeterSpacing=0;targetPerimeterSpacing=0;strokeColor=#A1A1A1;strokeWidth=2;arcSize=50;labelPosition=center;verticalLabelPosition=top;align=center;verticalAlign=bottom;container=1;\" edge=\"1\" parent=\"cb2d632b-b1e7-41e2-8642-977653392c81\" source=\"55e16a39-7839-4cc4-9acc-239022050196\" target=\"7e8fede8-26fd-4cab-b856-2e346e9af8f2\">\n          <mxGeometry relative=\"1\" as=\"geometry\">\n            <Array as=\"points\" />\n          </mxGeometry>\n        </mxCell>\n        <mxCell id=\"b17fcc8d-22b2-44d6-952d-c85bcf91b534\" value=\"Own Property&#xa;Flow: Transition&#xa;to New&#xa;Scenario\" style=\"edgeStyle=orthogonalEdgeStyle;shape=connector;rounded=1;sketch=0;jumpStyle=arc;jumpSize=17;orthogonalLoop=1;jettySize=auto;html=0;shadow=0;labelBackgroundColor=none;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontSize=12;fontColor=#5C5C5C;endArrow=block;endFill=1;endSize=5;sourcePerimeterSpacing=0;targetPerimeterSpacing=0;strokeColor=#A1A1A1;strokeWidth=2;arcSize=50;labelPosition=center;verticalLabelPosition=top;align=center;verticalAlign=bottom;container=1;\" edge=\"1\" parent=\"cb2d632b-b1e7-41e2-8642-977653392c81\" source=\"7e8fede8-26fd-4cab-b856-2e346e9af8f2\" target=\"d721a770-8000-427b-89be-8bf3b5844697\">\n          <mxGeometry relative=\"1\" as=\"geometry\">\n            <Array as=\"points\">\n              <mxPoint x=\"930\" y=\"370.11832314055755\" />\n              <mxPoint x=\"930\" y=\"426.1284497576843\" />\n            </Array>\n          </mxGeometry>\n        </mxCell>\n        <mxCell id=\"c43a8570-5daa-4a31-88a9-19deb661f03c\" value=\"Own Property&#xa;Flow: Chain&#xa;Assertion with&#xa;`own` flag\" style=\"edgeStyle=orthogonalEdgeStyle;shape=connector;rounded=1;sketch=0;jumpStyle=arc;jumpSize=17;orthogonalLoop=1;jettySize=auto;html=0;shadow=0;labelBackgroundColor=none;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontSize=11;fontColor=#5C5C5C;endArrow=block;endFill=1;endSize=5;sourcePerimeterSpacing=0;targetPerimeterSpacing=0;strokeColor=#A1A1A1;strokeWidth=2;arcSize=50;labelPosition=center;verticalLabelPosition=top;align=center;verticalAlign=bottom;container=1;\" edge=\"1\" parent=\"cb2d632b-b1e7-41e2-8642-977653392c81\" source=\"d721a770-8000-427b-89be-8bf3b5844697\" target=\"68e92267-8ca9-47a7-b850-37cb8ad1e9d4\">\n          <mxGeometry relative=\"1\" as=\"geometry\">\n            <Array as=\"points\" />\n          </mxGeometry>\n        </mxCell>\n        <mxCell id=\"6b40f6f8-f5bb-4f00-bdb5-2e8306e4bc90\" value=\"Keys Assertion&#xa;Flow: Retrieve&#xa;Actual Keys\" style=\"edgeStyle=orthogonalEdgeStyle;shape=connector;rounded=1;sketch=0;jumpStyle=arc;jumpSize=17;orthogonalLoop=1;jettySize=auto;html=0;shadow=0;labelBackgroundColor=none;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontSize=20;fontColor=#5C5C5C;endArrow=block;endFill=1;endSize=5;sourcePerimeterSpacing=0;targetPerimeterSpacing=0;strokeColor=#A1A1A1;strokeWidth=2;arcSize=50;labelPosition=center;verticalLabelPosition=top;align=center;verticalAlign=bottom;container=1;\" edge=\"1\" parent=\"cb2d632b-b1e7-41e2-8642-977653392c81\" source=\"30085bc9-0bfa-4cc9-bcf7-d56a98b03843\" target=\"5672de1c-1b3b-4e88-a903-227864227636\">\n          <mxGeometry relative=\"1\" as=\"geometry\">\n            <Array as=\"points\">\n              <mxPoint x=\"290\" y=\"152.02564108531556\" />\n              <mxPoint x=\"290\" y=\"183.4444887615531\" />\n            </Array>\n          </mxGeometry>\n        </mxCell>\n        <UserObject label=\"Flow 1: Core logic executes function and catches error - assertions.js:L2769-2774\" value=\"Flow 1: Core logic executes function and catches error - assertions.js:L2769-2774\" id=\"64a3623b-42f0-49bf-a81f-0e491a6a4740\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=12;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;\" vertex=\"1\" parent=\"cb2d632b-b1e7-41e2-8642-977653392c81\">\n            <mxGeometry x=\"70\" y=\"1017.0256410853156\" width=\"180\" height=\"90\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <UserObject label=\"Flow 1: End - Assertion passes and returns error - assertions.js:L2828-2920\" value=\"Flow 1: End - Assertion passes and returns error - assertions.js:L2828-2920\" id=\"e3b13ece-10f4-48f0-8bb2-5ab92d7af2fa\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=12;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;\" vertex=\"1\" parent=\"cb2d632b-b1e7-41e2-8642-977653392c81\">\n            <mxGeometry x=\"390\" y=\"1018.302076742094\" width=\"180\" height=\"90\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <UserObject label=\"Flow 2: Core logic executes function successfully - assertions.js:L2769-2774\" value=\"Flow 2: Core logic executes function successfully - assertions.js:L2769-2774\" id=\"52112520-8bc4-4780-b274-db60aa7341c2\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=12;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;\" vertex=\"1\" parent=\"cb2d632b-b1e7-41e2-8642-977653392c81\">\n            <mxGeometry x=\"70\" y=\"1667.0256410853156\" width=\"180\" height=\"90\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <UserObject label=\"Flow 2: End - Negated assertion passes - assertions.js:L2820-2825\" value=\"Flow 2: End - Negated assertion passes - assertions.js:L2820-2825\" id=\"c57f08a5-f7e3-4c59-bc88-899d76966cad\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=12;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;\" vertex=\"1\" parent=\"cb2d632b-b1e7-41e2-8642-977653392c81\">\n            <mxGeometry x=\"390\" y=\"1662.5399598478527\" width=\"180\" height=\"90\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <UserObject label=\"Flow 3 (Failure): Core logic finds no error - assertions.js:L2769-2774\" value=\"Flow 3 (Failure): Core logic finds no error - assertions.js:L2769-2774\" id=\"354859c5-3779-42f5-acdd-6bc7cc000499\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=12;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;\" vertex=\"1\" parent=\"cb2d632b-b1e7-41e2-8642-977653392c81\">\n            <mxGeometry x=\"70\" y=\"1277.0256410853156\" width=\"180\" height=\"90\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <mxCell id=\"a50c1de7-c7d0-4915-a745-ebdd83a44c65\" value=\"Flow 1:&#xa;Caught error&#xa;is passed&#xa;for validation\" style=\"edgeStyle=orthogonalEdgeStyle;shape=connector;rounded=1;sketch=0;jumpStyle=arc;jumpSize=17;orthogonalLoop=1;jettySize=auto;html=0;shadow=0;labelBackgroundColor=none;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontSize=12;fontColor=#5C5C5C;endArrow=block;endFill=1;endSize=5;sourcePerimeterSpacing=0;targetPerimeterSpacing=0;strokeColor=#A1A1A1;strokeWidth=2;arcSize=50;labelPosition=center;verticalLabelPosition=top;align=center;verticalAlign=bottom;container=1;\" edge=\"1\" parent=\"cb2d632b-b1e7-41e2-8642-977653392c81\" source=\"64a3623b-42f0-49bf-a81f-0e491a6a4740\" target=\"e3b13ece-10f4-48f0-8bb2-5ab92d7af2fa\">\n          <mxGeometry relative=\"1\" as=\"geometry\">\n            <Array as=\"points\">\n              <mxPoint x=\"290\" y=\"1062.0256410853156\" />\n              <mxPoint x=\"290\" y=\"1063.302076742094\" />\n            </Array>\n          </mxGeometry>\n        </mxCell>\n        <mxCell id=\"1100bfcd-96f6-428e-9cb4-9f299e01c268\" value=\"Flow 2:&#xa;Result (no&#xa;error) passed&#xa;for validation\" style=\"edgeStyle=orthogonalEdgeStyle;shape=connector;rounded=1;sketch=0;jumpStyle=arc;jumpSize=17;orthogonalLoop=1;jettySize=auto;html=0;shadow=0;labelBackgroundColor=none;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontSize=13;fontColor=#5C5C5C;endArrow=block;endFill=1;endSize=5;sourcePerimeterSpacing=0;targetPerimeterSpacing=0;strokeColor=#A1A1A1;strokeWidth=2;arcSize=50;labelPosition=center;verticalLabelPosition=top;align=center;verticalAlign=bottom;container=1;\" edge=\"1\" parent=\"cb2d632b-b1e7-41e2-8642-977653392c81\" source=\"52112520-8bc4-4780-b274-db60aa7341c2\" target=\"c57f08a5-f7e3-4c59-bc88-899d76966cad\">\n          <mxGeometry relative=\"1\" as=\"geometry\">\n            <Array as=\"points\">\n              <mxPoint x=\"290\" y=\"1712.0256410853156\" />\n              <mxPoint x=\"290\" y=\"1707.5399598478527\" />\n            </Array>\n          </mxGeometry>\n        </mxCell>\n        <UserObject label=\"User Assertion: Check for Inclusion - assertions.js:L519-522\" value=\"User Assertion: Check for Inclusion - assertions.js:L519-522\" id=\"9dea3048-df0f-44e5-9e90-43986b3487e6\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=12;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;\" vertex=\"1\" parent=\"cb2d632b-b1e7-41e2-8642-977653392c81\">\n            <mxGeometry x=\"70\" y=\"1537.0256410853156\" width=\"180\" height=\"90\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <UserObject label=\"`include` Assertion Logic - assertions.js:L570-575\" value=\"`include` Assertion Logic - assertions.js:L570-575\" id=\"618aefbe-9477-42a6-a6d7-d5f60f805f29\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=12;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;\" vertex=\"1\" parent=\"cb2d632b-b1e7-41e2-8642-977653392c81\">\n            <mxGeometry x=\"390\" y=\"1512.4856251319113\" width=\"180\" height=\"90\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <UserObject label=\"User Assertion: Check for Same Members - assertions.js:L3277\" value=\"User Assertion: Check for Same Members - assertions.js:L3277\" id=\"313ceff3-447c-4c19-99e8-5a7ec009b617\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=12;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;\" vertex=\"1\" parent=\"cb2d632b-b1e7-41e2-8642-977653392c81\">\n            <mxGeometry x=\"70\" y=\"1797.0256410853156\" width=\"180\" height=\"90\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <UserObject label=\"`members` Assertion Logic - assertions.js:L3311-3323\" value=\"`members` Assertion Logic - assertions.js:L3311-3323\" id=\"f6a060df-b7b2-4ddf-a5d6-ecc8fc05573e\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=12;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;\" vertex=\"1\" parent=\"cb2d632b-b1e7-41e2-8642-977653392c81\">\n            <mxGeometry x=\"390\" y=\"1797.0256410853156\" width=\"180\" height=\"90\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <UserObject label=\"User Assertion: Enable Ordered Check - assertions.js:L206-209\" value=\"User Assertion: Enable Ordered Check - assertions.js:L206-209\" id=\"285d4dde-717f-4ab2-87f1-694b42c51e9e\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=12;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;\" vertex=\"1\" parent=\"cb2d632b-b1e7-41e2-8642-977653392c81\">\n            <mxGeometry x=\"70\" y=\"757.0256410853156\" width=\"180\" height=\"90\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <UserObject label=\"`members` Called with Order Enforcement - assertions.js:L3327-3331\" value=\"`members` Called with Order Enforcement - assertions.js:L3327-3331\" id=\"5f37baa4-b3d9-4f39-ad43-014a9bb088b4\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=12;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;\" vertex=\"1\" parent=\"cb2d632b-b1e7-41e2-8642-977653392c81\">\n            <mxGeometry x=\"390\" y=\"758.302076742094\" width=\"180\" height=\"90\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <UserObject label=\"User Assertion: Check Length - assertions.js:L2259-2262\" value=\"User Assertion: Check Length - assertions.js:L2259-2262\" id=\"176e2036-2d1e-4abd-a885-29b414e3aaf7\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=12;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;\" vertex=\"1\" parent=\"cb2d632b-b1e7-41e2-8642-977653392c81\">\n            <mxGeometry x=\"70\" y=\"887.0256410853156\" width=\"180\" height=\"90\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <UserObject label=\"`lengthOf` Assertion Logic - assertions.js:L2269-2285\" value=\"`lengthOf` Assertion Logic - assertions.js:L2269-2285\" id=\"ce702a01-133b-434c-813b-e89a1811b230\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=12;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;\" vertex=\"1\" parent=\"cb2d632b-b1e7-41e2-8642-977653392c81\">\n            <mxGeometry x=\"390\" y=\"888.3020767420941\" width=\"180\" height=\"90\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <mxCell id=\"a32af246-a534-4581-ad06-a4e6cccafe26\" value=\"Data Transmission&#xa;to `include`\" style=\"edgeStyle=orthogonalEdgeStyle;shape=connector;rounded=1;sketch=0;jumpStyle=arc;jumpSize=17;orthogonalLoop=1;jettySize=auto;html=0;shadow=0;labelBackgroundColor=none;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontSize=16;fontColor=#5C5C5C;endArrow=block;endFill=1;endSize=5;sourcePerimeterSpacing=0;targetPerimeterSpacing=0;strokeColor=#A1A1A1;strokeWidth=2;arcSize=50;labelPosition=center;verticalLabelPosition=top;align=center;verticalAlign=bottom;container=1;\" edge=\"1\" parent=\"cb2d632b-b1e7-41e2-8642-977653392c81\" source=\"9dea3048-df0f-44e5-9e90-43986b3487e6\" target=\"618aefbe-9477-42a6-a6d7-d5f60f805f29\">\n          <mxGeometry relative=\"1\" as=\"geometry\">\n            <Array as=\"points\">\n              <mxPoint x=\"290\" y=\"1582.0256410853156\" />\n              <mxPoint x=\"290\" y=\"1557.4856251319113\" />\n            </Array>\n          </mxGeometry>\n        </mxCell>\n        <mxCell id=\"eda3425e-cae9-40dc-9a09-0fbb2baabf6e\" value=\"Data Transmission&#xa;to `members`\" style=\"edgeStyle=orthogonalEdgeStyle;shape=connector;rounded=1;sketch=0;jumpStyle=arc;jumpSize=17;orthogonalLoop=1;jettySize=auto;html=0;shadow=0;labelBackgroundColor=none;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontSize=11;fontColor=#5C5C5C;endArrow=block;endFill=1;endSize=5;sourcePerimeterSpacing=0;targetPerimeterSpacing=0;strokeColor=#A1A1A1;strokeWidth=2;arcSize=50;labelPosition=center;verticalLabelPosition=top;align=center;verticalAlign=bottom;container=1;\" edge=\"1\" parent=\"cb2d632b-b1e7-41e2-8642-977653392c81\" source=\"313ceff3-447c-4c19-99e8-5a7ec009b617\" target=\"f6a060df-b7b2-4ddf-a5d6-ecc8fc05573e\">\n          <mxGeometry relative=\"1\" as=\"geometry\">\n            <Array as=\"points\" />\n          </mxGeometry>\n        </mxCell>\n        <mxCell id=\"f3329c0d-a97d-46d9-9d75-29b00dcd6b65\" value=\"`ordered` Flag&#xa;Set\" style=\"edgeStyle=orthogonalEdgeStyle;shape=connector;rounded=1;sketch=0;jumpStyle=arc;jumpSize=17;orthogonalLoop=1;jettySize=auto;html=0;shadow=0;labelBackgroundColor=none;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontSize=12;fontColor=#5C5C5C;endArrow=block;endFill=1;endSize=5;sourcePerimeterSpacing=0;targetPerimeterSpacing=0;strokeColor=#A1A1A1;strokeWidth=2;arcSize=50;labelPosition=center;verticalLabelPosition=top;align=center;verticalAlign=bottom;container=1;\" edge=\"1\" parent=\"cb2d632b-b1e7-41e2-8642-977653392c81\" source=\"285d4dde-717f-4ab2-87f1-694b42c51e9e\" target=\"5f37baa4-b3d9-4f39-ad43-014a9bb088b4\">\n          <mxGeometry relative=\"1\" as=\"geometry\">\n            <Array as=\"points\">\n              <mxPoint x=\"290\" y=\"802.0256410853156\" />\n              <mxPoint x=\"290\" y=\"803.302076742094\" />\n            </Array>\n          </mxGeometry>\n        </mxCell>\n        <mxCell id=\"325db70c-7165-4d3e-8c76-f5547ccadd00\" value=\"Data Transmission&#xa;to `lengthOf`\" style=\"edgeStyle=orthogonalEdgeStyle;shape=connector;rounded=1;sketch=0;jumpStyle=arc;jumpSize=17;orthogonalLoop=1;jettySize=auto;html=0;shadow=0;labelBackgroundColor=none;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontSize=11;fontColor=#5C5C5C;endArrow=block;endFill=1;endSize=5;sourcePerimeterSpacing=0;targetPerimeterSpacing=0;strokeColor=#A1A1A1;strokeWidth=2;arcSize=50;labelPosition=center;verticalLabelPosition=top;align=center;verticalAlign=bottom;container=1;\" edge=\"1\" parent=\"cb2d632b-b1e7-41e2-8642-977653392c81\" source=\"176e2036-2d1e-4abd-a885-29b414e3aaf7\" target=\"ce702a01-133b-434c-813b-e89a1811b230\">\n          <mxGeometry relative=\"1\" as=\"geometry\">\n            <Array as=\"points\">\n              <mxPoint x=\"290\" y=\"932.0256410853156\" />\n              <mxPoint x=\"290\" y=\"933.3020767420942\" />\n            </Array>\n          </mxGeometry>\n        </mxCell>\n        <UserObject label=\"Setup: Define Language Chains - assertions.js:L43-60\" value=\"Setup: Define Language Chains - assertions.js:L43-60\" id=\"ddeb7b36-bb2d-429a-b928-35cd5010095f\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=12;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;\" vertex=\"1\" parent=\"cb2d632b-b1e7-41e2-8642-977653392c81\">\n            <mxGeometry x=\"1350\" y=\"70\" width=\"180\" height=\"90\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <UserObject label=\"utils\" value=\"utils\" id=\"365dcd1f-e369-4e23-b3b7-84fb25a3fa18\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=43;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;align=left;verticalAlign=bottom;spacing=0;spacingTop=-14;spacingLeft=15;arcSize=4;labelPosition=center;verticalLabelPosition=top;;fillColor=#f4e9e9\" vertex=\"1\" parent=\"3b40d2fd-134a-4e51-a482-b1661a48d960\">\n            <mxGeometry x=\"4370\" y=\"1321.9971298593086\" width=\"1740\" height=\"871.9999999999998\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <UserObject label=\"addProperty.js\" value=\"addProperty.js\" id=\"c192a443-274d-45d6-acca-463e2a0eb9a6\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=31;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;align=left;verticalAlign=bottom;spacing=0;spacingTop=-14;spacingLeft=15;arcSize=4;labelPosition=center;verticalLabelPosition=top;;fillColor=#efdfdf\" vertex=\"1\" parent=\"365dcd1f-e369-4e23-b3b7-84fb25a3fa18\">\n            <mxGeometry x=\"685\" y=\"143.03521489014827\" width=\"960\" height=\"490\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <UserObject label=\"Property Registration: Attach Property to Prototype - addProperty.js:L38-74\" value=\"Property Registration: Attach Property to Prototype - addProperty.js:L38-74\" id=\"1b6ddf15-ae7d-43c4-82f7-f9dba5b20e71\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=12;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;\" vertex=\"1\" parent=\"c192a443-274d-45d6-acca-463e2a0eb9a6\">\n            <mxGeometry x=\"70\" y=\"330\" width=\"180\" height=\"90\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <UserObject label=\"Usage: Developer Uses Custom Assertion - addProperty.js:L43-68\" value=\"Usage: Developer Uses Custom Assertion - addProperty.js:L43-68\" id=\"5a48a5d6-6068-4649-848f-6e12bc2b0806\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=12;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;\" vertex=\"1\" parent=\"c192a443-274d-45d6-acca-463e2a0eb9a6\">\n            <mxGeometry x=\"70\" y=\"200\" width=\"180\" height=\"90\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <UserObject label=\"Setup: Implement Chainable Getter - addProperty.js:L39-60\" value=\"Setup: Implement Chainable Getter - addProperty.js:L39-60\" id=\"a38ba456-b539-4581-848b-6dfd39a43a50\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=12;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;\" vertex=\"1\" parent=\"c192a443-274d-45d6-acca-463e2a0eb9a6\">\n            <mxGeometry x=\"70\" y=\"70\" width=\"180\" height=\"90\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <UserObject label=\"Execution: Return Assertion for Chaining - addProperty.js:L43-55\" value=\"Execution: Return Assertion for Chaining - addProperty.js:L43-55\" id=\"de166f66-5ad7-496e-bfb7-d2d856d0f616\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=12;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;\" vertex=\"1\" parent=\"c192a443-274d-45d6-acca-463e2a0eb9a6\">\n            <mxGeometry x=\"390\" y=\"94.85073538254574\" width=\"180\" height=\"90\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <UserObject label=\"Execution: Continue Chain - addProperty.js:L43-55\" value=\"Execution: Continue Chain - addProperty.js:L43-55\" id=\"36131db5-91db-403c-ac25-5f117ec0e635\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=12;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;\" vertex=\"1\" parent=\"c192a443-274d-45d6-acca-463e2a0eb9a6\">\n            <mxGeometry x=\"710\" y=\"94.85073538254574\" width=\"180\" height=\"90\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <mxCell id=\"23863589-0536-4ae4-8d65-20c9ea92f194\" value=\"Execution: Access&#xa;Language Chain&#xa;in Test\" style=\"edgeStyle=orthogonalEdgeStyle;shape=connector;rounded=1;sketch=0;jumpStyle=arc;jumpSize=17;orthogonalLoop=1;jettySize=auto;html=0;shadow=0;labelBackgroundColor=none;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontSize=12;fontColor=#5C5C5C;endArrow=block;endFill=1;endSize=5;sourcePerimeterSpacing=0;targetPerimeterSpacing=0;strokeColor=#A1A1A1;strokeWidth=2;arcSize=50;labelPosition=center;verticalLabelPosition=top;align=center;verticalAlign=bottom;container=1;\" edge=\"1\" parent=\"c192a443-274d-45d6-acca-463e2a0eb9a6\" source=\"a38ba456-b539-4581-848b-6dfd39a43a50\" target=\"de166f66-5ad7-496e-bfb7-d2d856d0f616\">\n          <mxGeometry relative=\"1\" as=\"geometry\">\n            <Array as=\"points\">\n              <mxPoint x=\"290\" y=\"115\" />\n              <mxPoint x=\"290\" y=\"139.85073538254574\" />\n            </Array>\n          </mxGeometry>\n        </mxCell>\n        <mxCell id=\"984fc8c8-fe77-472c-bf0a-7dcf817a5b3e\" value=\"Execution: Pass&#xa;Assertion to&#xa;Next Chain\" style=\"edgeStyle=orthogonalEdgeStyle;shape=connector;rounded=1;sketch=0;jumpStyle=arc;jumpSize=17;orthogonalLoop=1;jettySize=auto;html=0;shadow=0;labelBackgroundColor=none;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontSize=11;fontColor=#5C5C5C;endArrow=block;endFill=1;endSize=5;sourcePerimeterSpacing=0;targetPerimeterSpacing=0;strokeColor=#A1A1A1;strokeWidth=2;arcSize=50;labelPosition=center;verticalLabelPosition=top;align=center;verticalAlign=bottom;container=1;\" edge=\"1\" parent=\"c192a443-274d-45d6-acca-463e2a0eb9a6\" source=\"de166f66-5ad7-496e-bfb7-d2d856d0f616\" target=\"36131db5-91db-403c-ac25-5f117ec0e635\">\n          <mxGeometry relative=\"1\" as=\"geometry\">\n            <Array as=\"points\" />\n          </mxGeometry>\n        </mxCell>\n        <UserObject label=\"flag.js\" value=\"flag.js\" id=\"8516dde4-fdc7-49cf-90a5-5abb0588348e\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=16;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;\" vertex=\"1\" parent=\"365dcd1f-e369-4e23-b3b7-84fb25a3fa18\">\n            <mxGeometry x=\"245\" y=\"120.99999999999996\" width=\"180\" height=\"90\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <UserObject label=\"addMethod.js\" value=\"addMethod.js\" id=\"aca4b2ac-87ec-4d9e-b750-f0d056ff758f\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=22;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;align=left;verticalAlign=bottom;spacing=0;spacingTop=-14;spacingLeft=15;arcSize=4;labelPosition=center;verticalLabelPosition=top;;fillColor=#efdfdf\" vertex=\"1\" parent=\"365dcd1f-e369-4e23-b3b7-84fb25a3fa18\">\n            <mxGeometry x=\"175\" y=\"250.99999999999994\" width=\"320\" height=\"230\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <UserObject label=\"Method Registration: Attach Method to Prototype - addMethod.js:L36-70\" value=\"Method Registration: Attach Method to Prototype - addMethod.js:L36-70\" id=\"24c28424-4ad9-42bb-aeb9-4019b6072a1f\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=12;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;\" vertex=\"1\" parent=\"aca4b2ac-87ec-4d9e-b750-f0d056ff758f\">\n            <mxGeometry x=\"70\" y=\"70\" width=\"180\" height=\"90\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <mxCell id=\"29db87a9-9d2e-47e3-9fe9-0de786e801d1\" value=\"Data Flow:&#xa;`Assertion.prototype` is&#xa;Mutated\" style=\"edgeStyle=orthogonalEdgeStyle;shape=connector;rounded=1;sketch=0;jumpStyle=arc;jumpSize=17;orthogonalLoop=1;jettySize=auto;html=0;shadow=0;labelBackgroundColor=none;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontSize=13;fontColor=#5C5C5C;endArrow=block;endFill=1;endSize=5;sourcePerimeterSpacing=0;targetPerimeterSpacing=0;strokeColor=#A1A1A1;strokeWidth=2;arcSize=50;labelPosition=center;verticalLabelPosition=top;align=center;verticalAlign=bottom;container=1;\" edge=\"1\" parent=\"365dcd1f-e369-4e23-b3b7-84fb25a3fa18\" source=\"24c28424-4ad9-42bb-aeb9-4019b6072a1f\" target=\"5a48a5d6-6068-4649-848f-6e12bc2b0806\">\n          <mxGeometry relative=\"1\" as=\"geometry\">\n            <Array as=\"points\">\n              <mxPoint x=\"560\" y=\"366.0000000000002\" />\n              <mxPoint x=\"560\" y=\"388.03521489014855\" />\n            </Array>\n          </mxGeometry>\n        </mxCell>\n        <UserObject label=\"objDisplay.js\" value=\"objDisplay.js\" id=\"024e93d1-f1b8-417a-a584-01b228b125fa\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=22;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;align=left;verticalAlign=bottom;spacing=0;spacingTop=-14;spacingLeft=15;arcSize=4;labelPosition=center;verticalLabelPosition=top;;fillColor=#efdfdf\" vertex=\"1\" parent=\"365dcd1f-e369-4e23-b3b7-84fb25a3fa18\">\n            <mxGeometry x=\"175\" y=\"521\" width=\"320\" height=\"230\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <UserObject label=\"Data Transformation: Process `truncateThreshold` - objDisplay.js:L26-40\" value=\"Data Transformation: Process `truncateThreshold` - objDisplay.js:L26-40\" id=\"6f06b54f-8fd6-4b17-b471-6640ca1910cf\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=12;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;\" vertex=\"1\" parent=\"024e93d1-f1b8-417a-a584-01b228b125fa\">\n            <mxGeometry x=\"70\" y=\"70\" width=\"180\" height=\"90\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <UserObject label=\"assertion.js\" value=\"assertion.js\" id=\"d6094e8b-04ee-4fd8-ba2c-2dcf2209cd63\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=28;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;align=left;verticalAlign=bottom;spacing=0;spacingTop=-14;spacingLeft=15;arcSize=4;labelPosition=center;verticalLabelPosition=top;;fillColor=#f4e9e9\" vertex=\"1\" parent=\"3b40d2fd-134a-4e51-a482-b1661a48d960\">\n            <mxGeometry x=\"3540\" y=\"330.54735855494425\" width=\"640\" height=\"2050.0237352543922\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <UserObject label=\"Execute Assertion and Prepare Error - assertion.js:L157-185\" value=\"Execute Assertion and Prepare Error - assertion.js:L157-185\" id=\"76d13f4d-2e39-4075-8e09-1a5dfd58eb75\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=12;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;\" vertex=\"1\" parent=\"d6094e8b-04ee-4fd8-ba2c-2dcf2209cd63\">\n            <mxGeometry x=\"70\" y=\"330\" width=\"180\" height=\"90\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <UserObject label=\"Throw AssertionError - assertion.js:L178-184\" value=\"Throw AssertionError - assertion.js:L178-184\" id=\"626f7856-8bdf-4df3-bf89-f68eedf5585e\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=12;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;\" vertex=\"1\" parent=\"d6094e8b-04ee-4fd8-ba2c-2dcf2209cd63\">\n            <mxGeometry x=\"390\" y=\"330\" width=\"180\" height=\"90\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <mxCell id=\"016a9626-27a3-4671-91d4-ced879f9b94f\" value=\"Transmit Error&#xa;Details\" style=\"edgeStyle=orthogonalEdgeStyle;shape=connector;rounded=1;sketch=0;jumpStyle=arc;jumpSize=17;orthogonalLoop=1;jettySize=auto;html=0;shadow=0;labelBackgroundColor=none;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontSize=11;fontColor=#5C5C5C;endArrow=block;endFill=1;endSize=5;sourcePerimeterSpacing=0;targetPerimeterSpacing=0;strokeColor=#A1A1A1;strokeWidth=2;arcSize=50;labelPosition=center;verticalLabelPosition=top;align=center;verticalAlign=bottom;container=1;\" edge=\"1\" parent=\"d6094e8b-04ee-4fd8-ba2c-2dcf2209cd63\" source=\"76d13f4d-2e39-4075-8e09-1a5dfd58eb75\" target=\"626f7856-8bdf-4df3-bf89-f68eedf5585e\">\n          <mxGeometry relative=\"1\" as=\"geometry\">\n            <Array as=\"points\" />\n          </mxGeometry>\n        </mxCell>\n        <UserObject label=\"Evaluating Assertion and Preparing Error - assertion.js:L163-164\" value=\"Evaluating Assertion and Preparing Error - assertion.js:L163-164\" id=\"7edfbeb5-0c32-424f-8365-128c3ca419ab\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=12;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;\" vertex=\"1\" parent=\"d6094e8b-04ee-4fd8-ba2c-2dcf2209cd63\">\n            <mxGeometry x=\"70\" y=\"1500\" width=\"180\" height=\"90\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <UserObject label=\"Throwing the `AssertionError` - assertion.js:L181-186\" value=\"Throwing the `AssertionError` - assertion.js:L181-186\" id=\"f1c5ff6e-d843-410e-9e49-51660521e9d1\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=12;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;\" vertex=\"1\" parent=\"d6094e8b-04ee-4fd8-ba2c-2dcf2209cd63\">\n            <mxGeometry x=\"390\" y=\"1498.2794102143025\" width=\"180\" height=\"90\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <mxCell id=\"019c2fe0-4d65-43d2-afe4-cfccf451e2b3\" value=\"Transmitting Error&#xa;Details to&#xa;`AssertionError`\" style=\"edgeStyle=orthogonalEdgeStyle;shape=connector;rounded=1;sketch=0;jumpStyle=arc;jumpSize=17;orthogonalLoop=1;jettySize=auto;html=0;shadow=0;labelBackgroundColor=none;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontSize=12;fontColor=#5C5C5C;endArrow=block;endFill=1;endSize=5;sourcePerimeterSpacing=0;targetPerimeterSpacing=0;strokeColor=#A1A1A1;strokeWidth=2;arcSize=50;labelPosition=center;verticalLabelPosition=top;align=center;verticalAlign=bottom;container=1;\" edge=\"1\" parent=\"d6094e8b-04ee-4fd8-ba2c-2dcf2209cd63\" source=\"7edfbeb5-0c32-424f-8365-128c3ca419ab\" target=\"f1c5ff6e-d843-410e-9e49-51660521e9d1\">\n          <mxGeometry relative=\"1\" as=\"geometry\">\n            <Array as=\"points\">\n              <mxPoint x=\"290\" y=\"1545\" />\n              <mxPoint x=\"290\" y=\"1543.2794102143025\" />\n            </Array>\n          </mxGeometry>\n        </mxCell>\n        <UserObject label=\"Flow 1 (expect): Final Assertion Execution - assertion.js:L159-183\" value=\"Flow 1 (expect): Final Assertion Execution - assertion.js:L159-183\" id=\"33c4932a-9999-4a12-a99c-e7fa68d52a3b\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=12;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;\" vertex=\"1\" parent=\"d6094e8b-04ee-4fd8-ba2c-2dcf2209cd63\">\n            <mxGeometry x=\"70\" y=\"460\" width=\"180\" height=\"90\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <UserObject label=\"Flow 2 (assert): Final Assertion Execution - assertion.js:L159-183\" value=\"Flow 2 (assert): Final Assertion Execution - assertion.js:L159-183\" id=\"aa2ef5c6-dd9d-48fa-ae4b-6c7e431eabcf\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=12;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;\" vertex=\"1\" parent=\"d6094e8b-04ee-4fd8-ba2c-2dcf2209cd63\">\n            <mxGeometry x=\"70\" y=\"850\" width=\"180\" height=\"90\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <UserObject label=\"Flow 3 (type check): Final Assertion Execution - assertion.js:L159-183\" value=\"Flow 3 (type check): Final Assertion Execution - assertion.js:L159-183\" id=\"79cfa8e5-df26-4e28-a847-e90640711609\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=12;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;\" vertex=\"1\" parent=\"d6094e8b-04ee-4fd8-ba2c-2dcf2209cd63\">\n            <mxGeometry x=\"70\" y=\"1110\" width=\"180\" height=\"90\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <UserObject label=\"Own Property Flow: Assert Own Property Existence - assertion.js:L143-187\" value=\"Own Property Flow: Assert Own Property Existence - assertion.js:L143-187\" id=\"58e1a797-b38e-41d5-9709-2f9f5045a403\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=12;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;\" vertex=\"1\" parent=\"d6094e8b-04ee-4fd8-ba2c-2dcf2209cd63\">\n            <mxGeometry x=\"70\" y=\"200\" width=\"180\" height=\"90\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <UserObject label=\"Extension: Plugin adds a Custom Property - assertion.js:L93-96\" value=\"Extension: Plugin adds a Custom Property - assertion.js:L93-96\" id=\"368b33b2-faaa-4ee1-9226-8a883a702652\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=12;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;\" vertex=\"1\" parent=\"d6094e8b-04ee-4fd8-ba2c-2dcf2209cd63\">\n            <mxGeometry x=\"70\" y=\"1760\" width=\"180\" height=\"90\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <UserObject label=\"Extension: Plugin adds a Custom Method - assertion.js:L101-104\" value=\"Extension: Plugin adds a Custom Method - assertion.js:L101-104\" id=\"e5c0ec36-1aca-4726-a72f-3abe6486de6d\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=12;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;\" vertex=\"1\" parent=\"d6094e8b-04ee-4fd8-ba2c-2dcf2209cd63\">\n            <mxGeometry x=\"70\" y=\"70\" width=\"180\" height=\"90\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <UserObject label=\"Flow 3 (Failure): `Assertion.prototype.assert` throws `AssertionError` - assertion.js:L163-184\" value=\"Flow 3 (Failure): `Assertion.prototype.assert` throws `AssertionError` - assertion.js:L163-184\" id=\"1af6ee46-5ea3-408a-9022-e8633ccb7410\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=12;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;\" vertex=\"1\" parent=\"d6094e8b-04ee-4fd8-ba2c-2dcf2209cd63\">\n            <mxGeometry x=\"70\" y=\"980.0000000000001\" width=\"180\" height=\"90\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <UserObject label=\"Assertion Succeeded - assertion.js:L178-186\" value=\"Assertion Succeeded - assertion.js:L178-186\" id=\"1ac5073d-fc9a-43ed-914f-9da183d33cf4\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=12;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;\" vertex=\"1\" parent=\"d6094e8b-04ee-4fd8-ba2c-2dcf2209cd63\">\n            <mxGeometry x=\"70\" y=\"1240\" width=\"180\" height=\"90\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <UserObject label=\"Assertion Succeeded - assertion.js:L178-186\" value=\"Assertion Succeeded - assertion.js:L178-186\" id=\"a37a5560-1ee5-4f31-bd53-fbbfd3d5301d\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=12;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;\" vertex=\"1\" parent=\"d6094e8b-04ee-4fd8-ba2c-2dcf2209cd63\">\n            <mxGeometry x=\"70\" y=\"1370\" width=\"180\" height=\"90\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <UserObject label=\"Assertion Succeeded - assertion.js:L178-186\" value=\"Assertion Succeeded - assertion.js:L178-186\" id=\"5cad8e76-7113-4346-8782-4158978c317b\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=12;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;\" vertex=\"1\" parent=\"d6094e8b-04ee-4fd8-ba2c-2dcf2209cd63\">\n            <mxGeometry x=\"70\" y=\"590\" width=\"180\" height=\"90\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <UserObject label=\"Assertion Succeeded - assertion.js:L178-186\" value=\"Assertion Succeeded - assertion.js:L178-186\" id=\"a5d34bfc-a3cf-45a6-86d3-94f8e9bfa9cc\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=12;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;\" vertex=\"1\" parent=\"d6094e8b-04ee-4fd8-ba2c-2dcf2209cd63\">\n            <mxGeometry x=\"70\" y=\"720\" width=\"180\" height=\"90\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <UserObject label=\"Assertion: An Assertion Fails - assertion.js:L157-186\" value=\"Assertion: An Assertion Fails - assertion.js:L157-186\" id=\"ac612a19-34b5-44f3-a209-01b54c8f2336\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=12;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;\" vertex=\"1\" parent=\"d6094e8b-04ee-4fd8-ba2c-2dcf2209cd63\">\n            <mxGeometry x=\"70\" y=\"1630\" width=\"180\" height=\"90\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <UserObject label=\"Error Handling: Process `includeStack` and `showDiff` - assertion.js:L161-183\" value=\"Error Handling: Process `includeStack` and `showDiff` - assertion.js:L161-183\" id=\"574766f7-f27a-47cb-82a5-130e36b00aff\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=12;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;\" vertex=\"1\" parent=\"d6094e8b-04ee-4fd8-ba2c-2dcf2209cd63\">\n            <mxGeometry x=\"390\" y=\"1628.279410214302\" width=\"180\" height=\"90\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <UserObject label=\"Error Handling: Final Error is Thrown - assertion.js:L178-184\" value=\"Error Handling: Final Error is Thrown - assertion.js:L178-184\" id=\"d063631a-4d01-41f9-8dfd-e59f39c1f37b\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=12;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;\" vertex=\"1\" parent=\"d6094e8b-04ee-4fd8-ba2c-2dcf2209cd63\">\n            <mxGeometry x=\"70\" y=\"1890.0237352543922\" width=\"180\" height=\"90\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <mxCell id=\"213ef39d-bd63-4f1d-84d2-38ad99a83f14\" value=\"Data Access:&#xa;Configuration is&#xa;Read for&#xa;Error Handling\" style=\"edgeStyle=orthogonalEdgeStyle;shape=connector;rounded=1;sketch=0;jumpStyle=arc;jumpSize=17;orthogonalLoop=1;jettySize=auto;html=0;shadow=0;labelBackgroundColor=none;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontSize=19;fontColor=#5C5C5C;endArrow=block;endFill=1;endSize=5;sourcePerimeterSpacing=0;targetPerimeterSpacing=0;strokeColor=#A1A1A1;strokeWidth=2;arcSize=50;labelPosition=center;verticalLabelPosition=top;align=center;verticalAlign=bottom;container=1;\" edge=\"1\" parent=\"d6094e8b-04ee-4fd8-ba2c-2dcf2209cd63\" source=\"ac612a19-34b5-44f3-a209-01b54c8f2336\" target=\"574766f7-f27a-47cb-82a5-130e36b00aff\">\n          <mxGeometry relative=\"1\" as=\"geometry\">\n            <Array as=\"points\">\n              <mxPoint x=\"290\" y=\"1675\" />\n              <mxPoint x=\"290\" y=\"1673.279410214302\" />\n            </Array>\n          </mxGeometry>\n        </mxCell>\n        <mxCell id=\"99c7836f-37a1-4e37-a2bc-de0a6ccfcb2a\" value=\"Return Assertion&#xa;Object\" style=\"edgeStyle=orthogonalEdgeStyle;shape=connector;rounded=1;sketch=0;jumpStyle=arc;jumpSize=17;orthogonalLoop=1;jettySize=auto;html=0;shadow=0;labelBackgroundColor=none;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontSize=17;fontColor=#5C5C5C;endArrow=block;endFill=1;endSize=5;sourcePerimeterSpacing=0;targetPerimeterSpacing=0;strokeColor=#A1A1A1;strokeWidth=2;arcSize=50;labelPosition=center;verticalLabelPosition=top;align=center;verticalAlign=bottom;container=1;\" edge=\"1\" parent=\"3b40d2fd-134a-4e51-a482-b1661a48d960\" source=\"3d7b6b57-5884-429f-9697-7b237b43fc8e\" target=\"9a018c67-2789-4a30-99bb-21f2cbb1086a\">\n          <mxGeometry relative=\"1\" as=\"geometry\">\n            <Array as=\"points\">\n              <mxPoint x=\"1125\" y=\"756\" />\n              <mxPoint x=\"1125\" y=\"833.0256410853154\" />\n            </Array>\n          </mxGeometry>\n        </mxCell>\n        <mxCell id=\"d8e3fd59-b0f1-455f-b2e8-2ae686a91ed1\" value=\"Internal Assertion&#xa;Call\" style=\"edgeStyle=orthogonalEdgeStyle;shape=connector;rounded=1;sketch=0;jumpStyle=arc;jumpSize=17;orthogonalLoop=1;jettySize=auto;html=0;shadow=0;labelBackgroundColor=none;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontSize=20;fontColor=#5C5C5C;endArrow=block;endFill=1;endSize=5;sourcePerimeterSpacing=0;targetPerimeterSpacing=0;strokeColor=#A1A1A1;strokeWidth=2;arcSize=50;labelPosition=center;verticalLabelPosition=top;align=center;verticalAlign=bottom;container=1;\" edge=\"1\" parent=\"3b40d2fd-134a-4e51-a482-b1661a48d960\" source=\"6c3832b1-0a35-45e0-9be8-2287555beaad\" target=\"76d13f4d-2e39-4075-8e09-1a5dfd58eb75\">\n          <mxGeometry relative=\"1\" as=\"geometry\">\n            <Array as=\"points\">\n              <mxPoint x=\"3355\" y=\"852.570453378791\" />\n              <mxPoint x=\"3355\" y=\"705.5473585549443\" />\n            </Array>\n          </mxGeometry>\n        </mxCell>\n        <mxCell id=\"80b86db7-c802-4db0-afd1-2bf07c766061\" value=\"Invoking the&#xa;`.eql` method\" style=\"edgeStyle=orthogonalEdgeStyle;shape=connector;rounded=1;sketch=0;jumpStyle=arc;jumpSize=17;orthogonalLoop=1;jettySize=auto;html=0;shadow=0;labelBackgroundColor=none;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontSize=20;fontColor=#5C5C5C;endArrow=block;endFill=1;endSize=5;sourcePerimeterSpacing=0;targetPerimeterSpacing=0;strokeColor=#A1A1A1;strokeWidth=2;arcSize=50;labelPosition=center;verticalLabelPosition=top;align=center;verticalAlign=bottom;container=1;\" edge=\"1\" parent=\"3b40d2fd-134a-4e51-a482-b1661a48d960\" source=\"e835a025-f767-405a-a33a-c0f542b392f7\" target=\"7e1b33fe-16d9-4d47-9794-0dd9f3d99673\">\n          <mxGeometry relative=\"1\" as=\"geometry\">\n            <Array as=\"points\">\n              <mxPoint x=\"1125\" y=\"1936.0000000000005\" />\n              <mxPoint x=\"1125\" y=\"2263.0256410853162\" />\n            </Array>\n          </mxGeometry>\n        </mxCell>\n        <mxCell id=\"fd96522e-38e1-4722-9f0d-c1ee8ce25178\" value=\"Passing Comparison&#xa;Result to&#xa;Core `assert`\" style=\"edgeStyle=orthogonalEdgeStyle;shape=connector;rounded=1;sketch=0;jumpStyle=arc;jumpSize=17;orthogonalLoop=1;jettySize=auto;html=0;shadow=0;labelBackgroundColor=none;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontSize=20;fontColor=#5C5C5C;endArrow=block;endFill=1;endSize=5;sourcePerimeterSpacing=0;targetPerimeterSpacing=0;strokeColor=#A1A1A1;strokeWidth=2;arcSize=50;labelPosition=center;verticalLabelPosition=top;align=center;verticalAlign=bottom;container=1;\" edge=\"1\" parent=\"3b40d2fd-134a-4e51-a482-b1661a48d960\" source=\"7e1b33fe-16d9-4d47-9794-0dd9f3d99673\" target=\"7edfbeb5-0c32-424f-8365-128c3ca419ab\">\n          <mxGeometry relative=\"1\" as=\"geometry\">\n            <Array as=\"points\">\n              <mxPoint x=\"1715\" y=\"2263.0256410853153\" />\n              <mxPoint x=\"1715\" y=\"2259.4664317129655\" />\n              <mxPoint x=\"3445\" y=\"2259.4664317129655\" />\n              <mxPoint x=\"3445\" y=\"1875.5473585549444\" />\n            </Array>\n          </mxGeometry>\n        </mxCell>\n        <mxCell id=\"b460ae4c-64b7-4ac5-9736-84946e6973e4\" value=\"Assertion: Pass&#xa;Assertion Object&#xa;Through Chain\" style=\"edgeStyle=orthogonalEdgeStyle;shape=connector;rounded=1;sketch=0;jumpStyle=arc;jumpSize=17;orthogonalLoop=1;jettySize=auto;html=0;shadow=0;labelBackgroundColor=none;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontSize=17;fontColor=#5C5C5C;endArrow=block;endFill=1;endSize=5;sourcePerimeterSpacing=0;targetPerimeterSpacing=0;strokeColor=#A1A1A1;strokeWidth=2;arcSize=50;labelPosition=center;verticalLabelPosition=top;align=center;verticalAlign=bottom;container=1;\" edge=\"1\" parent=\"3b40d2fd-134a-4e51-a482-b1661a48d960\" source=\"1c04e1fd-12be-4748-8350-56b2dcb56d36\" target=\"a1109ae1-7092-4965-b238-8a25b920c091\">\n          <mxGeometry relative=\"1\" as=\"geometry\">\n            <Array as=\"points\">\n              <mxPoint x=\"950\" y=\"485.99999999999994\" />\n              <mxPoint x=\"950\" y=\"486.2717914032763\" />\n              <mxPoint x=\"1125\" y=\"486.2717914032764\" />\n              <mxPoint x=\"1125\" y=\"703.0256410853156\" />\n            </Array>\n          </mxGeometry>\n        </mxCell>\n        <mxCell id=\"48b56c37-0c89-4129-9ecc-6639a1b56534\" value=\"Flow 1&#xa;(expect): Assertion&#xa;Object Propagation\" style=\"edgeStyle=orthogonalEdgeStyle;shape=connector;rounded=1;sketch=0;jumpStyle=arc;jumpSize=17;orthogonalLoop=1;jettySize=auto;html=0;shadow=0;labelBackgroundColor=none;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontSize=18;fontColor=#5C5C5C;endArrow=block;endFill=1;endSize=5;sourcePerimeterSpacing=0;targetPerimeterSpacing=0;strokeColor=#A1A1A1;strokeWidth=2;arcSize=50;labelPosition=center;verticalLabelPosition=top;align=center;verticalAlign=bottom;container=1;\" edge=\"1\" parent=\"3b40d2fd-134a-4e51-a482-b1661a48d960\" source=\"78c5daf9-33aa-4345-8ce8-0b3d6779ad32\" target=\"d0e4abd6-88c2-4a83-a735-efeb4261bc1a\">\n          <mxGeometry relative=\"1\" as=\"geometry\">\n            <Array as=\"points\">\n              <mxPoint x=\"1125\" y=\"886\" />\n              <mxPoint x=\"1125\" y=\"963.0256410853153\" />\n            </Array>\n          </mxGeometry>\n        </mxCell>\n        <mxCell id=\"9134c622-6ef3-42f8-afb4-08b8c1a32d61\" value=\"Flow 1&#xa;(expect): Pass&#xa;Result to&#xa;Core Assert&#xa;Logic\" style=\"edgeStyle=orthogonalEdgeStyle;shape=connector;rounded=1;sketch=0;jumpStyle=arc;jumpSize=17;orthogonalLoop=1;jettySize=auto;html=0;shadow=0;labelBackgroundColor=none;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontSize=20;fontColor=#5C5C5C;endArrow=block;endFill=1;endSize=5;sourcePerimeterSpacing=0;targetPerimeterSpacing=0;strokeColor=#A1A1A1;strokeWidth=2;arcSize=50;labelPosition=center;verticalLabelPosition=top;align=center;verticalAlign=bottom;container=1;\" edge=\"1\" parent=\"3b40d2fd-134a-4e51-a482-b1661a48d960\" source=\"311ab964-3643-4a03-a2eb-86baa60c3803\" target=\"33c4932a-9999-4a12-a99c-e7fa68d52a3b\">\n          <mxGeometry relative=\"1\" as=\"geometry\">\n            <Array as=\"points\">\n              <mxPoint x=\"2035\" y=\"964.3020767420937\" />\n              <mxPoint x=\"2035\" y=\"964.7136942946722\" />\n              <mxPoint x=\"3365\" y=\"964.7136942946722\" />\n              <mxPoint x=\"3365\" y=\"835.5473585549443\" />\n            </Array>\n          </mxGeometry>\n        </mxCell>\n        <mxCell id=\"0306bdf0-17b6-4e64-b59a-bcb5f9487753\" value=\"Flow 2&#xa;(assert): Internal&#xa;Call to&#xa;`eql`\" style=\"edgeStyle=orthogonalEdgeStyle;shape=connector;rounded=1;sketch=0;jumpStyle=arc;jumpSize=17;orthogonalLoop=1;jettySize=auto;html=0;shadow=0;labelBackgroundColor=none;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontSize=18;fontColor=#5C5C5C;endArrow=block;endFill=1;endSize=5;sourcePerimeterSpacing=0;targetPerimeterSpacing=0;strokeColor=#A1A1A1;strokeWidth=2;arcSize=50;labelPosition=center;verticalLabelPosition=top;align=center;verticalAlign=bottom;container=1;\" edge=\"1\" parent=\"3b40d2fd-134a-4e51-a482-b1661a48d960\" source=\"5d95bf56-eb2d-4a9a-84ff-c22854329ade\" target=\"6eef333b-2667-42fb-b1d6-1ade44f08169\">\n          <mxGeometry relative=\"1\" as=\"geometry\">\n            <Array as=\"points\">\n              <mxPoint x=\"1125\" y=\"1416.0000000000002\" />\n              <mxPoint x=\"1125\" y=\"1483.0256410853158\" />\n            </Array>\n          </mxGeometry>\n        </mxCell>\n        <mxCell id=\"24352a06-6984-42d3-83f4-a9736f36f8c2\" value=\"Flow 2&#xa;(assert): Pass&#xa;Result to&#xa;Core Assert&#xa;Logic\" style=\"edgeStyle=orthogonalEdgeStyle;shape=connector;rounded=1;sketch=0;jumpStyle=arc;jumpSize=17;orthogonalLoop=1;jettySize=auto;html=0;shadow=0;labelBackgroundColor=none;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontSize=20;fontColor=#5C5C5C;endArrow=block;endFill=1;endSize=5;sourcePerimeterSpacing=0;targetPerimeterSpacing=0;strokeColor=#A1A1A1;strokeWidth=2;arcSize=50;labelPosition=center;verticalLabelPosition=top;align=center;verticalAlign=bottom;container=1;\" edge=\"1\" parent=\"3b40d2fd-134a-4e51-a482-b1661a48d960\" source=\"6eef333b-2667-42fb-b1d6-1ade44f08169\" target=\"aa2ef5c6-dd9d-48fa-ae4b-6c7e431eabcf\">\n          <mxGeometry relative=\"1\" as=\"geometry\">\n            <Array as=\"points\">\n              <mxPoint x=\"1715\" y=\"1483.0256410853156\" />\n              <mxPoint x=\"1715\" y=\"1479.2705656901312\" />\n              <mxPoint x=\"3395\" y=\"1479.2705656901312\" />\n              <mxPoint x=\"3395\" y=\"1225.5473585549444\" />\n            </Array>\n          </mxGeometry>\n        </mxCell>\n        <mxCell id=\"9019d3ca-3407-4b99-85cc-b3e58ffebd0f\" value=\"Flow 3&#xa;(type check):&#xa;Internal Call&#xa;to `.a()`\" style=\"edgeStyle=orthogonalEdgeStyle;shape=connector;rounded=1;sketch=0;jumpStyle=arc;jumpSize=17;orthogonalLoop=1;jettySize=auto;html=0;shadow=0;labelBackgroundColor=none;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontSize=18;fontColor=#5C5C5C;endArrow=block;endFill=1;endSize=5;sourcePerimeterSpacing=0;targetPerimeterSpacing=0;strokeColor=#A1A1A1;strokeWidth=2;arcSize=50;labelPosition=center;verticalLabelPosition=top;align=center;verticalAlign=bottom;container=1;\" edge=\"1\" parent=\"3b40d2fd-134a-4e51-a482-b1661a48d960\" source=\"87dbf5e6-441d-4764-9508-43ab5d27a5b9\" target=\"867c90fe-63e6-47e3-a6bc-8a4780fb7948\">\n          <mxGeometry relative=\"1\" as=\"geometry\">\n            <Array as=\"points\">\n              <mxPoint x=\"1125\" y=\"1676.0000000000002\" />\n              <mxPoint x=\"1125\" y=\"1743.025641085316\" />\n            </Array>\n          </mxGeometry>\n        </mxCell>\n        <mxCell id=\"84523489-6af8-4277-b04b-8dec81c35a09\" value=\"Flow 3&#xa;(type check):&#xa;Pass Result&#xa;to Core&#xa;Assert Logic\" style=\"edgeStyle=orthogonalEdgeStyle;shape=connector;rounded=1;sketch=0;jumpStyle=arc;jumpSize=17;orthogonalLoop=1;jettySize=auto;html=0;shadow=0;labelBackgroundColor=none;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontSize=20;fontColor=#5C5C5C;endArrow=block;endFill=1;endSize=5;sourcePerimeterSpacing=0;targetPerimeterSpacing=0;strokeColor=#A1A1A1;strokeWidth=2;arcSize=50;labelPosition=center;verticalLabelPosition=top;align=center;verticalAlign=bottom;container=1;\" edge=\"1\" parent=\"3b40d2fd-134a-4e51-a482-b1661a48d960\" source=\"867c90fe-63e6-47e3-a6bc-8a4780fb7948\" target=\"79cfa8e5-df26-4e28-a847-e90640711609\">\n          <mxGeometry relative=\"1\" as=\"geometry\">\n            <Array as=\"points\">\n              <mxPoint x=\"1715\" y=\"1743.0256410853158\" />\n              <mxPoint x=\"1715\" y=\"1738.4481745989804\" />\n              <mxPoint x=\"3415\" y=\"1738.4481745989804\" />\n              <mxPoint x=\"3415\" y=\"1485.5473585549444\" />\n            </Array>\n          </mxGeometry>\n        </mxCell>\n        <mxCell id=\"f0263f23-4936-4a4e-8c37-828310016668\" value=\"Own Property&#xa;Flow: Transmit&#xa;Existence Result\" style=\"edgeStyle=orthogonalEdgeStyle;shape=connector;rounded=1;sketch=0;jumpStyle=arc;jumpSize=17;orthogonalLoop=1;jettySize=auto;html=0;shadow=0;labelBackgroundColor=none;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontSize=20;fontColor=#5C5C5C;endArrow=block;endFill=1;endSize=5;sourcePerimeterSpacing=0;targetPerimeterSpacing=0;strokeColor=#A1A1A1;strokeWidth=2;arcSize=50;labelPosition=center;verticalLabelPosition=top;align=center;verticalAlign=bottom;container=1;\" edge=\"1\" parent=\"3b40d2fd-134a-4e51-a482-b1661a48d960\" source=\"68e92267-8ca9-47a7-b850-37cb8ad1e9d4\" target=\"58e1a797-b38e-41d5-9709-2f9f5045a403\">\n          <mxGeometry relative=\"1\" as=\"geometry\">\n            <Array as=\"points\">\n              <mxPoint x=\"3345\" y=\"717.1284497576843\" />\n              <mxPoint x=\"3345\" y=\"575.5473585549443\" />\n            </Array>\n          </mxGeometry>\n        </mxCell>\n        <mxCell id=\"864ab690-d41e-45b6-8c8d-691624634457\" value=\"Keys Assertion&#xa;Flow: Transition&#xa;to New&#xa;Scenario\" style=\"edgeStyle=orthogonalEdgeStyle;shape=connector;rounded=1;sketch=0;jumpStyle=arc;jumpSize=17;orthogonalLoop=1;jettySize=auto;html=0;shadow=0;labelBackgroundColor=none;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontSize=20;fontColor=#5C5C5C;endArrow=block;endFill=1;endSize=5;sourcePerimeterSpacing=0;targetPerimeterSpacing=0;strokeColor=#A1A1A1;strokeWidth=2;arcSize=50;labelPosition=center;verticalLabelPosition=top;align=center;verticalAlign=bottom;container=1;\" edge=\"1\" parent=\"3b40d2fd-134a-4e51-a482-b1661a48d960\" source=\"58e1a797-b38e-41d5-9709-2f9f5045a403\" target=\"30085bc9-0bfa-4cc9-bcf7-d56a98b03843\">\n          <mxGeometry relative=\"1\" as=\"geometry\">\n            <Array as=\"points\">\n              <mxPoint x=\"3830\" y=\"575.5473585549443\" />\n              <mxPoint x=\"3830\" y=\"585.6080225326247\" />\n              <mxPoint x=\"4265\" y=\"585.6080225326247\" />\n              <mxPoint x=\"4265\" y=\"171\" />\n              <mxPoint x=\"1145\" y=\"171\" />\n              <mxPoint x=\"1145\" y=\"443.29389354012744\" />\n              <mxPoint x=\"1360\" y=\"443.2938935401273\" />\n              <mxPoint x=\"1360\" y=\"443.02564108531544\" />\n            </Array>\n          </mxGeometry>\n        </mxCell>\n        <mxCell id=\"8cfff0c7-4a27-436d-8afd-c3cc5c55e206\" value=\"Assert Interface&#xa;Flow: Transition&#xa;to New&#xa;Scenario\" style=\"edgeStyle=orthogonalEdgeStyle;shape=connector;rounded=1;sketch=0;jumpStyle=arc;jumpSize=17;orthogonalLoop=1;jettySize=auto;html=0;shadow=0;labelBackgroundColor=none;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontSize=20;fontColor=#5C5C5C;endArrow=block;endFill=1;endSize=5;sourcePerimeterSpacing=0;targetPerimeterSpacing=0;strokeColor=#A1A1A1;strokeWidth=2;arcSize=50;labelPosition=center;verticalLabelPosition=top;align=center;verticalAlign=bottom;container=1;\" edge=\"1\" parent=\"3b40d2fd-134a-4e51-a482-b1661a48d960\" source=\"5672de1c-1b3b-4e88-a903-227864227636\" target=\"33e4ebe1-541d-4240-9a7e-89cf413453fb\">\n          <mxGeometry relative=\"1\" as=\"geometry\">\n            <Array as=\"points\">\n              <mxPoint x=\"2035\" y=\"474.44448876155315\" />\n              <mxPoint x=\"2035\" y=\"506.6494411396484\" />\n              <mxPoint x=\"3345\" y=\"506.6494411396484\" />\n              <mxPoint x=\"3345\" y=\"121\" />\n              <mxPoint x=\"110\" y=\"121\" />\n              <mxPoint x=\"110\" y=\"1286.18663177676\" />\n              <mxPoint x=\"481.25\" y=\"1286.1866317767594\" />\n              <mxPoint x=\"481.25\" y=\"1285.9999999999998\" />\n            </Array>\n          </mxGeometry>\n        </mxCell>\n        <mxCell id=\"87fa4415-4367-42b3-ab84-d91f0e8fa5e3\" value=\"Data Transmission:&#xa;Property Details&#xa;to Utility\" style=\"edgeStyle=orthogonalEdgeStyle;shape=connector;rounded=1;sketch=0;jumpStyle=arc;jumpSize=17;orthogonalLoop=1;jettySize=auto;html=0;shadow=0;labelBackgroundColor=none;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontSize=20;fontColor=#5C5C5C;endArrow=block;endFill=1;endSize=5;sourcePerimeterSpacing=0;targetPerimeterSpacing=0;strokeColor=#A1A1A1;strokeWidth=2;arcSize=50;labelPosition=center;verticalLabelPosition=top;align=center;verticalAlign=bottom;container=1;\" edge=\"1\" parent=\"3b40d2fd-134a-4e51-a482-b1661a48d960\" source=\"368b33b2-faaa-4ee1-9226-8a883a702652\" target=\"1b6ddf15-ae7d-43c4-82f7-f9dba5b20e71\">\n          <mxGeometry relative=\"1\" as=\"geometry\">\n            <Array as=\"points\">\n              <mxPoint x=\"3830\" y=\"2135.5473585549444\" />\n              <mxPoint x=\"3830\" y=\"2122.997129859308\" />\n              <mxPoint x=\"4930\" y=\"2122.9971298593086\" />\n              <mxPoint x=\"4930\" y=\"1840.032344749457\" />\n            </Array>\n          </mxGeometry>\n        </mxCell>\n        <mxCell id=\"1dfda9d3-2a94-43f7-a794-98e6f34e7c13\" value=\"Data Flow:&#xa;`Assertion.prototype` is&#xa;Mutated\" style=\"edgeStyle=orthogonalEdgeStyle;shape=connector;rounded=1;sketch=0;jumpStyle=arc;jumpSize=17;orthogonalLoop=1;jettySize=auto;html=0;shadow=0;labelBackgroundColor=none;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontSize=20;fontColor=#5C5C5C;endArrow=block;endFill=1;endSize=5;sourcePerimeterSpacing=0;targetPerimeterSpacing=0;strokeColor=#A1A1A1;strokeWidth=2;arcSize=50;labelPosition=center;verticalLabelPosition=top;align=center;verticalAlign=bottom;container=1;\" edge=\"1\" parent=\"3b40d2fd-134a-4e51-a482-b1661a48d960\" source=\"1b6ddf15-ae7d-43c4-82f7-f9dba5b20e71\" target=\"e5c0ec36-1aca-4726-a72f-3abe6486de6d\">\n          <mxGeometry relative=\"1\" as=\"geometry\">\n            <Array as=\"points\">\n              <mxPoint x=\"5345\" y=\"1840.032344749457\" />\n              <mxPoint x=\"5345\" y=\"1821.8088947665074\" />\n              <mxPoint x=\"6175\" y=\"1821.8088947665074\" />\n              <mxPoint x=\"6175\" y=\"280.54735855494414\" />\n              <mxPoint x=\"3475\" y=\"280.54735855494414\" />\n              <mxPoint x=\"3475\" y=\"445.54735855494437\" />\n            </Array>\n          </mxGeometry>\n        </mxCell>\n        <mxCell id=\"b39cb986-0d94-4f8f-9094-c7d5a64de62c\" value=\"Data Transmission:&#xa;Method Details&#xa;to Utility\" style=\"edgeStyle=orthogonalEdgeStyle;shape=connector;rounded=1;sketch=0;jumpStyle=arc;jumpSize=17;orthogonalLoop=1;jettySize=auto;html=0;shadow=0;labelBackgroundColor=none;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontSize=20;fontColor=#5C5C5C;endArrow=block;endFill=1;endSize=5;sourcePerimeterSpacing=0;targetPerimeterSpacing=0;strokeColor=#A1A1A1;strokeWidth=2;arcSize=50;labelPosition=center;verticalLabelPosition=top;align=center;verticalAlign=bottom;container=1;\" edge=\"1\" parent=\"3b40d2fd-134a-4e51-a482-b1661a48d960\" source=\"e5c0ec36-1aca-4726-a72f-3abe6486de6d\" target=\"24c28424-4ad9-42bb-aeb9-4019b6072a1f\">\n          <mxGeometry relative=\"1\" as=\"geometry\">\n            <Array as=\"points\">\n              <mxPoint x=\"3830\" y=\"445.54735855494425\" />\n              <mxPoint x=\"3830\" y=\"464.9098650622648\" />\n              <mxPoint x=\"4245\" y=\"464.90986506226477\" />\n              <mxPoint x=\"4245\" y=\"1687.9971298593086\" />\n            </Array>\n          </mxGeometry>\n        </mxCell>\n        <mxCell id=\"62849151-9f8d-4a3c-b751-42113f3f1ee8\" value=\"Flow 1:&#xa;Assertion object&#xa;passed to&#xa;core logic\" style=\"edgeStyle=orthogonalEdgeStyle;shape=connector;rounded=1;sketch=0;jumpStyle=arc;jumpSize=17;orthogonalLoop=1;jettySize=auto;html=0;shadow=0;labelBackgroundColor=none;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontSize=19;fontColor=#5C5C5C;endArrow=block;endFill=1;endSize=5;sourcePerimeterSpacing=0;targetPerimeterSpacing=0;strokeColor=#A1A1A1;strokeWidth=2;arcSize=50;labelPosition=center;verticalLabelPosition=top;align=center;verticalAlign=bottom;container=1;\" edge=\"1\" parent=\"3b40d2fd-134a-4e51-a482-b1661a48d960\" source=\"1899beed-01ef-4c54-b347-1cedacb7ae6b\" target=\"64a3623b-42f0-49bf-a81f-0e491a6a4740\">\n          <mxGeometry relative=\"1\" as=\"geometry\">\n            <Array as=\"points\">\n              <mxPoint x=\"741.25\" y=\"1156\" />\n              <mxPoint x=\"741.25\" y=\"1156.4475408560274\" />\n              <mxPoint x=\"1125\" y=\"1156.4475408560274\" />\n              <mxPoint x=\"1125\" y=\"1353.0256410853158\" />\n            </Array>\n          </mxGeometry>\n        </mxCell>\n        <mxCell id=\"fd7021ad-b9a7-4df1-b8da-d76bdd0c722b\" value=\"Flow 2:&#xa;Assertion object&#xa;passed to&#xa;core logic\" style=\"edgeStyle=orthogonalEdgeStyle;shape=connector;rounded=1;sketch=0;jumpStyle=arc;jumpSize=17;orthogonalLoop=1;jettySize=auto;html=0;shadow=0;labelBackgroundColor=none;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontSize=20;fontColor=#5C5C5C;endArrow=block;endFill=1;endSize=5;sourcePerimeterSpacing=0;targetPerimeterSpacing=0;strokeColor=#A1A1A1;strokeWidth=2;arcSize=50;labelPosition=center;verticalLabelPosition=top;align=center;verticalAlign=bottom;container=1;\" edge=\"1\" parent=\"3b40d2fd-134a-4e51-a482-b1661a48d960\" source=\"b01e639f-18ef-4373-b85c-97964c77650e\" target=\"52112520-8bc4-4780-b274-db60aa7341c2\">\n          <mxGeometry relative=\"1\" as=\"geometry\">\n            <Array as=\"points\">\n              <mxPoint x=\"1135\" y=\"1806\" />\n              <mxPoint x=\"1135\" y=\"2003.025641085316\" />\n            </Array>\n          </mxGeometry>\n        </mxCell>\n        <mxCell id=\"9416e139-1247-48c5-ae43-7d7baa4319fa\" value=\"Flow 3&#xa;(Failure): Assertion&#xa;object passed&#xa;to core&#xa;logic\" style=\"edgeStyle=orthogonalEdgeStyle;shape=connector;rounded=1;sketch=0;jumpStyle=arc;jumpSize=17;orthogonalLoop=1;jettySize=auto;html=0;shadow=0;labelBackgroundColor=none;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontSize=18;fontColor=#5C5C5C;endArrow=block;endFill=1;endSize=5;sourcePerimeterSpacing=0;targetPerimeterSpacing=0;strokeColor=#A1A1A1;strokeWidth=2;arcSize=50;labelPosition=center;verticalLabelPosition=top;align=center;verticalAlign=bottom;container=1;\" edge=\"1\" parent=\"3b40d2fd-134a-4e51-a482-b1661a48d960\" source=\"6419a1c1-4003-4f53-a1f5-2f40b7c0fa4f\" target=\"354859c5-3779-42f5-acdd-6bc7cc000499\">\n          <mxGeometry relative=\"1\" as=\"geometry\">\n            <Array as=\"points\">\n              <mxPoint x=\"1125\" y=\"1546.0000000000002\" />\n              <mxPoint x=\"1125\" y=\"1613.0256410853158\" />\n            </Array>\n          </mxGeometry>\n        </mxCell>\n        <mxCell id=\"aab0a4c6-30a9-4fc4-b321-5dddd67bc636\" value=\"Flow 3&#xa;(Failure): Failure&#xa;condition passed&#xa;to `this.assert`\" style=\"edgeStyle=orthogonalEdgeStyle;shape=connector;rounded=1;sketch=0;jumpStyle=arc;jumpSize=17;orthogonalLoop=1;jettySize=auto;html=0;shadow=0;labelBackgroundColor=none;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontSize=20;fontColor=#5C5C5C;endArrow=block;endFill=1;endSize=5;sourcePerimeterSpacing=0;targetPerimeterSpacing=0;strokeColor=#A1A1A1;strokeWidth=2;arcSize=50;labelPosition=center;verticalLabelPosition=top;align=center;verticalAlign=bottom;container=1;\" edge=\"1\" parent=\"3b40d2fd-134a-4e51-a482-b1661a48d960\" source=\"354859c5-3779-42f5-acdd-6bc7cc000499\" target=\"1af6ee46-5ea3-408a-9022-e8633ccb7410\">\n          <mxGeometry relative=\"1\" as=\"geometry\">\n            <Array as=\"points\">\n              <mxPoint x=\"1715\" y=\"1613.0256410853156\" />\n              <mxPoint x=\"1715\" y=\"1608.858091922184\" />\n              <mxPoint x=\"3405\" y=\"1608.8580919221838\" />\n              <mxPoint x=\"3405\" y=\"1355.5473585549444\" />\n            </Array>\n          </mxGeometry>\n        </mxCell>\n        <mxCell id=\"b36d7bf5-a7fd-45a2-bc58-9c4b688a78d4\" value=\"Assertion Result&#xa;Transmission\" style=\"edgeStyle=orthogonalEdgeStyle;shape=connector;rounded=1;sketch=0;jumpStyle=arc;jumpSize=17;orthogonalLoop=1;jettySize=auto;html=0;shadow=0;labelBackgroundColor=none;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontSize=20;fontColor=#5C5C5C;endArrow=block;endFill=1;endSize=5;sourcePerimeterSpacing=0;targetPerimeterSpacing=0;strokeColor=#A1A1A1;strokeWidth=2;arcSize=50;labelPosition=center;verticalLabelPosition=top;align=center;verticalAlign=bottom;container=1;\" edge=\"1\" parent=\"3b40d2fd-134a-4e51-a482-b1661a48d960\" source=\"618aefbe-9477-42a6-a6d7-d5f60f805f29\" target=\"1ac5073d-fc9a-43ed-914f-9da183d33cf4\">\n          <mxGeometry relative=\"1\" as=\"geometry\">\n            <Array as=\"points\">\n              <mxPoint x=\"3425\" y=\"1848.4856251319115\" />\n              <mxPoint x=\"3425\" y=\"1615.5473585549444\" />\n            </Array>\n          </mxGeometry>\n        </mxCell>\n        <mxCell id=\"b52e6420-664e-4141-a71e-4b0f257b4b3b\" value=\"Assertion Result&#xa;Transmission\" style=\"edgeStyle=orthogonalEdgeStyle;shape=connector;rounded=1;sketch=0;jumpStyle=arc;jumpSize=17;orthogonalLoop=1;jettySize=auto;html=0;shadow=0;labelBackgroundColor=none;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontSize=20;fontColor=#5C5C5C;endArrow=block;endFill=1;endSize=5;sourcePerimeterSpacing=0;targetPerimeterSpacing=0;strokeColor=#A1A1A1;strokeWidth=2;arcSize=50;labelPosition=center;verticalLabelPosition=top;align=center;verticalAlign=bottom;container=1;\" edge=\"1\" parent=\"3b40d2fd-134a-4e51-a482-b1661a48d960\" source=\"f6a060df-b7b2-4ddf-a5d6-ecc8fc05573e\" target=\"a37a5560-1ee5-4f31-bd53-fbbfd3d5301d\">\n          <mxGeometry relative=\"1\" as=\"geometry\">\n            <Array as=\"points\">\n              <mxPoint x=\"2035\" y=\"2133.0256410853153\" />\n              <mxPoint x=\"2035\" y=\"2117.4411915127284\" />\n              <mxPoint x=\"3435\" y=\"2117.4411915127284\" />\n              <mxPoint x=\"3435\" y=\"1745.5473585549444\" />\n            </Array>\n          </mxGeometry>\n        </mxCell>\n        <mxCell id=\"49a6e174-0dc2-49f9-a752-6298a1c48b17\" value=\"Assertion Result&#xa;Transmission\" style=\"edgeStyle=orthogonalEdgeStyle;shape=connector;rounded=1;sketch=0;jumpStyle=arc;jumpSize=17;orthogonalLoop=1;jettySize=auto;html=0;shadow=0;labelBackgroundColor=none;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontSize=20;fontColor=#5C5C5C;endArrow=block;endFill=1;endSize=5;sourcePerimeterSpacing=0;targetPerimeterSpacing=0;strokeColor=#A1A1A1;strokeWidth=2;arcSize=50;labelPosition=center;verticalLabelPosition=top;align=center;verticalAlign=bottom;container=1;\" edge=\"1\" parent=\"3b40d2fd-134a-4e51-a482-b1661a48d960\" source=\"5f37baa4-b3d9-4f39-ad43-014a9bb088b4\" target=\"5cad8e76-7113-4346-8782-4158978c317b\">\n          <mxGeometry relative=\"1\" as=\"geometry\">\n            <Array as=\"points\">\n              <mxPoint x=\"3375\" y=\"1094.302076742094\" />\n              <mxPoint x=\"3375\" y=\"965.5473585549444\" />\n            </Array>\n          </mxGeometry>\n        </mxCell>\n        <mxCell id=\"970d7816-7875-46ca-bab1-a3a0e1416800\" value=\"Assertion Result&#xa;Transmission\" style=\"edgeStyle=orthogonalEdgeStyle;shape=connector;rounded=1;sketch=0;jumpStyle=arc;jumpSize=17;orthogonalLoop=1;jettySize=auto;html=0;shadow=0;labelBackgroundColor=none;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontSize=20;fontColor=#5C5C5C;endArrow=block;endFill=1;endSize=5;sourcePerimeterSpacing=0;targetPerimeterSpacing=0;strokeColor=#A1A1A1;strokeWidth=2;arcSize=50;labelPosition=center;verticalLabelPosition=top;align=center;verticalAlign=bottom;container=1;\" edge=\"1\" parent=\"3b40d2fd-134a-4e51-a482-b1661a48d960\" source=\"ce702a01-133b-434c-813b-e89a1811b230\" target=\"a5d34bfc-a3cf-45a6-86d3-94f8e9bfa9cc\">\n          <mxGeometry relative=\"1\" as=\"geometry\">\n            <Array as=\"points\">\n              <mxPoint x=\"2035\" y=\"1224.3020767420942\" />\n              <mxPoint x=\"2035\" y=\"1224.1413478956786\" />\n              <mxPoint x=\"3385\" y=\"1224.1413478956786\" />\n              <mxPoint x=\"3385\" y=\"1095.5473585549444\" />\n            </Array>\n          </mxGeometry>\n        </mxCell>\n        <mxCell id=\"74e21110-13cc-49d3-8c1b-76be0ba1d7cf\" value=\"Setup: Register&#xa;Language Chain&#xa;Property &#39;to&#39;\" style=\"edgeStyle=orthogonalEdgeStyle;shape=connector;rounded=1;sketch=0;jumpStyle=arc;jumpSize=17;orthogonalLoop=1;jettySize=auto;html=0;shadow=0;labelBackgroundColor=none;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontSize=20;fontColor=#5C5C5C;endArrow=block;endFill=1;endSize=5;sourcePerimeterSpacing=0;targetPerimeterSpacing=0;strokeColor=#A1A1A1;strokeWidth=2;arcSize=50;labelPosition=center;verticalLabelPosition=top;align=center;verticalAlign=bottom;container=1;\" edge=\"1\" parent=\"3b40d2fd-134a-4e51-a482-b1661a48d960\" source=\"ddeb7b36-bb2d-429a-b928-35cd5010095f\" target=\"a38ba456-b539-4581-848b-6dfd39a43a50\">\n          <mxGeometry relative=\"1\" as=\"geometry\">\n            <Array as=\"points\">\n              <mxPoint x=\"2995\" y=\"406.00000000000006\" />\n              <mxPoint x=\"2995\" y=\"411.6494411544597\" />\n              <mxPoint x=\"3170\" y=\"411.64944115445974\" />\n              <mxPoint x=\"3170\" y=\"412.00116044862665\" />\n              <mxPoint x=\"3355\" y=\"412.00116044862654\" />\n              <mxPoint x=\"3355\" y=\"229.54735855494425\" />\n              <mxPoint x=\"4255\" y=\"229.54735855494425\" />\n              <mxPoint x=\"4255\" y=\"1395.458789068265\" />\n              <mxPoint x=\"4480\" y=\"1395.458789068265\" />\n              <mxPoint x=\"4480\" y=\"1391.9971298593086\" />\n              <mxPoint x=\"4930\" y=\"1391.9971298593086\" />\n              <mxPoint x=\"4930\" y=\"1580.0323447494568\" />\n            </Array>\n          </mxGeometry>\n        </mxCell>\n        <UserObject label=\"config.js\" value=\"config.js\" id=\"93fdacaf-e207-4251-9e75-cc6f45f586a2\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=22;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;align=left;verticalAlign=bottom;spacing=0;spacingTop=-14;spacingLeft=15;arcSize=4;labelPosition=center;verticalLabelPosition=top;;fillColor=#f4e9e9\" vertex=\"1\" parent=\"3b40d2fd-134a-4e51-a482-b1661a48d960\">\n            <mxGeometry x=\"5790\" y=\"2480.5710938093366\" width=\"320\" height=\"230\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <UserObject label=\"Config: Define Default Configuration - config.js:L1-101\" value=\"Config: Define Default Configuration - config.js:L1-101\" id=\"7960cb22-e502-47ae-99aa-d8339852ad00\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=12;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;\" vertex=\"1\" parent=\"93fdacaf-e207-4251-9e75-cc6f45f586a2\">\n            <mxGeometry x=\"70\" y=\"70\" width=\"180\" height=\"90\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <mxCell id=\"4cb0c888-8a58-4fba-bcdb-98727b5f7e41\" value=\"Data Flow:&#xa;Object Passed&#xa;to Message&#xa;Formatter\" style=\"edgeStyle=orthogonalEdgeStyle;shape=connector;rounded=1;sketch=0;jumpStyle=arc;jumpSize=17;orthogonalLoop=1;jettySize=auto;html=0;shadow=0;labelBackgroundColor=none;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontSize=20;fontColor=#5C5C5C;endArrow=block;endFill=1;endSize=5;sourcePerimeterSpacing=0;targetPerimeterSpacing=0;strokeColor=#A1A1A1;strokeWidth=2;arcSize=50;labelPosition=center;verticalLabelPosition=top;align=center;verticalAlign=bottom;container=1;\" edge=\"1\" parent=\"3b40d2fd-134a-4e51-a482-b1661a48d960\" source=\"574766f7-f27a-47cb-82a5-130e36b00aff\" target=\"6f06b54f-8fd6-4b17-b471-6640ca1910cf\">\n          <mxGeometry relative=\"1\" as=\"geometry\">\n            <Array as=\"points\">\n              <mxPoint x=\"4245\" y=\"2003.8267687692464\" />\n              <mxPoint x=\"4245\" y=\"1957.9971298593086\" />\n            </Array>\n          </mxGeometry>\n        </mxCell>\n        <mxCell id=\"ae37d70f-af46-4160-ad9c-307e9042cf37\" value=\"Data Flow:&#xa;Formatted Message&#xa;Returned\" style=\"edgeStyle=orthogonalEdgeStyle;shape=connector;rounded=1;sketch=0;jumpStyle=arc;jumpSize=17;orthogonalLoop=1;jettySize=auto;html=0;shadow=0;labelBackgroundColor=none;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontSize=20;fontColor=#5C5C5C;endArrow=block;endFill=1;endSize=5;sourcePerimeterSpacing=0;targetPerimeterSpacing=0;strokeColor=#A1A1A1;strokeWidth=2;arcSize=50;labelPosition=center;verticalLabelPosition=top;align=center;verticalAlign=bottom;container=1;\" edge=\"1\" parent=\"3b40d2fd-134a-4e51-a482-b1661a48d960\" source=\"6f06b54f-8fd6-4b17-b471-6640ca1910cf\" target=\"d063631a-4d01-41f9-8dfd-e59f39c1f37b\">\n          <mxGeometry relative=\"1\" as=\"geometry\">\n            <Array as=\"points\">\n              <mxPoint x=\"4940\" y=\"1957.9971298593089\" />\n              <mxPoint x=\"4940\" y=\"2006.6867693505574\" />\n              <mxPoint x=\"6175\" y=\"2006.6867693505571\" />\n              <mxPoint x=\"6175\" y=\"2430.571093809336\" />\n              <mxPoint x=\"3475\" y=\"2430.571093809336\" />\n              <mxPoint x=\"3475\" y=\"2265.571093809336\" />\n            </Array>\n          </mxGeometry>\n        </mxCell>\n        <UserObject label=\"chai.js\" value=\"chai.js\" id=\"e3eb933b-c619-452d-ba91-b18a3e8e6c21\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=28;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;align=left;verticalAlign=bottom;spacing=0;spacingTop=-14;spacingLeft=15;arcSize=4;labelPosition=center;verticalLabelPosition=top;;fillColor=#f9f3f3\" vertex=\"1\" parent=\"1f5c4ae6-1ee0-44d5-af43-2b58776742c5\">\n            <mxGeometry x=\"6660\" y=\"2367.3749804299396\" width=\"640\" height=\"360.32340000000005\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <UserObject label=\"Plugin Registration: Invoke `chai.use()` - chai.js:L35-48\" value=\"Plugin Registration: Invoke `chai.use()` - chai.js:L35-48\" id=\"90441f2e-b541-4170-9701-b69c91cafa5d\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=12;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;\" vertex=\"1\" parent=\"e3eb933b-c619-452d-ba91-b18a3e8e6c21\">\n            <mxGeometry x=\"70\" y=\"200.32340000000005\" width=\"180\" height=\"90\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <UserObject label=\"Plugin Execution: `use` Invokes Plugin - chai.js:L44\" value=\"Plugin Execution: `use` Invokes Plugin - chai.js:L44\" id=\"447c64cb-e6e2-4cff-a64b-8c0460e81904\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=12;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;\" vertex=\"1\" parent=\"e3eb933b-c619-452d-ba91-b18a3e8e6c21\">\n            <mxGeometry x=\"390\" y=\"179.60169795415476\" width=\"180\" height=\"90\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <mxCell id=\"8a3b6945-9d4b-49fc-8bb6-59b29dfc7aa9\" value=\"Data Transmission:&#xa;Plugin Function&#xa;to `use`\" style=\"edgeStyle=orthogonalEdgeStyle;shape=connector;rounded=1;sketch=0;jumpStyle=arc;jumpSize=17;orthogonalLoop=1;jettySize=auto;html=0;shadow=0;labelBackgroundColor=none;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontSize=11;fontColor=#5C5C5C;endArrow=block;endFill=1;endSize=5;sourcePerimeterSpacing=0;targetPerimeterSpacing=0;strokeColor=#A1A1A1;strokeWidth=2;arcSize=50;labelPosition=center;verticalLabelPosition=top;align=center;verticalAlign=bottom;container=1;\" edge=\"1\" parent=\"e3eb933b-c619-452d-ba91-b18a3e8e6c21\" source=\"90441f2e-b541-4170-9701-b69c91cafa5d\" target=\"447c64cb-e6e2-4cff-a64b-8c0460e81904\">\n          <mxGeometry relative=\"1\" as=\"geometry\">\n            <Array as=\"points\">\n              <mxPoint x=\"290\" y=\"245.32340000000005\" />\n              <mxPoint x=\"290\" y=\"224.60169795415476\" />\n            </Array>\n          </mxGeometry>\n        </mxCell>\n        <UserObject label=\"User Action: Customize Chai Configuration - chai.js:L34\" value=\"User Action: Customize Chai Configuration - chai.js:L34\" id=\"34a70d5e-a66a-4f0f-97fc-e07a744b6941\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=12;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;\" vertex=\"1\" parent=\"e3eb933b-c619-452d-ba91-b18a3e8e6c21\">\n            <mxGeometry x=\"70\" y=\"70\" width=\"180\" height=\"90\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <mxCell id=\"1621b7b4-3b93-479a-a77a-a23d3be66442\" value=\"Data Transmission:&#xa;Chai Internals&#xa;to Plugin\" style=\"edgeStyle=orthogonalEdgeStyle;shape=connector;rounded=1;sketch=0;jumpStyle=arc;jumpSize=17;orthogonalLoop=1;jettySize=auto;html=0;shadow=0;labelBackgroundColor=none;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontSize=20;fontColor=#5C5C5C;endArrow=block;endFill=1;endSize=5;sourcePerimeterSpacing=0;targetPerimeterSpacing=0;strokeColor=#A1A1A1;strokeWidth=2;arcSize=50;labelPosition=center;verticalLabelPosition=top;align=center;verticalAlign=bottom;container=1;\" edge=\"1\" parent=\"1f5c4ae6-1ee0-44d5-af43-2b58776742c5\" source=\"447c64cb-e6e2-4cff-a64b-8c0460e81904\" target=\"368b33b2-faaa-4ee1-9226-8a883a702652\">\n          <mxGeometry relative=\"1\" as=\"geometry\">\n            <Array as=\"points\">\n              <mxPoint x=\"7365\" y=\"2591.976678384094\" />\n              <mxPoint x=\"7365\" y=\"2957.7610101917435\" />\n              <mxPoint x=\"120\" y=\"2957.7610101917435\" />\n              <mxPoint x=\"120\" y=\"2619.0256410853153\" />\n              <mxPoint x=\"3650\" y=\"2619.025641085315\" />\n              <mxPoint x=\"3650\" y=\"2205.547358554944\" />\n            </Array>\n          </mxGeometry>\n        </mxCell>\n        <mxCell id=\"500a71c2-7b6b-4d9e-a2d4-4170d7671f48\" value=\"Config: Export&#xa;Configuration Object\" style=\"edgeStyle=orthogonalEdgeStyle;shape=connector;rounded=1;sketch=0;jumpStyle=arc;jumpSize=17;orthogonalLoop=1;jettySize=auto;html=0;shadow=0;labelBackgroundColor=none;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontSize=20;fontColor=#5C5C5C;endArrow=block;endFill=1;endSize=5;sourcePerimeterSpacing=0;targetPerimeterSpacing=0;strokeColor=#A1A1A1;strokeWidth=2;arcSize=50;labelPosition=center;verticalLabelPosition=top;align=center;verticalAlign=bottom;container=1;\" edge=\"1\" parent=\"1f5c4ae6-1ee0-44d5-af43-2b58776742c5\" source=\"7960cb22-e502-47ae-99aa-d8339852ad00\" target=\"34a70d5e-a66a-4f0f-97fc-e07a744b6941\">\n          <mxGeometry relative=\"1\" as=\"geometry\">\n            <Array as=\"points\">\n              <mxPoint x=\"6535\" y=\"2665.571093809337\" />\n              <mxPoint x=\"6535\" y=\"2482.3749804299396\" />\n            </Array>\n          </mxGeometry>\n        </mxCell>\n        <mxCell id=\"0faeee74-7d2d-475e-b7aa-020f11493950\" value=\"State Update:&#xa;Modified Configuration&#xa;Propagates\" style=\"edgeStyle=orthogonalEdgeStyle;shape=connector;rounded=1;sketch=0;jumpStyle=arc;jumpSize=17;orthogonalLoop=1;jettySize=auto;html=0;shadow=0;labelBackgroundColor=none;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontSize=20;fontColor=#5C5C5C;endArrow=block;endFill=1;endSize=5;sourcePerimeterSpacing=0;targetPerimeterSpacing=0;strokeColor=#A1A1A1;strokeWidth=2;arcSize=50;labelPosition=center;verticalLabelPosition=top;align=center;verticalAlign=bottom;container=1;\" edge=\"1\" parent=\"1f5c4ae6-1ee0-44d5-af43-2b58776742c5\" source=\"34a70d5e-a66a-4f0f-97fc-e07a744b6941\" target=\"ac612a19-34b5-44f3-a209-01b54c8f2336\">\n          <mxGeometry relative=\"1\" as=\"geometry\">\n            <Array as=\"points\">\n              <mxPoint x=\"6950\" y=\"2482.3749804299396\" />\n              <mxPoint x=\"6950\" y=\"2493.0426047809406\" />\n              <mxPoint x=\"7375\" y=\"2493.0426047809406\" />\n              <mxPoint x=\"7375\" y=\"3007.7610101917435\" />\n              <mxPoint x=\"110\" y=\"3007.7610101917435\" />\n              <mxPoint x=\"110\" y=\"2490.1236827929624\" />\n              <mxPoint x=\"295\" y=\"2490.1236827929624\" />\n              <mxPoint x=\"295\" y=\"2568.025641085315\" />\n              <mxPoint x=\"3640\" y=\"2568.025641085315\" />\n              <mxPoint x=\"3640\" y=\"2075.547358554944\" />\n            </Array>\n          </mxGeometry>\n        </mxCell>\n        <UserObject label=\"test\" value=\"test\" id=\"a1119216-5cf6-401f-a80f-bd9f6cddc124\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=25;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;align=left;verticalAlign=bottom;spacing=0;spacingTop=-14;spacingLeft=15;arcSize=4;labelPosition=center;verticalLabelPosition=top;;fillColor=#fffefe\" vertex=\"1\" parent=\"1\">\n            <mxGeometry x=\"70\" y=\"1621.0000000000005\" width=\"485\" height=\"640\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <UserObject label=\"assert.js\" value=\"assert.js\" id=\"1edb1e3d-0206-44a1-95bc-f047d3ef21d9\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=22;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;align=left;verticalAlign=bottom;spacing=0;spacingTop=-14;spacingLeft=15;arcSize=4;labelPosition=center;verticalLabelPosition=top;;fillColor=#f9f3f3\" vertex=\"1\" parent=\"a1119216-5cf6-401f-a80f-bd9f6cddc124\">\n            <mxGeometry x=\"70\" y=\"340\" width=\"320\" height=\"230\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <UserObject label=\"User Invokes `assert.deepEqual` - assert.js:L420-422\" value=\"User Invokes `assert.deepEqual` - assert.js:L420-422\" id=\"1ff0ef00-7650-4720-8e55-fe8c4297be0f\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=12;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;\" vertex=\"1\" parent=\"1edb1e3d-0206-44a1-95bc-f047d3ef21d9\">\n            <mxGeometry x=\"70\" y=\"70\" width=\"180\" height=\"90\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <UserObject label=\"expect.js\" value=\"expect.js\" id=\"1799216e-8b13-4638-9ea3-7258f10a4448\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=22;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;align=left;verticalAlign=bottom;spacing=0;spacingTop=-14;spacingLeft=15;arcSize=4;labelPosition=center;verticalLabelPosition=top;;fillColor=#f9f3f3\" vertex=\"1\" parent=\"a1119216-5cf6-401f-a80f-bd9f6cddc124\">\n            <mxGeometry x=\"70\" y=\"70\" width=\"320\" height=\"230\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <UserObject label=\"Property Assertion Flow: Start Assertion with `expect()` - expect.js:L1761\" value=\"Property Assertion Flow: Start Assertion with `expect()` - expect.js:L1761\" id=\"aeb183a9-7b12-49ce-ba93-64b25e9a7d80\">\n          <mxCell style=\"rounded=1;whiteSpace=wrap;html=1;container=1;glass=0;comic=0;fontSize=12;fontColor=#615B5B;strokeWidth=0.7;strokeColor=#999190;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontStyle=0;\" vertex=\"1\" parent=\"1799216e-8b13-4638-9ea3-7258f10a4448\">\n            <mxGeometry x=\"70\" y=\"70\" width=\"180\" height=\"90\" as=\"geometry\" />\n          </mxCell>\n        </UserObject>\n        <mxCell id=\"873db434-a86b-4d1e-b89d-8382ae899428\" value=\"Transmitting Assertion&#xa;Arguments\" style=\"edgeStyle=orthogonalEdgeStyle;shape=connector;rounded=1;sketch=0;jumpStyle=arc;jumpSize=17;orthogonalLoop=1;jettySize=auto;html=0;shadow=0;labelBackgroundColor=none;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontSize=10;fontColor=#5C5C5C;endArrow=block;endFill=1;endSize=5;sourcePerimeterSpacing=0;targetPerimeterSpacing=0;strokeColor=#A1A1A1;strokeWidth=2;arcSize=50;labelPosition=center;verticalLabelPosition=top;align=center;verticalAlign=bottom;container=1;\" edge=\"1\" parent=\"1\" source=\"1ff0ef00-7650-4720-8e55-fe8c4297be0f\" target=\"e835a025-f767-405a-a33a-c0f542b392f7\">\n          <mxGeometry relative=\"1\" as=\"geometry\">\n            <Array as=\"points\" />\n          </mxGeometry>\n        </mxCell>\n        <mxCell id=\"294876f2-5e6d-4265-b46c-31c4e00fe3b4\" value=\"Property Assertion&#xa;Flow: Chain&#xa;Assertion Object\" style=\"edgeStyle=orthogonalEdgeStyle;shape=connector;rounded=1;sketch=0;jumpStyle=arc;jumpSize=17;orthogonalLoop=1;jettySize=auto;html=0;shadow=0;labelBackgroundColor=none;fontFamily=Poppins;fontSource=https%3A%2F%2Ffonts.googleapis.com%2Fcss%3Ffamily%3DPoppins;fontSize=20;fontColor=#5C5C5C;endArrow=block;endFill=1;endSize=5;sourcePerimeterSpacing=0;targetPerimeterSpacing=0;strokeColor=#A1A1A1;strokeWidth=2;arcSize=50;labelPosition=center;verticalLabelPosition=top;align=center;verticalAlign=bottom;container=1;\" edge=\"1\" parent=\"1\" source=\"aeb183a9-7b12-49ce-ba93-64b25e9a7d80\" target=\"21921551-9e0d-4282-9389-af27e5d0114e\">\n          <mxGeometry relative=\"1\" as=\"geometry\">\n            <Array as=\"points\">\n              <mxPoint x=\"620\" y=\"1806.0000000000005\" />\n              <mxPoint x=\"620\" y=\"441.3642542826901\" />\n              <mxPoint x=\"855\" y=\"441.3642542826901\" />\n              <mxPoint x=\"855\" y=\"210.00000000000023\" />\n              <mxPoint x=\"2065\" y=\"210.00000000000023\" />\n              <mxPoint x=\"2065\" y=\"713.0256410853159\" />\n            </Array>\n          </mxGeometry>\n        </mxCell>\n      </root>\n    </mxGraphModel>\n  </diagram>\n</mxfile>\n",
	"fileName": "",
	"fileURL": "github",
	"repoData": {
		"lib": {
			"path": "lib",
			"fileName": "lib",
			"cellName": "lib",
			"cellId": "1f5c4ae6-1ee0-44d5-af43-2b58776742c5",
			"visible": true,
			"children": [
				"lib/chai",
				"lib/chai.js"
			]
		},
		"lib/chai.js": {
			"path": "lib/chai.js",
			"fileName": "chai.js",
			"cellName": "chai.js",
			"cellId": "e3eb933b-c619-452d-ba91-b18a3e8e6c21",
			"visible": true,
			"parentCellId": "1f5c4ae6-1ee0-44d5-af43-2b58776742c5",
			"children": [
				"lib/chai.js-simstep-8b98f977-49ce-48d5-b22a-86378a513572",
				"lib/chai.js-simstep-eb0ac5c7-aa37-4d95-af2b-f0b1a55b11d3",
				"lib/chai.js-simstep-3eb64751-6689-45d7-b71f-7203d9d71d5e"
			]
		},
		"lib/chai": {
			"path": "lib/chai",
			"fileName": "chai",
			"cellName": "chai",
			"cellId": "3b40d2fd-134a-4e51-a482-b1661a48d960",
			"visible": true,
			"parentCellId": "1f5c4ae6-1ee0-44d5-af43-2b58776742c5",
			"children": [
				"lib/chai/interface",
				"lib/chai/core",
				"lib/chai/utils",
				"lib/chai/assertion.js",
				"lib/chai/config.js"
			]
		},
		"lib/chai/assertion.js": {
			"path": "lib/chai/assertion.js",
			"fileName": "assertion.js",
			"cellName": "assertion.js",
			"cellId": "d6094e8b-04ee-4fd8-ba2c-2dcf2209cd63",
			"visible": true,
			"parentCellId": "3b40d2fd-134a-4e51-a482-b1661a48d960",
			"children": [
				"lib/chai/assertion.js-simstep-d8f9e7de-962e-4b46-b53b-3c6fc57a7a3d",
				"lib/chai/assertion.js-simstep-01b6f0f7-8851-47a1-8b07-ecd389092dc5",
				"lib/chai/assertion.js-simstep-ae18b83b-875b-445d-abeb-50324decfa1a",
				"lib/chai/assertion.js-simstep-aa64de71-da77-4554-a657-f7e1b144751a",
				"lib/chai/assertion.js-simstep-b1e6f16e-f82c-4a24-9a4b-aed194145180",
				"lib/chai/assertion.js-simstep-9870feb3-8225-47fd-9c93-d10b98d026d7",
				"lib/chai/assertion.js-simstep-e99f28a4-883f-4312-aa9b-b72b2c04d898",
				"lib/chai/assertion.js-simstep-98676212-6869-431d-b44e-7153e6a408cc",
				"lib/chai/assertion.js-simstep-73c3b54f-965e-47c4-a537-f04e5c978305",
				"lib/chai/assertion.js-simstep-21b1d00d-8dd5-4edd-b619-674d4d947f6c",
				"lib/chai/assertion.js-simstep-9b790ebe-a0d9-402a-b578-afb3a141bf29",
				"lib/chai/assertion.js-simstep-1cd9a38f-377c-471b-a498-826b8fe7af3e",
				"lib/chai/assertion.js-simstep-0c16e099-0844-4e09-85c6-61500c93bffa",
				"lib/chai/assertion.js-simstep-bd045f3b-60a4-474b-a89c-b03fbaf0fcc9",
				"lib/chai/assertion.js-simstep-0577ff22-519e-44bb-b234-0e0a28a9f1db",
				"lib/chai/assertion.js-simstep-81b87a51-1503-4308-b64b-74f2eaa90bf3",
				"lib/chai/assertion.js-simstep-6fed5695-b1b1-4c70-b0c2-dc0dd21381ed",
				"lib/chai/assertion.js-simstep-969abbd0-74ba-47c5-9031-fb69889c56be"
			]
		},
		"lib/chai/config.js": {
			"path": "lib/chai/config.js",
			"fileName": "config.js",
			"cellName": "config.js",
			"cellId": "93fdacaf-e207-4251-9e75-cc6f45f586a2",
			"visible": true,
			"parentCellId": "3b40d2fd-134a-4e51-a482-b1661a48d960",
			"children": [
				"lib/chai/config.js-simstep-b0ad61f5-b704-4f1a-b498-a60db2195f2a"
			]
		},
		"lib/chai/core": {
			"path": "lib/chai/core",
			"fileName": "core",
			"cellName": "core",
			"cellId": "70f0d932-23c0-40f2-b1ae-7a592a892276",
			"visible": true,
			"parentCellId": "3b40d2fd-134a-4e51-a482-b1661a48d960",
			"children": [
				"lib/chai/core/assertions.js"
			]
		},
		"lib/chai/core/assertions.js": {
			"path": "lib/chai/core/assertions.js",
			"fileName": "assertions.js",
			"cellName": "assertions.js",
			"cellId": "cb2d632b-b1e7-41e2-8642-977653392c81",
			"visible": true,
			"parentCellId": "70f0d932-23c0-40f2-b1ae-7a592a892276",
			"children": [
				"lib/chai/core/assertions.js-simstep-0ded55ff-7ad5-41e9-aeba-b55a1dc27961",
				"lib/chai/core/assertions.js-simstep-6befc5d9-1a5d-4e39-b0d6-e5c6dfb1302f",
				"lib/chai/core/assertions.js-simstep-18f82911-1e52-49ae-843f-5675d5cbc1ad",
				"lib/chai/core/assertions.js-simstep-95a68fa3-8b62-4ba9-ab86-83b614b68d43",
				"lib/chai/core/assertions.js-simstep-4b9fbed0-f3c8-4802-8efa-3361f71fda4d",
				"lib/chai/core/assertions.js-simstep-1a394d13-0086-4c4d-b853-c0dcc32a6c4a",
				"lib/chai/core/assertions.js-simstep-217b5149-3ea4-4940-8139-454ee1ca8997",
				"lib/chai/core/assertions.js-simstep-0ef6d789-f28a-461c-af3a-397cda0df6c0",
				"lib/chai/core/assertions.js-simstep-0c66b723-e954-45a4-9bff-654a9ae5d898",
				"lib/chai/core/assertions.js-simstep-83534e6d-9a92-477c-a4d1-22454ac97df5",
				"lib/chai/core/assertions.js-simstep-9e76524f-243c-4912-9e3b-9edfef97cb41",
				"lib/chai/core/assertions.js-simstep-99ab9e7b-2050-4310-853b-5668c613a660",
				"lib/chai/core/assertions.js-simstep-64369f59-020e-4bb8-ac7a-c747618aadd4",
				"lib/chai/core/assertions.js-simstep-f9ac5136-9a58-4213-bd61-88563d93e56d",
				"lib/chai/core/assertions.js-simstep-fdcb8440-3208-4a45-a16d-7627b454a604",
				"lib/chai/core/assertions.js-simstep-82ec3d5c-525b-45d8-b031-689545566b02",
				"lib/chai/core/assertions.js-simstep-9d7a6f18-acf6-4d81-bbb5-1fa24e9ba738",
				"lib/chai/core/assertions.js-simstep-ffd81900-4008-4a58-9dce-7234a88a5806",
				"lib/chai/core/assertions.js-simstep-207dd1d1-9c91-469f-a2c3-df6b75e228c0",
				"lib/chai/core/assertions.js-simstep-672dc4b9-7e13-4359-a66c-d5f1f870d184",
				"lib/chai/core/assertions.js-simstep-9f36bb1a-c41c-4b43-8d3f-6308d788fdb0",
				"lib/chai/core/assertions.js-simstep-ee854269-5b2d-4d59-a901-c6adae36606e",
				"lib/chai/core/assertions.js-simstep-abd6c2e9-0410-4f60-aa65-ae91e5f8608b",
				"lib/chai/core/assertions.js-simstep-b490ed32-3851-4515-9583-e1f59a78b99e",
				"lib/chai/core/assertions.js-simstep-07078074-9216-43ba-b37a-c50abb096f98",
				"lib/chai/core/assertions.js-simstep-880afa8e-d530-474a-b77d-25f76dae4c20",
				"lib/chai/core/assertions.js-simstep-d4c4d6ee-ef26-4698-bd8f-9970a2ea15de",
				"lib/chai/core/assertions.js-simstep-9d0b52b3-5f2d-4216-ba5e-b6e80f3aa801",
				"lib/chai/core/assertions.js-simstep-8f6cf4f0-5cfc-4950-b515-9d177c36eb64",
				"lib/chai/core/assertions.js-simstep-53e9a83c-fd5c-4904-ac31-42976bc36617"
			]
		},
		"lib/chai/interface": {
			"path": "lib/chai/interface",
			"fileName": "interface",
			"cellName": "interface",
			"cellId": "da5ad0fd-2820-4a06-a046-1943ee671a0f",
			"visible": true,
			"parentCellId": "3b40d2fd-134a-4e51-a482-b1661a48d960",
			"children": [
				"lib/chai/interface/expect.js",
				"lib/chai/interface/assert.js",
				"lib/chai/interface/should.js"
			]
		},
		"lib/chai/interface/assert.js": {
			"path": "lib/chai/interface/assert.js",
			"fileName": "assert.js",
			"cellName": "assert.js",
			"cellId": "1ddd4839-b3e2-43af-8b5e-9b585c757bb7",
			"visible": true,
			"parentCellId": "da5ad0fd-2820-4a06-a046-1943ee671a0f",
			"children": [
				"lib/chai/interface/assert.js-simstep-c2ab5700-b28e-47da-b48e-64702ccbfc6c",
				"lib/chai/interface/assert.js-simstep-a52400a4-a4c6-4519-b969-bc376e992511",
				"lib/chai/interface/assert.js-simstep-ef2a8e1a-5e6e-45c9-b04a-985fa1c48b52",
				"lib/chai/interface/assert.js-simstep-520ae158-b4c5-4849-9966-b6286f224dd1",
				"lib/chai/interface/assert.js-simstep-9b37ec8b-ac85-4dfa-ae56-fba8c09fbd46",
				"lib/chai/interface/assert.js-simstep-75f3e294-cb8a-4f90-b0f0-f7afffcf88bd",
				"lib/chai/interface/assert.js-simstep-288bceb1-84ea-43f8-9be0-81b6da69a036"
			]
		},
		"lib/chai/interface/expect.js": {
			"path": "lib/chai/interface/expect.js",
			"fileName": "expect.js",
			"cellName": "expect.js",
			"cellId": "d029c765-a63a-4466-991a-3ca0ac663ea4",
			"visible": true,
			"parentCellId": "da5ad0fd-2820-4a06-a046-1943ee671a0f",
			"children": [
				"lib/chai/interface/expect.js-simstep-ffbf2b31-d402-4666-a860-80eef02213b8",
				"lib/chai/interface/expect.js-simstep-2d29b02e-fb70-46a9-b0f4-5adebf7bdbb2"
			]
		},
		"lib/chai/interface/should.js": {
			"path": "lib/chai/interface/should.js",
			"fileName": "should.js",
			"cellName": "should.js",
			"cellId": "66baa147-b9dc-4dfa-a269-bef39a73c529",
			"visible": true,
			"parentCellId": "da5ad0fd-2820-4a06-a046-1943ee671a0f",
			"children": [
				"lib/chai/interface/should.js-simstep-acf99cce-daff-4078-a332-e2600bb3824e",
				"lib/chai/interface/should.js-simstep-442c0d21-f8f0-4d4e-aba9-bf042cb1ab8a",
				"lib/chai/interface/should.js-simstep-b13560a9-f13f-46b2-bd81-a11b3521e58f",
				"lib/chai/interface/should.js-simstep-f9e7b88f-8956-4e45-838d-77484d39b33b"
			]
		},
		"lib/chai/utils": {
			"path": "lib/chai/utils",
			"fileName": "utils",
			"cellName": "utils",
			"cellId": "365dcd1f-e369-4e23-b3b7-84fb25a3fa18",
			"visible": true,
			"parentCellId": "3b40d2fd-134a-4e51-a482-b1661a48d960",
			"children": [
				"lib/chai/utils/addProperty.js",
				"lib/chai/utils/flag.js",
				"lib/chai/utils/addMethod.js",
				"lib/chai/utils/objDisplay.js"
			]
		},
		"lib/chai/utils/addMethod.js": {
			"path": "lib/chai/utils/addMethod.js",
			"fileName": "addMethod.js",
			"cellName": "addMethod.js",
			"cellId": "aca4b2ac-87ec-4d9e-b750-f0d056ff758f",
			"visible": true,
			"parentCellId": "365dcd1f-e369-4e23-b3b7-84fb25a3fa18",
			"children": [
				"lib/chai/utils/addMethod.js-simstep-c4a5e2d9-488a-4a05-933b-8986b9c4575f"
			]
		},
		"lib/chai/utils/addProperty.js": {
			"path": "lib/chai/utils/addProperty.js",
			"fileName": "addProperty.js",
			"cellName": "addProperty.js",
			"cellId": "c192a443-274d-45d6-acca-463e2a0eb9a6",
			"visible": true,
			"parentCellId": "365dcd1f-e369-4e23-b3b7-84fb25a3fa18",
			"children": [
				"lib/chai/utils/addProperty.js-simstep-ea57401a-7532-4c9d-8c72-fed963ad0de5",
				"lib/chai/utils/addProperty.js-simstep-6423490d-72d3-487f-b300-7c8847781040",
				"lib/chai/utils/addProperty.js-simstep-f2ca94bb-ebb0-496f-bfac-4194fddabdef",
				"lib/chai/utils/addProperty.js-simstep-61f56926-7e65-46f7-8886-0267f2dc1da5",
				"lib/chai/utils/addProperty.js-simstep-25bea7dc-f163-4a24-9dc5-8a7adab3e5e3"
			]
		},
		"lib/chai/utils/flag.js": {
			"path": "lib/chai/utils/flag.js",
			"fileName": "flag.js",
			"cellName": "flag.js",
			"cellId": "8516dde4-fdc7-49cf-90a5-5abb0588348e",
			"visible": true,
			"parentCellId": "365dcd1f-e369-4e23-b3b7-84fb25a3fa18"
		},
		"lib/chai/utils/objDisplay.js": {
			"path": "lib/chai/utils/objDisplay.js",
			"fileName": "objDisplay.js",
			"cellName": "objDisplay.js",
			"cellId": "024e93d1-f1b8-417a-a584-01b228b125fa",
			"visible": true,
			"parentCellId": "365dcd1f-e369-4e23-b3b7-84fb25a3fa18",
			"children": [
				"lib/chai/utils/objDisplay.js-simstep-bff42bea-6d33-4fac-9f5b-118e65dcb673"
			]
		},
		"test": {
			"path": "test",
			"fileName": "test",
			"cellName": "test",
			"cellId": "a1119216-5cf6-401f-a80f-bd9f6cddc124",
			"visible": true,
			"children": [
				"test/assert.js",
				"test/expect.js"
			]
		},
		"test/assert.js": {
			"path": "test/assert.js",
			"fileName": "assert.js",
			"cellName": "assert.js",
			"cellId": "1edb1e3d-0206-44a1-95bc-f047d3ef21d9",
			"visible": true,
			"parentCellId": "a1119216-5cf6-401f-a80f-bd9f6cddc124",
			"children": [
				"test/assert.js-simstep-50e26f9d-f638-4309-9221-1627533d9fd5"
			]
		},
		"test/expect.js": {
			"path": "test/expect.js",
			"fileName": "expect.js",
			"cellName": "expect.js",
			"cellId": "1799216e-8b13-4638-9ea3-7258f10a4448",
			"visible": true,
			"parentCellId": "a1119216-5cf6-401f-a80f-bd9f6cddc124",
			"children": [
				"test/expect.js-simstep-746137a6-3544-4c70-bc76-88636ec01d1f"
			]
		},
		"1f5c4ae6-1ee0-44d5-af43-2b58776742c5": {
			"path": "1f5c4ae6-1ee0-44d5-af43-2b58776742c5",
			"cellName": "lib",
			"cellId": "1f5c4ae6-1ee0-44d5-af43-2b58776742c5",
			"visible": true
		},
		"3b40d2fd-134a-4e51-a482-b1661a48d960": {
			"path": "3b40d2fd-134a-4e51-a482-b1661a48d960",
			"cellName": "chai",
			"cellId": "3b40d2fd-134a-4e51-a482-b1661a48d960",
			"visible": true,
			"parentCellId": "1f5c4ae6-1ee0-44d5-af43-2b58776742c5"
		},
		"da5ad0fd-2820-4a06-a046-1943ee671a0f": {
			"path": "da5ad0fd-2820-4a06-a046-1943ee671a0f",
			"cellName": "interface",
			"cellId": "da5ad0fd-2820-4a06-a046-1943ee671a0f",
			"visible": true,
			"parentCellId": "3b40d2fd-134a-4e51-a482-b1661a48d960"
		},
		"70f0d932-23c0-40f2-b1ae-7a592a892276": {
			"path": "70f0d932-23c0-40f2-b1ae-7a592a892276",
			"cellName": "core",
			"cellId": "70f0d932-23c0-40f2-b1ae-7a592a892276",
			"visible": true,
			"parentCellId": "3b40d2fd-134a-4e51-a482-b1661a48d960"
		},
		"365dcd1f-e369-4e23-b3b7-84fb25a3fa18": {
			"path": "365dcd1f-e369-4e23-b3b7-84fb25a3fa18",
			"cellName": "utils",
			"cellId": "365dcd1f-e369-4e23-b3b7-84fb25a3fa18",
			"visible": true,
			"parentCellId": "3b40d2fd-134a-4e51-a482-b1661a48d960"
		},
		"d6094e8b-04ee-4fd8-ba2c-2dcf2209cd63": {
			"path": "d6094e8b-04ee-4fd8-ba2c-2dcf2209cd63",
			"cellName": "assertion.js",
			"cellId": "d6094e8b-04ee-4fd8-ba2c-2dcf2209cd63",
			"visible": true,
			"parentCellId": "3b40d2fd-134a-4e51-a482-b1661a48d960"
		},
		"d029c765-a63a-4466-991a-3ca0ac663ea4": {
			"path": "d029c765-a63a-4466-991a-3ca0ac663ea4",
			"cellName": "expect.js",
			"cellId": "d029c765-a63a-4466-991a-3ca0ac663ea4",
			"visible": true,
			"parentCellId": "da5ad0fd-2820-4a06-a046-1943ee671a0f"
		},
		"cb2d632b-b1e7-41e2-8642-977653392c81": {
			"path": "cb2d632b-b1e7-41e2-8642-977653392c81",
			"cellName": "assertions.js",
			"cellId": "cb2d632b-b1e7-41e2-8642-977653392c81",
			"visible": true,
			"parentCellId": "70f0d932-23c0-40f2-b1ae-7a592a892276"
		},
		"c192a443-274d-45d6-acca-463e2a0eb9a6": {
			"path": "c192a443-274d-45d6-acca-463e2a0eb9a6",
			"cellName": "addProperty.js",
			"cellId": "c192a443-274d-45d6-acca-463e2a0eb9a6",
			"visible": true,
			"parentCellId": "365dcd1f-e369-4e23-b3b7-84fb25a3fa18"
		},
		"3d7b6b57-5884-429f-9697-7b237b43fc8e": {
			"path": "3d7b6b57-5884-429f-9697-7b237b43fc8e",
			"cellName": "Start: expect() - expect.js:L15-17",
			"cellId": "3d7b6b57-5884-429f-9697-7b237b43fc8e",
			"visible": true,
			"parentCellId": "d029c765-a63a-4466-991a-3ca0ac663ea4"
		},
		"lib/chai/interface/expect.js-simstep-ffbf2b31-d402-4666-a860-80eef02213b8": {
			"path": "lib/chai/interface/expect.js-simstep-ffbf2b31-d402-4666-a860-80eef02213b8",
			"fileName": "expect.js",
			"wiki": "The test initiates a BDD-style assertion by calling `expect()` with the value to be tested. This function creates and returns a new `Assertion` object, which holds the target value and other flags for the subsequent chain.",
			"cellName": "Start: expect() - expect.js:L15-17",
			"cellId": "3d7b6b57-5884-429f-9697-7b237b43fc8e",
			"visible": true,
			"startLine": 15,
			"endLine": 17,
			"parentCellId": "d029c765-a63a-4466-991a-3ca0ac663ea4",
			"parentPath": "lib/chai/interface/expect.js"
		},
		"9a018c67-2789-4a30-99bb-21f2cbb1086a": {
			"path": "9a018c67-2789-4a30-99bb-21f2cbb1086a",
			"cellName": "Language Chain: .to - assertions.js:L61-63",
			"cellId": "9a018c67-2789-4a30-99bb-21f2cbb1086a",
			"visible": true,
			"parentCellId": "cb2d632b-b1e7-41e2-8642-977653392c81"
		},
		"lib/chai/core/assertions.js-simstep-0ded55ff-7ad5-41e9-aeba-b55a1dc27961": {
			"path": "lib/chai/core/assertions.js-simstep-0ded55ff-7ad5-41e9-aeba-b55a1dc27961",
			"fileName": "assertions.js",
			"wiki": "The `.to` property is accessed on the `Assertion` object. This is a language chain getter that doesn't perform any logic. It simply returns the same `Assertion` instance to allow for further chaining and to create a more readable, sentence-like assertion.",
			"cellName": "Language Chain: .to - assertions.js:L61-63",
			"cellId": "9a018c67-2789-4a30-99bb-21f2cbb1086a",
			"visible": true,
			"startLine": 61,
			"endLine": 63,
			"parentCellId": "cb2d632b-b1e7-41e2-8642-977653392c81",
			"parentPath": "lib/chai/core/assertions.js"
		},
		"98fe157b-c465-40e7-9879-af8abb572a33": {
			"path": "98fe157b-c465-40e7-9879-af8abb572a33",
			"cellName": "Language Chain: .be - assertions.js:L61-63",
			"cellId": "98fe157b-c465-40e7-9879-af8abb572a33",
			"visible": true,
			"parentCellId": "cb2d632b-b1e7-41e2-8642-977653392c81"
		},
		"lib/chai/core/assertions.js-simstep-6befc5d9-1a5d-4e39-b0d6-e5c6dfb1302f": {
			"path": "lib/chai/core/assertions.js-simstep-6befc5d9-1a5d-4e39-b0d6-e5c6dfb1302f",
			"fileName": "assertions.js",
			"wiki": "Similar to `.to`, the `.be` property is another language chain. It returns the `Assertion` instance, contributing to the BDD syntax's readability without performing any checks.",
			"cellName": "Language Chain: .be - assertions.js:L61-63",
			"cellId": "98fe157b-c465-40e7-9879-af8abb572a33",
			"visible": true,
			"startLine": 61,
			"endLine": 63,
			"parentCellId": "cb2d632b-b1e7-41e2-8642-977653392c81",
			"parentPath": "lib/chai/core/assertions.js"
		},
		"6c3832b1-0a35-45e0-9be8-2287555beaad": {
			"path": "6c3832b1-0a35-45e0-9be8-2287555beaad",
			"cellName": "Assertion Call: .a() - assertions.js:L324-353",
			"cellId": "6c3832b1-0a35-45e0-9be8-2287555beaad",
			"visible": true,
			"parentCellId": "cb2d632b-b1e7-41e2-8642-977653392c81"
		},
		"lib/chai/core/assertions.js-simstep-18f82911-1e52-49ae-843f-5675d5cbc1ad": {
			"path": "lib/chai/core/assertions.js-simstep-18f82911-1e52-49ae-843f-5675d5cbc1ad",
			"fileName": "assertions.js",
			"wiki": "The `.a('string')` method is called. This function (aliased from `an`) checks the type of the target object (42) against the expected type ('string'). The type detection identifies the target as a 'number', so the comparison fails.",
			"cellName": "Assertion Call: .a() - assertions.js:L324-353",
			"cellId": "6c3832b1-0a35-45e0-9be8-2287555beaad",
			"visible": true,
			"startLine": 324,
			"endLine": 353,
			"parentCellId": "cb2d632b-b1e7-41e2-8642-977653392c81",
			"parentPath": "lib/chai/core/assertions.js"
		},
		"76d13f4d-2e39-4075-8e09-1a5dfd58eb75": {
			"path": "76d13f4d-2e39-4075-8e09-1a5dfd58eb75",
			"cellName": "Execute Assertion and Prepare Error - assertion.js:L157-185",
			"cellId": "76d13f4d-2e39-4075-8e09-1a5dfd58eb75",
			"visible": true,
			"parentCellId": "d6094e8b-04ee-4fd8-ba2c-2dcf2209cd63"
		},
		"lib/chai/assertion.js-simstep-d8f9e7de-962e-4b46-b53b-3c6fc57a7a3d": {
			"path": "lib/chai/assertion.js-simstep-d8f9e7de-962e-4b46-b53b-3c6fc57a7a3d",
			"fileName": "assertion.js",
			"wiki": "The `assert` method on the `Assertion` prototype receives the failing expression. Since the check fails (`!ok` is true), it proceeds to construct an `AssertionError`. It gathers the actual value (42), expected value ('string'), and formats the error message.",
			"cellName": "Execute Assertion and Prepare Error - assertion.js:L157-185",
			"cellId": "76d13f4d-2e39-4075-8e09-1a5dfd58eb75",
			"visible": true,
			"startLine": 157,
			"endLine": 185,
			"parentCellId": "d6094e8b-04ee-4fd8-ba2c-2dcf2209cd63",
			"parentPath": "lib/chai/assertion.js"
		},
		"626f7856-8bdf-4df3-bf89-f68eedf5585e": {
			"path": "626f7856-8bdf-4df3-bf89-f68eedf5585e",
			"cellName": "Throw AssertionError - assertion.js:L178-184",
			"cellId": "626f7856-8bdf-4df3-bf89-f68eedf5585e",
			"visible": true,
			"parentCellId": "d6094e8b-04ee-4fd8-ba2c-2dcf2209cd63"
		},
		"lib/chai/assertion.js-simstep-01b6f0f7-8851-47a1-8b07-ecd389092dc5": {
			"path": "lib/chai/assertion.js-simstep-01b6f0f7-8851-47a1-8b07-ecd389092dc5",
			"fileName": "assertion.js",
			"wiki": "The newly created `AssertionError` is thrown, which causes the test to fail. The test runner (e.g., Mocha) will catch this error and report the test failure with the detailed message.",
			"cellName": "Throw AssertionError - assertion.js:L178-184",
			"cellId": "626f7856-8bdf-4df3-bf89-f68eedf5585e",
			"visible": true,
			"startLine": 178,
			"endLine": 184,
			"parentCellId": "d6094e8b-04ee-4fd8-ba2c-2dcf2209cd63",
			"parentPath": "lib/chai/assertion.js"
		},
		"99c7836f-37a1-4e37-a2bc-de0a6ccfcb2a": {
			"path": "99c7836f-37a1-4e37-a2bc-de0a6ccfcb2a",
			"cellName": "Return Assertion\nObject",
			"cellId": "99c7836f-37a1-4e37-a2bc-de0a6ccfcb2a",
			"visible": true,
			"parentCellId": "3b40d2fd-134a-4e51-a482-b1661a48d960"
		},
		"generated-edge-simstep-b31c7d39-49be-4587-b49d-4f5e56f817a7-99c7836f-37a1-4e37-a2bc-de0a6ccfcb2a": {
			"path": "generated-edge-simstep-b31c7d39-49be-4587-b49d-4f5e56f817a7-99c7836f-37a1-4e37-a2bc-de0a6ccfcb2a",
			"fileName": "expect.js",
			"cellName": "Return Assertion Object",
			"cellId": "99c7836f-37a1-4e37-a2bc-de0a6ccfcb2a",
			"visible": true,
			"startLine": 16,
			"endLine": 16,
			"parentPath": "lib/chai/interface/expect.js"
		},
		"f0466bf2-9593-4717-8b9e-75f4189007be": {
			"path": "f0466bf2-9593-4717-8b9e-75f4189007be",
			"cellName": "Chain Assertion\nObject",
			"cellId": "f0466bf2-9593-4717-8b9e-75f4189007be",
			"visible": true,
			"parentCellId": "cb2d632b-b1e7-41e2-8642-977653392c81"
		},
		"generated-edge-simstep-bbb4e818-7b45-4b41-98a3-dc39c7bca5a8-f0466bf2-9593-4717-8b9e-75f4189007be": {
			"path": "generated-edge-simstep-bbb4e818-7b45-4b41-98a3-dc39c7bca5a8-f0466bf2-9593-4717-8b9e-75f4189007be",
			"fileName": "assertions.js",
			"cellName": "Chain Assertion Object",
			"cellId": "f0466bf2-9593-4717-8b9e-75f4189007be",
			"visible": true,
			"startLine": 67,
			"endLine": 67,
			"parentPath": "lib/chai/core/assertions.js"
		},
		"c1f07aac-5242-4cdd-baad-33459f5ec2c4": {
			"path": "c1f07aac-5242-4cdd-baad-33459f5ec2c4",
			"cellName": "Chain Assertion\nObject",
			"cellId": "c1f07aac-5242-4cdd-baad-33459f5ec2c4",
			"visible": true,
			"parentCellId": "cb2d632b-b1e7-41e2-8642-977653392c81"
		},
		"generated-edge-simstep-2d3eac35-a4f4-4e3a-8972-b34f2d7ee4fc-c1f07aac-5242-4cdd-baad-33459f5ec2c4": {
			"path": "generated-edge-simstep-2d3eac35-a4f4-4e3a-8972-b34f2d7ee4fc-c1f07aac-5242-4cdd-baad-33459f5ec2c4",
			"fileName": "assertions.js",
			"cellName": "Chain Assertion Object",
			"cellId": "c1f07aac-5242-4cdd-baad-33459f5ec2c4",
			"visible": true,
			"startLine": 67,
			"endLine": 67,
			"parentPath": "lib/chai/core/assertions.js"
		},
		"d8e3fd59-b0f1-455f-b2e8-2ae686a91ed1": {
			"path": "d8e3fd59-b0f1-455f-b2e8-2ae686a91ed1",
			"cellName": "Internal Assertion\nCall",
			"cellId": "d8e3fd59-b0f1-455f-b2e8-2ae686a91ed1",
			"visible": true,
			"parentCellId": "3b40d2fd-134a-4e51-a482-b1661a48d960"
		},
		"generated-edge-simstep-712fbda5-68ef-43a1-93c2-7c03e8567d44-d8e3fd59-b0f1-455f-b2e8-2ae686a91ed1": {
			"path": "generated-edge-simstep-712fbda5-68ef-43a1-93c2-7c03e8567d44-d8e3fd59-b0f1-455f-b2e8-2ae686a91ed1",
			"fileName": "assertions.js",
			"cellName": "Internal Assertion Call",
			"cellId": "d8e3fd59-b0f1-455f-b2e8-2ae686a91ed1",
			"visible": true,
			"startLine": 347,
			"endLine": 352,
			"parentPath": "lib/chai/core/assertions.js"
		},
		"016a9626-27a3-4671-91d4-ced879f9b94f": {
			"path": "016a9626-27a3-4671-91d4-ced879f9b94f",
			"cellName": "Transmit Error\nDetails",
			"cellId": "016a9626-27a3-4671-91d4-ced879f9b94f",
			"visible": true,
			"parentCellId": "d6094e8b-04ee-4fd8-ba2c-2dcf2209cd63"
		},
		"generated-edge-simstep-dcb95fcf-a6d8-4531-bf5e-ad9aa369ec83-016a9626-27a3-4671-91d4-ced879f9b94f": {
			"path": "generated-edge-simstep-dcb95fcf-a6d8-4531-bf5e-ad9aa369ec83-016a9626-27a3-4671-91d4-ced879f9b94f",
			"fileName": "assertion.js",
			"cellName": "Transmit Error Details",
			"cellId": "016a9626-27a3-4671-91d4-ced879f9b94f",
			"visible": true,
			"startLine": 178,
			"endLine": 184,
			"parentPath": "lib/chai/assertion.js"
		},
		"a1119216-5cf6-401f-a80f-bd9f6cddc124": {
			"path": "a1119216-5cf6-401f-a80f-bd9f6cddc124",
			"cellName": "test",
			"cellId": "a1119216-5cf6-401f-a80f-bd9f6cddc124",
			"visible": true
		},
		"1edb1e3d-0206-44a1-95bc-f047d3ef21d9": {
			"path": "1edb1e3d-0206-44a1-95bc-f047d3ef21d9",
			"cellName": "assert.js",
			"cellId": "1edb1e3d-0206-44a1-95bc-f047d3ef21d9",
			"visible": true,
			"parentCellId": "a1119216-5cf6-401f-a80f-bd9f6cddc124"
		},
		"1ddd4839-b3e2-43af-8b5e-9b585c757bb7": {
			"path": "1ddd4839-b3e2-43af-8b5e-9b585c757bb7",
			"cellName": "assert.js",
			"cellId": "1ddd4839-b3e2-43af-8b5e-9b585c757bb7",
			"visible": true,
			"parentCellId": "da5ad0fd-2820-4a06-a046-1943ee671a0f"
		},
		"1ff0ef00-7650-4720-8e55-fe8c4297be0f": {
			"path": "1ff0ef00-7650-4720-8e55-fe8c4297be0f",
			"cellName": "User Invokes `assert.deepEqual` - assert.js:L420-422",
			"cellId": "1ff0ef00-7650-4720-8e55-fe8c4297be0f",
			"visible": true,
			"parentCellId": "1edb1e3d-0206-44a1-95bc-f047d3ef21d9"
		},
		"test/assert.js-simstep-50e26f9d-f638-4309-9221-1627533d9fd5": {
			"path": "test/assert.js-simstep-50e26f9d-f638-4309-9221-1627533d9fd5",
			"fileName": "assert.js",
			"wiki": "A developer writes a test case to assert that two objects are deeply equal. In this example, the assertion is expected to fail because the 'tea' properties have different values.",
			"cellName": "User Invokes `assert.deepEqual` - assert.js:L420-422",
			"cellId": "1ff0ef00-7650-4720-8e55-fe8c4297be0f",
			"visible": true,
			"startLine": 420,
			"endLine": 422,
			"parentCellId": "1edb1e3d-0206-44a1-95bc-f047d3ef21d9",
			"parentPath": "test/assert.js"
		},
		"e835a025-f767-405a-a33a-c0f542b392f7": {
			"path": "e835a025-f767-405a-a33a-c0f542b392f7",
			"cellName": "Creating an Assertion Object - assert.js:L220",
			"cellId": "e835a025-f767-405a-a33a-c0f542b392f7",
			"visible": true,
			"parentCellId": "1ddd4839-b3e2-43af-8b5e-9b585c757bb7"
		},
		"lib/chai/interface/assert.js-simstep-c2ab5700-b28e-47da-b48e-64702ccbfc6c": {
			"path": "lib/chai/interface/assert.js-simstep-c2ab5700-b28e-47da-b48e-64702ccbfc6c",
			"fileName": "assert.js",
			"wiki": "Inside `assert.deepEqual`, a new `Assertion` object is instantiated. This object holds the `actual` value (`act`) and other metadata (flags) for the assertion chain. The BDD-style `.to.eql(exp)` method is then immediately called on this new object to perform the comparison.",
			"cellName": "Creating an Assertion Object - assert.js:L220",
			"cellId": "e835a025-f767-405a-a33a-c0f542b392f7",
			"visible": true,
			"startLine": 220,
			"endLine": 220,
			"parentCellId": "1ddd4839-b3e2-43af-8b5e-9b585c757bb7",
			"parentPath": "lib/chai/interface/assert.js"
		},
		"7e1b33fe-16d9-4d47-9794-0dd9f3d99673": {
			"path": "7e1b33fe-16d9-4d47-9794-0dd9f3d99673",
			"cellName": "Performing Deep Equality Check - assertions.js:L1190-1196",
			"cellId": "7e1b33fe-16d9-4d47-9794-0dd9f3d99673",
			"visible": true,
			"parentCellId": "cb2d632b-b1e7-41e2-8642-977653392c81"
		},
		"lib/chai/core/assertions.js-simstep-95a68fa3-8b62-4ba9-ab86-83b614b68d43": {
			"path": "lib/chai/core/assertions.js-simstep-95a68fa3-8b62-4ba9-ab86-83b614b68d43",
			"fileName": "assertions.js",
			"wiki": "The `assertEql` function (the implementation for `.eql`) retrieves the deep equality function from the `deep-eql` utility. It then compares the `actual` object (stored in the assertion's flags) with the `expected` object. In this case, the comparison returns `false`.",
			"cellName": "Performing Deep Equality Check - assertions.js:L1190-1196",
			"cellId": "7e1b33fe-16d9-4d47-9794-0dd9f3d99673",
			"visible": true,
			"startLine": 1190,
			"endLine": 1196,
			"parentCellId": "cb2d632b-b1e7-41e2-8642-977653392c81",
			"parentPath": "lib/chai/core/assertions.js"
		},
		"7edfbeb5-0c32-424f-8365-128c3ca419ab": {
			"path": "7edfbeb5-0c32-424f-8365-128c3ca419ab",
			"cellName": "Evaluating Assertion and Preparing Error - assertion.js:L163-164",
			"cellId": "7edfbeb5-0c32-424f-8365-128c3ca419ab",
			"visible": true,
			"parentCellId": "d6094e8b-04ee-4fd8-ba2c-2dcf2209cd63"
		},
		"lib/chai/assertion.js-simstep-ae18b83b-875b-445d-abeb-50324decfa1a": {
			"path": "lib/chai/assertion.js-simstep-ae18b83b-875b-445d-abeb-50324decfa1a",
			"fileName": "assertion.js",
			"wiki": "The core `assert` method receives the `false` comparison result. Since the check failed (`!ok`), it proceeds to generate a detailed error message. It uses `util.getMessage` to replace template placeholders like `#{this}` and `#{exp}` with inspected string representations of the actual and expected values.",
			"cellName": "Evaluating Assertion and Preparing Error - assertion.js:L163-164",
			"cellId": "7edfbeb5-0c32-424f-8365-128c3ca419ab",
			"visible": true,
			"startLine": 163,
			"endLine": 164,
			"parentCellId": "d6094e8b-04ee-4fd8-ba2c-2dcf2209cd63",
			"parentPath": "lib/chai/assertion.js"
		},
		"f1c5ff6e-d843-410e-9e49-51660521e9d1": {
			"path": "f1c5ff6e-d843-410e-9e49-51660521e9d1",
			"cellName": "Throwing the `AssertionError` - assertion.js:L181-186",
			"cellId": "f1c5ff6e-d843-410e-9e49-51660521e9d1",
			"visible": true,
			"parentCellId": "d6094e8b-04ee-4fd8-ba2c-2dcf2209cd63"
		},
		"lib/chai/assertion.js-simstep-aa64de71-da77-4554-a657-f7e1b144751a": {
			"path": "lib/chai/assertion.js-simstep-aa64de71-da77-4554-a657-f7e1b144751a",
			"fileName": "assertion.js",
			"wiki": "A new `AssertionError` is instantiated with all the relevant details. This error object is then thrown, causing the test to fail. The test runner catches this error and reports the failure to the user, displaying the detailed message and diff if configured.",
			"cellName": "Throwing the `AssertionError` - assertion.js:L181-186",
			"cellId": "f1c5ff6e-d843-410e-9e49-51660521e9d1",
			"visible": true,
			"startLine": 181,
			"endLine": 186,
			"parentCellId": "d6094e8b-04ee-4fd8-ba2c-2dcf2209cd63",
			"parentPath": "lib/chai/assertion.js"
		},
		"873db434-a86b-4d1e-b89d-8382ae899428": {
			"path": "873db434-a86b-4d1e-b89d-8382ae899428",
			"cellName": "Transmitting Assertion\nArguments",
			"cellId": "873db434-a86b-4d1e-b89d-8382ae899428",
			"visible": true
		},
		"generated-edge-simstep-ef02992f-6021-45fe-b499-e25cbad27a50-873db434-a86b-4d1e-b89d-8382ae899428": {
			"path": "generated-edge-simstep-ef02992f-6021-45fe-b499-e25cbad27a50-873db434-a86b-4d1e-b89d-8382ae899428",
			"fileName": "assert.js",
			"cellName": "Transmitting Assertion Arguments",
			"cellId": "873db434-a86b-4d1e-b89d-8382ae899428",
			"visible": true,
			"startLine": 219,
			"endLine": 219,
			"parentPath": "test/assert.js"
		},
		"80b86db7-c802-4db0-afd1-2bf07c766061": {
			"path": "80b86db7-c802-4db0-afd1-2bf07c766061",
			"cellName": "Invoking the\n`.eql` method",
			"cellId": "80b86db7-c802-4db0-afd1-2bf07c766061",
			"visible": true,
			"parentCellId": "3b40d2fd-134a-4e51-a482-b1661a48d960"
		},
		"generated-edge-simstep-b98120ff-1aa4-4348-b4d8-e52c6e0a27c2-80b86db7-c802-4db0-afd1-2bf07c766061": {
			"path": "generated-edge-simstep-b98120ff-1aa4-4348-b4d8-e52c6e0a27c2-80b86db7-c802-4db0-afd1-2bf07c766061",
			"fileName": "assert.js",
			"cellName": "Invoking the `.eql` method",
			"cellId": "80b86db7-c802-4db0-afd1-2bf07c766061",
			"visible": true,
			"startLine": 1188,
			"endLine": 1188,
			"parentPath": "lib/chai/interface/assert.js"
		},
		"fd96522e-38e1-4722-9f0d-c1ee8ce25178": {
			"path": "fd96522e-38e1-4722-9f0d-c1ee8ce25178",
			"cellName": "Passing Comparison\nResult to\nCore `assert`",
			"cellId": "fd96522e-38e1-4722-9f0d-c1ee8ce25178",
			"visible": true,
			"parentCellId": "3b40d2fd-134a-4e51-a482-b1661a48d960"
		},
		"generated-edge-simstep-39b93340-7bd0-441d-a8c3-61204d721a90-fd96522e-38e1-4722-9f0d-c1ee8ce25178": {
			"path": "generated-edge-simstep-39b93340-7bd0-441d-a8c3-61204d721a90-fd96522e-38e1-4722-9f0d-c1ee8ce25178",
			"fileName": "assertions.js",
			"cellName": "Passing Comparison Result to Core `assert`",
			"cellId": "fd96522e-38e1-4722-9f0d-c1ee8ce25178",
			"visible": true,
			"startLine": 161,
			"endLine": 161,
			"parentPath": "lib/chai/core/assertions.js"
		},
		"019c2fe0-4d65-43d2-afe4-cfccf451e2b3": {
			"path": "019c2fe0-4d65-43d2-afe4-cfccf451e2b3",
			"cellName": "Transmitting Error\nDetails to\n`AssertionError`",
			"cellId": "019c2fe0-4d65-43d2-afe4-cfccf451e2b3",
			"visible": true,
			"parentCellId": "d6094e8b-04ee-4fd8-ba2c-2dcf2209cd63"
		},
		"generated-edge-simstep-91b7f77a-84dd-49bc-8736-a7bf94925ff2-019c2fe0-4d65-43d2-afe4-cfccf451e2b3": {
			"path": "generated-edge-simstep-91b7f77a-84dd-49bc-8736-a7bf94925ff2-019c2fe0-4d65-43d2-afe4-cfccf451e2b3",
			"fileName": "assertion.js",
			"cellName": "Transmitting Error Details to `AssertionError`",
			"cellId": "019c2fe0-4d65-43d2-afe4-cfccf451e2b3",
			"visible": true,
			"startLine": 181,
			"endLine": 181,
			"parentPath": "lib/chai/assertion.js"
		},
		"66baa147-b9dc-4dfa-a269-bef39a73c529": {
			"path": "66baa147-b9dc-4dfa-a269-bef39a73c529",
			"cellName": "should.js",
			"cellId": "66baa147-b9dc-4dfa-a269-bef39a73c529",
			"visible": true,
			"parentCellId": "da5ad0fd-2820-4a06-a046-1943ee671a0f"
		},
		"4c2d40e1-545b-4139-bbe7-a6a013a0b3cb": {
			"path": "4c2d40e1-545b-4139-bbe7-a6a013a0b3cb",
			"cellName": "Initialization: Activate `should` Interface - should.js:L12-228",
			"cellId": "4c2d40e1-545b-4139-bbe7-a6a013a0b3cb",
			"visible": true,
			"parentCellId": "66baa147-b9dc-4dfa-a269-bef39a73c529"
		},
		"lib/chai/interface/should.js-simstep-acf99cce-daff-4078-a332-e2600bb3824e": {
			"path": "lib/chai/interface/should.js-simstep-acf99cce-daff-4078-a332-e2600bb3824e",
			"fileName": "should.js",
			"wiki": "The user activates the `should` assertion style, typically by calling `chai.should()`. This executes the `loadShould` function which is responsible for setting up the BDD-style interface.",
			"cellName": "Initialization: Activate `should` Interface - should.js:L12-228",
			"cellId": "4c2d40e1-545b-4139-bbe7-a6a013a0b3cb",
			"visible": true,
			"startLine": 12,
			"endLine": 228,
			"parentCellId": "66baa147-b9dc-4dfa-a269-bef39a73c529",
			"parentPath": "lib/chai/interface/should.js"
		},
		"59be314e-78d5-49d0-b962-bf711c994978": {
			"path": "59be314e-78d5-49d0-b962-bf711c994978",
			"cellName": "Initialization: Add `.should` Getter to Object.prototype - should.js:L46-51",
			"cellId": "59be314e-78d5-49d0-b962-bf711c994978",
			"visible": true,
			"parentCellId": "66baa147-b9dc-4dfa-a269-bef39a73c529"
		},
		"lib/chai/interface/should.js-simstep-442c0d21-f8f0-4d4e-aba9-bf042cb1ab8a": {
			"path": "lib/chai/interface/should.js-simstep-442c0d21-f8f0-4d4e-aba9-bf042cb1ab8a",
			"fileName": "should.js",
			"wiki": "`Object.defineProperty` adds the `should` property with a custom getter (`shouldGetter`) to `Object.prototype`. Now any object in JavaScript will have access to this `.should` property via its prototype chain.",
			"cellName": "Initialization: Add `.should` Getter to Object.prototype - should.js:L46-51",
			"cellId": "59be314e-78d5-49d0-b962-bf711c994978",
			"visible": true,
			"startLine": 46,
			"endLine": 51,
			"parentCellId": "66baa147-b9dc-4dfa-a269-bef39a73c529",
			"parentPath": "lib/chai/interface/should.js"
		},
		"29ddb142-2459-46fa-b75f-7bd1b5a855c3": {
			"path": "29ddb142-2459-46fa-b75f-7bd1b5a855c3",
			"cellName": "Assertion: Access `.should` Property - should.js:L48",
			"cellId": "29ddb142-2459-46fa-b75f-7bd1b5a855c3",
			"visible": true,
			"parentCellId": "66baa147-b9dc-4dfa-a269-bef39a73c529"
		},
		"lib/chai/interface/should.js-simstep-b13560a9-f13f-46b2-bd81-a11b3521e58f": {
			"path": "lib/chai/interface/should.js-simstep-b13560a9-f13f-46b2-bd81-a11b3521e58f",
			"fileName": "should.js",
			"wiki": "The test code accesses the `.should` property on a target object (e.g., the string 'test'). Since the property doesn't exist on the string itself, the JavaScript engine looks up the prototype chain and finds the getter on `Object.prototype`, which is then executed.",
			"cellName": "Assertion: Access `.should` Property - should.js:L48",
			"cellId": "29ddb142-2459-46fa-b75f-7bd1b5a855c3",
			"visible": true,
			"startLine": 48,
			"endLine": 48,
			"parentCellId": "66baa147-b9dc-4dfa-a269-bef39a73c529",
			"parentPath": "lib/chai/interface/should.js"
		},
		"1c04e1fd-12be-4748-8350-56b2dcb56d36": {
			"path": "1c04e1fd-12be-4748-8350-56b2dcb56d36",
			"cellName": "Assertion: Create New Assertion Instance - should.js:L26",
			"cellId": "1c04e1fd-12be-4748-8350-56b2dcb56d36",
			"visible": true,
			"parentCellId": "66baa147-b9dc-4dfa-a269-bef39a73c529"
		},
		"lib/chai/interface/should.js-simstep-f9e7b88f-8956-4e45-838d-77484d39b33b": {
			"path": "lib/chai/interface/should.js-simstep-f9e7b88f-8956-4e45-838d-77484d39b33b",
			"fileName": "should.js",
			"wiki": "The `shouldGetter` creates a new `Assertion` object. The target object ('test') is passed to the `Assertion` constructor, storing it in an internal `object` flag for later use by the assertion logic.",
			"cellName": "Assertion: Create New Assertion Instance - should.js:L26",
			"cellId": "1c04e1fd-12be-4748-8350-56b2dcb56d36",
			"visible": true,
			"startLine": 26,
			"endLine": 26,
			"parentCellId": "66baa147-b9dc-4dfa-a269-bef39a73c529",
			"parentPath": "lib/chai/interface/should.js"
		},
		"a1109ae1-7092-4965-b238-8a25b920c091": {
			"path": "a1109ae1-7092-4965-b238-8a25b920c091",
			"cellName": "Assertion: Execute Terminal Assertion Method - assertions.js:L895-909",
			"cellId": "a1109ae1-7092-4965-b238-8a25b920c091",
			"visible": true,
			"parentCellId": "cb2d632b-b1e7-41e2-8642-977653392c81"
		},
		"lib/chai/core/assertions.js-simstep-4b9fbed0-f3c8-4802-8efa-3361f71fda4d": {
			"path": "lib/chai/core/assertions.js-simstep-4b9fbed0-f3c8-4802-8efa-3361f71fda4d",
			"fileName": "assertions.js",
			"wiki": "The final method in the chain, `.a('string')`, is called. This is an alias for the `typeOf` assertion. It retrieves the stored object ('test') from the assertion instance's flags and checks if its type matches the expected type ('string').",
			"cellName": "Assertion: Execute Terminal Assertion Method - assertions.js:L895-909",
			"cellId": "a1109ae1-7092-4965-b238-8a25b920c091",
			"visible": true,
			"startLine": 895,
			"endLine": 909,
			"parentCellId": "cb2d632b-b1e7-41e2-8642-977653392c81",
			"parentPath": "lib/chai/core/assertions.js"
		},
		"b0ae7ae0-8463-4138-8fa1-502e7f67c9ee": {
			"path": "b0ae7ae0-8463-4138-8fa1-502e7f67c9ee",
			"cellName": "Initialization: Trigger\nPrototype Modification",
			"cellId": "b0ae7ae0-8463-4138-8fa1-502e7f67c9ee",
			"visible": true,
			"parentCellId": "66baa147-b9dc-4dfa-a269-bef39a73c529"
		},
		"generated-edge-simstep-3feaf417-d874-4376-8a94-99247d36b533-b0ae7ae0-8463-4138-8fa1-502e7f67c9ee": {
			"path": "generated-edge-simstep-3feaf417-d874-4376-8a94-99247d36b533-b0ae7ae0-8463-4138-8fa1-502e7f67c9ee",
			"fileName": "should.js",
			"cellName": "Initialization: Trigger Prototype Modification",
			"cellId": "b0ae7ae0-8463-4138-8fa1-502e7f67c9ee",
			"visible": true,
			"startLine": 46,
			"endLine": 51,
			"parentPath": "lib/chai/interface/should.js"
		},
		"5b89f24c-4bd1-496d-91df-80d188f400cc": {
			"path": "5b89f24c-4bd1-496d-91df-80d188f400cc",
			"cellName": "Assertion: Invoke\n`shouldGetter`",
			"cellId": "5b89f24c-4bd1-496d-91df-80d188f400cc",
			"visible": true,
			"parentCellId": "66baa147-b9dc-4dfa-a269-bef39a73c529"
		},
		"generated-edge-simstep-d83fef71-09df-4d0d-b945-402208573085-5b89f24c-4bd1-496d-91df-80d188f400cc": {
			"path": "generated-edge-simstep-d83fef71-09df-4d0d-b945-402208573085-5b89f24c-4bd1-496d-91df-80d188f400cc",
			"fileName": "should.js",
			"cellName": "Assertion: Invoke `shouldGetter`",
			"cellId": "5b89f24c-4bd1-496d-91df-80d188f400cc",
			"visible": true,
			"startLine": 18,
			"endLine": 27,
			"parentPath": "lib/chai/interface/should.js"
		},
		"b460ae4c-64b7-4ac5-9736-84946e6973e4": {
			"path": "b460ae4c-64b7-4ac5-9736-84946e6973e4",
			"cellName": "Assertion: Pass\nAssertion Object\nThrough Chain",
			"cellId": "b460ae4c-64b7-4ac5-9736-84946e6973e4",
			"visible": true,
			"parentCellId": "3b40d2fd-134a-4e51-a482-b1661a48d960"
		},
		"generated-edge-simstep-4c2d035f-6342-4cba-8cef-faf80c11316f-b460ae4c-64b7-4ac5-9736-84946e6973e4": {
			"path": "generated-edge-simstep-4c2d035f-6342-4cba-8cef-faf80c11316f-b460ae4c-64b7-4ac5-9736-84946e6973e4",
			"fileName": "should.js",
			"cellName": "Assertion: Pass Assertion Object Through Chain",
			"cellId": "b460ae4c-64b7-4ac5-9736-84946e6973e4",
			"visible": true,
			"startLine": 231,
			"endLine": 233,
			"parentPath": "lib/chai/interface/should.js"
		},
		"78c5daf9-33aa-4345-8ce8-0b3d6779ad32": {
			"path": "78c5daf9-33aa-4345-8ce8-0b3d6779ad32",
			"cellName": "Flow 1 (expect): Call `expect()` to Start Assertion - expect.js:L16-18",
			"cellId": "78c5daf9-33aa-4345-8ce8-0b3d6779ad32",
			"visible": true,
			"parentCellId": "d029c765-a63a-4466-991a-3ca0ac663ea4"
		},
		"lib/chai/interface/expect.js-simstep-2d29b02e-fb70-46a9-b0f4-5adebf7bdbb2": {
			"path": "lib/chai/interface/expect.js-simstep-2d29b02e-fb70-46a9-b0f4-5adebf7bdbb2",
			"fileName": "expect.js",
			"wiki": "The user initiates an assertion chain by calling `expect()` with the value to be tested. This function creates and returns a new `Assertion` instance, which holds the target value and other metadata for the chain.",
			"cellName": "Flow 1 (expect): Call `expect()` to Start Assertion - expect.js:L16-18",
			"cellId": "78c5daf9-33aa-4345-8ce8-0b3d6779ad32",
			"visible": true,
			"startLine": 16,
			"endLine": 18,
			"parentCellId": "d029c765-a63a-4466-991a-3ca0ac663ea4",
			"parentPath": "lib/chai/interface/expect.js"
		},
		"d0e4abd6-88c2-4a83-a735-efeb4261bc1a": {
			"path": "d0e4abd6-88c2-4a83-a735-efeb4261bc1a",
			"cellName": "Flow 1 (expect): Access `.deep` Property to Set Flag - assertions.js:L131-133",
			"cellId": "d0e4abd6-88c2-4a83-a735-efeb4261bc1a",
			"visible": true,
			"parentCellId": "cb2d632b-b1e7-41e2-8642-977653392c81"
		},
		"lib/chai/core/assertions.js-simstep-1a394d13-0086-4c4d-b853-c0dcc32a6c4a": {
			"path": "lib/chai/core/assertions.js-simstep-1a394d13-0086-4c4d-b853-c0dcc32a6c4a",
			"fileName": "assertions.js",
			"wiki": "The `.deep` property is accessed in the chain. This is a getter that sets a 'deep' flag on the `Assertion` instance to `true`, modifying the behavior of subsequent equality assertions to perform a deep, recursive comparison.",
			"cellName": "Flow 1 (expect): Access `.deep` Property to Set Flag - assertions.js:L131-133",
			"cellId": "d0e4abd6-88c2-4a83-a735-efeb4261bc1a",
			"visible": true,
			"startLine": 131,
			"endLine": 133,
			"parentCellId": "cb2d632b-b1e7-41e2-8642-977653392c81",
			"parentPath": "lib/chai/core/assertions.js"
		},
		"311ab964-3643-4a03-a2eb-86baa60c3803": {
			"path": "311ab964-3643-4a03-a2eb-86baa60c3803",
			"cellName": "Flow 1 (expect): Call `.equal()` to Perform Comparison - assertions.js:L1116-1133",
			"cellId": "311ab964-3643-4a03-a2eb-86baa60c3803",
			"visible": true,
			"parentCellId": "cb2d632b-b1e7-41e2-8642-977653392c81"
		},
		"lib/chai/core/assertions.js-simstep-217b5149-3ea4-4940-8139-454ee1ca8997": {
			"path": "lib/chai/core/assertions.js-simstep-217b5149-3ea4-4940-8139-454ee1ca8997",
			"fileName": "assertions.js",
			"wiki": "The `.equal()` method is called with the expected value. It checks if the `deep` flag is set. Since it is, it performs a deep equality comparison between the actual value (`{a: 1}`) and the expected value (`{a: 1}`). The result of this comparison is then passed to the internal `.assert()` method.",
			"cellName": "Flow 1 (expect): Call `.equal()` to Perform Comparison - assertions.js:L1116-1133",
			"cellId": "311ab964-3643-4a03-a2eb-86baa60c3803",
			"visible": true,
			"startLine": 1116,
			"endLine": 1133,
			"parentCellId": "cb2d632b-b1e7-41e2-8642-977653392c81",
			"parentPath": "lib/chai/core/assertions.js"
		},
		"33c4932a-9999-4a12-a99c-e7fa68d52a3b": {
			"path": "33c4932a-9999-4a12-a99c-e7fa68d52a3b",
			"cellName": "Flow 1 (expect): Final Assertion Execution - assertion.js:L159-183",
			"cellId": "33c4932a-9999-4a12-a99c-e7fa68d52a3b",
			"visible": true,
			"parentCellId": "d6094e8b-04ee-4fd8-ba2c-2dcf2209cd63"
		},
		"lib/chai/assertion.js-simstep-b1e6f16e-f82c-4a24-9a4b-aed194145180": {
			"path": "lib/chai/assertion.js-simstep-b1e6f16e-f82c-4a24-9a4b-aed194145180",
			"fileName": "assertion.js",
			"wiki": "The core `.assert()` method on the `Assertion` prototype evaluates the expression passed to it. Since the expression is `true`, the assertion passes, and execution continues without throwing an error.",
			"cellName": "Flow 1 (expect): Final Assertion Execution - assertion.js:L159-183",
			"cellId": "33c4932a-9999-4a12-a99c-e7fa68d52a3b",
			"visible": true,
			"startLine": 159,
			"endLine": 183,
			"parentCellId": "d6094e8b-04ee-4fd8-ba2c-2dcf2209cd63",
			"parentPath": "lib/chai/assertion.js"
		},
		"5d95bf56-eb2d-4a9a-84ff-c22854329ade": {
			"path": "5d95bf56-eb2d-4a9a-84ff-c22854329ade",
			"cellName": "Flow 2 (assert): Call `assert.deepEqual()` - assert.js:L216-218",
			"cellId": "5d95bf56-eb2d-4a9a-84ff-c22854329ade",
			"visible": true,
			"parentCellId": "1ddd4839-b3e2-43af-8b5e-9b585c757bb7"
		},
		"lib/chai/interface/assert.js-simstep-a52400a4-a4c6-4519-b969-bc376e992511": {
			"path": "lib/chai/interface/assert.js-simstep-a52400a4-a4c6-4519-b969-bc376e992511",
			"fileName": "assert.js",
			"wiki": "The user calls `assert.deepEqual()` with the actual and expected values. This function acts as a shortcut, creating a new `Assertion` instance internally and calling the `.to.eql()` method on it.",
			"cellName": "Flow 2 (assert): Call `assert.deepEqual()` - assert.js:L216-218",
			"cellId": "5d95bf56-eb2d-4a9a-84ff-c22854329ade",
			"visible": true,
			"startLine": 216,
			"endLine": 218,
			"parentCellId": "1ddd4839-b3e2-43af-8b5e-9b585c757bb7",
			"parentPath": "lib/chai/interface/assert.js"
		},
		"6eef333b-2667-42fb-b1d6-1ade44f08169": {
			"path": "6eef333b-2667-42fb-b1d6-1ade44f08169",
			"cellName": "Flow 2 (assert): Execute `.eql()` Deep Comparison - assertions.js:L1180-1191",
			"cellId": "6eef333b-2667-42fb-b1d6-1ade44f08169",
			"visible": true,
			"parentCellId": "cb2d632b-b1e7-41e2-8642-977653392c81"
		},
		"lib/chai/core/assertions.js-simstep-0ef6d789-f28a-461c-af3a-397cda0df6c0": {
			"path": "lib/chai/core/assertions.js-simstep-0ef6d789-f28a-461c-af3a-397cda0df6c0",
			"fileName": "assertions.js",
			"wiki": "The `.eql()` method is executed. It uses a deep equality comparison utility to compare the actual and expected objects. The boolean result is then passed to the internal `.assert()` method.",
			"cellName": "Flow 2 (assert): Execute `.eql()` Deep Comparison - assertions.js:L1180-1191",
			"cellId": "6eef333b-2667-42fb-b1d6-1ade44f08169",
			"visible": true,
			"startLine": 1180,
			"endLine": 1191,
			"parentCellId": "cb2d632b-b1e7-41e2-8642-977653392c81",
			"parentPath": "lib/chai/core/assertions.js"
		},
		"aa2ef5c6-dd9d-48fa-ae4b-6c7e431eabcf": {
			"path": "aa2ef5c6-dd9d-48fa-ae4b-6c7e431eabcf",
			"cellName": "Flow 2 (assert): Final Assertion Execution - assertion.js:L159-183",
			"cellId": "aa2ef5c6-dd9d-48fa-ae4b-6c7e431eabcf",
			"visible": true,
			"parentCellId": "d6094e8b-04ee-4fd8-ba2c-2dcf2209cd63"
		},
		"lib/chai/assertion.js-simstep-9870feb3-8225-47fd-9c93-d10b98d026d7": {
			"path": "lib/chai/assertion.js-simstep-9870feb3-8225-47fd-9c93-d10b98d026d7",
			"fileName": "assertion.js",
			"wiki": "The core `.assert()` method evaluates the expression. Since it's `true`, the assertion passes, and execution completes without any errors.",
			"cellName": "Flow 2 (assert): Final Assertion Execution - assertion.js:L159-183",
			"cellId": "aa2ef5c6-dd9d-48fa-ae4b-6c7e431eabcf",
			"visible": true,
			"startLine": 159,
			"endLine": 183,
			"parentCellId": "d6094e8b-04ee-4fd8-ba2c-2dcf2209cd63",
			"parentPath": "lib/chai/assertion.js"
		},
		"87dbf5e6-441d-4764-9508-43ab5d27a5b9": {
			"path": "87dbf5e6-441d-4764-9508-43ab5d27a5b9",
			"cellName": "Flow 3 (type check): Call `assert.typeOf()` - assert.js:L829-831",
			"cellId": "87dbf5e6-441d-4764-9508-43ab5d27a5b9",
			"visible": true,
			"parentCellId": "1ddd4839-b3e2-43af-8b5e-9b585c757bb7"
		},
		"lib/chai/interface/assert.js-simstep-ef2a8e1a-5e6e-45c9-b04a-985fa1c48b52": {
			"path": "lib/chai/interface/assert.js-simstep-ef2a8e1a-5e6e-45c9-b04a-985fa1c48b52",
			"fileName": "assert.js",
			"wiki": "The user calls `assert.typeOf()` with a value and the expected type name. This function creates a new `Assertion` instance and calls the chain `.to.be.a(type)`.",
			"cellName": "Flow 3 (type check): Call `assert.typeOf()` - assert.js:L829-831",
			"cellId": "87dbf5e6-441d-4764-9508-43ab5d27a5b9",
			"visible": true,
			"startLine": 829,
			"endLine": 831,
			"parentCellId": "1ddd4839-b3e2-43af-8b5e-9b585c757bb7",
			"parentPath": "lib/chai/interface/assert.js"
		},
		"867c90fe-63e6-47e3-a6bc-8a4780fb7948": {
			"path": "867c90fe-63e6-47e3-a6bc-8a4780fb7948",
			"cellName": "Flow 3 (type check): Execute `.a()` Type Assertion - assertions.js:L327-348",
			"cellId": "867c90fe-63e6-47e3-a6bc-8a4780fb7948",
			"visible": true,
			"parentCellId": "cb2d632b-b1e7-41e2-8642-977653392c81"
		},
		"lib/chai/core/assertions.js-simstep-0c66b723-e954-45a4-9bff-654a9ae5d898": {
			"path": "lib/chai/core/assertions.js-simstep-0c66b723-e954-45a4-9bff-654a9ae5d898",
			"fileName": "assertions.js",
			"wiki": "The `.a()` method (aliased from `an`) detects the type of the target object using an internal `type-detect` utility. It compares the detected type with the expected type and passes the boolean result to the core `.assert()` method.",
			"cellName": "Flow 3 (type check): Execute `.a()` Type Assertion - assertions.js:L327-348",
			"cellId": "867c90fe-63e6-47e3-a6bc-8a4780fb7948",
			"visible": true,
			"startLine": 327,
			"endLine": 348,
			"parentCellId": "cb2d632b-b1e7-41e2-8642-977653392c81",
			"parentPath": "lib/chai/core/assertions.js"
		},
		"79cfa8e5-df26-4e28-a847-e90640711609": {
			"path": "79cfa8e5-df26-4e28-a847-e90640711609",
			"cellName": "Flow 3 (type check): Final Assertion Execution - assertion.js:L159-183",
			"cellId": "79cfa8e5-df26-4e28-a847-e90640711609",
			"visible": true,
			"parentCellId": "d6094e8b-04ee-4fd8-ba2c-2dcf2209cd63"
		},
		"lib/chai/assertion.js-simstep-e99f28a4-883f-4312-aa9b-b72b2c04d898": {
			"path": "lib/chai/assertion.js-simstep-e99f28a4-883f-4312-aa9b-b72b2c04d898",
			"fileName": "assertion.js",
			"wiki": "The core `.assert()` method evaluates the boolean expression. Since it is `true`, the assertion passes and execution completes successfully.",
			"cellName": "Flow 3 (type check): Final Assertion Execution - assertion.js:L159-183",
			"cellId": "79cfa8e5-df26-4e28-a847-e90640711609",
			"visible": true,
			"startLine": 159,
			"endLine": 183,
			"parentCellId": "d6094e8b-04ee-4fd8-ba2c-2dcf2209cd63",
			"parentPath": "lib/chai/assertion.js"
		},
		"48b56c37-0c89-4129-9ecc-6639a1b56534": {
			"path": "48b56c37-0c89-4129-9ecc-6639a1b56534",
			"cellName": "Flow 1\n(expect): Assertion\nObject Propagation",
			"cellId": "48b56c37-0c89-4129-9ecc-6639a1b56534",
			"visible": true,
			"parentCellId": "3b40d2fd-134a-4e51-a482-b1661a48d960"
		},
		"generated-edge-simstep-ef19b0bb-0a81-4c70-ac29-b4ec8c85a589-48b56c37-0c89-4129-9ecc-6639a1b56534": {
			"path": "generated-edge-simstep-ef19b0bb-0a81-4c70-ac29-b4ec8c85a589-48b56c37-0c89-4129-9ecc-6639a1b56534",
			"fileName": "expect.js",
			"cellName": "Flow 1 (expect): Assertion Object Propagation",
			"cellId": "48b56c37-0c89-4129-9ecc-6639a1b56534",
			"visible": true,
			"startLine": 17,
			"endLine": 17,
			"parentPath": "lib/chai/interface/expect.js"
		},
		"87ac7881-87ff-48d0-8cbd-2c14d57c526f": {
			"path": "87ac7881-87ff-48d0-8cbd-2c14d57c526f",
			"cellName": "Flow 1\n(expect): Modified\nAssertion Object\nPropagation",
			"cellId": "87ac7881-87ff-48d0-8cbd-2c14d57c526f",
			"visible": true,
			"parentCellId": "cb2d632b-b1e7-41e2-8642-977653392c81"
		},
		"generated-edge-simstep-e1db538c-c652-4ed2-bf4d-3a3937b0707f-87ac7881-87ff-48d0-8cbd-2c14d57c526f": {
			"path": "generated-edge-simstep-e1db538c-c652-4ed2-bf4d-3a3937b0707f-87ac7881-87ff-48d0-8cbd-2c14d57c526f",
			"fileName": "assertions.js",
			"cellName": "Flow 1 (expect): Modified Assertion Object Propagation",
			"cellId": "87ac7881-87ff-48d0-8cbd-2c14d57c526f",
			"visible": true,
			"startLine": 132,
			"endLine": 132,
			"parentPath": "lib/chai/core/assertions.js"
		},
		"9134c622-6ef3-42f8-afb4-08b8c1a32d61": {
			"path": "9134c622-6ef3-42f8-afb4-08b8c1a32d61",
			"cellName": "Flow 1\n(expect): Pass\nResult to\nCore Assert\nLogic",
			"cellId": "9134c622-6ef3-42f8-afb4-08b8c1a32d61",
			"visible": true,
			"parentCellId": "3b40d2fd-134a-4e51-a482-b1661a48d960"
		},
		"generated-edge-simstep-609a9228-dfda-4fdb-b53b-5a5e49be22ac-9134c622-6ef3-42f8-afb4-08b8c1a32d61": {
			"path": "generated-edge-simstep-609a9228-dfda-4fdb-b53b-5a5e49be22ac-9134c622-6ef3-42f8-afb4-08b8c1a32d61",
			"fileName": "assertions.js",
			"cellName": "Flow 1 (expect): Pass Result to Core Assert Logic",
			"cellId": "9134c622-6ef3-42f8-afb4-08b8c1a32d61",
			"visible": true,
			"startLine": 1121,
			"endLine": 1121,
			"parentPath": "lib/chai/core/assertions.js"
		},
		"0306bdf0-17b6-4e64-b59a-bcb5f9487753": {
			"path": "0306bdf0-17b6-4e64-b59a-bcb5f9487753",
			"cellName": "Flow 2\n(assert): Internal\nCall to\n`eql`",
			"cellId": "0306bdf0-17b6-4e64-b59a-bcb5f9487753",
			"visible": true,
			"parentCellId": "3b40d2fd-134a-4e51-a482-b1661a48d960"
		},
		"generated-edge-simstep-651b4b15-e6ed-41da-8993-1d475ca13f6d-0306bdf0-17b6-4e64-b59a-bcb5f9487753": {
			"path": "generated-edge-simstep-651b4b15-e6ed-41da-8993-1d475ca13f6d-0306bdf0-17b6-4e64-b59a-bcb5f9487753",
			"fileName": "assert.js",
			"cellName": "Flow 2 (assert): Internal Call to `eql`",
			"cellId": "0306bdf0-17b6-4e64-b59a-bcb5f9487753",
			"visible": true,
			"startLine": 217,
			"endLine": 217,
			"parentPath": "lib/chai/interface/assert.js"
		},
		"24352a06-6984-42d3-83f4-a9736f36f8c2": {
			"path": "24352a06-6984-42d3-83f4-a9736f36f8c2",
			"cellName": "Flow 2\n(assert): Pass\nResult to\nCore Assert\nLogic",
			"cellId": "24352a06-6984-42d3-83f4-a9736f36f8c2",
			"visible": true,
			"parentCellId": "3b40d2fd-134a-4e51-a482-b1661a48d960"
		},
		"generated-edge-simstep-8f8a132f-645a-4cf6-bb6a-eb331ba80e2b-24352a06-6984-42d3-83f4-a9736f36f8c2": {
			"path": "generated-edge-simstep-8f8a132f-645a-4cf6-bb6a-eb331ba80e2b-24352a06-6984-42d3-83f4-a9736f36f8c2",
			"fileName": "assertions.js",
			"cellName": "Flow 2 (assert): Pass Result to Core Assert Logic",
			"cellId": "24352a06-6984-42d3-83f4-a9736f36f8c2",
			"visible": true,
			"startLine": 1184,
			"endLine": 1184,
			"parentPath": "lib/chai/core/assertions.js"
		},
		"9019d3ca-3407-4b99-85cc-b3e58ffebd0f": {
			"path": "9019d3ca-3407-4b99-85cc-b3e58ffebd0f",
			"cellName": "Flow 3\n(type check):\nInternal Call\nto `.a()`",
			"cellId": "9019d3ca-3407-4b99-85cc-b3e58ffebd0f",
			"visible": true,
			"parentCellId": "3b40d2fd-134a-4e51-a482-b1661a48d960"
		},
		"generated-edge-simstep-5cdbf0f8-d933-46c1-9de9-c91ac66ef06f-9019d3ca-3407-4b99-85cc-b3e58ffebd0f": {
			"path": "generated-edge-simstep-5cdbf0f8-d933-46c1-9de9-c91ac66ef06f-9019d3ca-3407-4b99-85cc-b3e58ffebd0f",
			"fileName": "assert.js",
			"cellName": "Flow 3 (type check): Internal Call to `.a()`",
			"cellId": "9019d3ca-3407-4b99-85cc-b3e58ffebd0f",
			"visible": true,
			"startLine": 830,
			"endLine": 830,
			"parentPath": "lib/chai/interface/assert.js"
		},
		"84523489-6af8-4277-b04b-8dec81c35a09": {
			"path": "84523489-6af8-4277-b04b-8dec81c35a09",
			"cellName": "Flow 3\n(type check):\nPass Result\nto Core\nAssert Logic",
			"cellId": "84523489-6af8-4277-b04b-8dec81c35a09",
			"visible": true,
			"parentCellId": "3b40d2fd-134a-4e51-a482-b1661a48d960"
		},
		"generated-edge-simstep-7e926776-4565-4718-8fe0-67fccedad28a-84523489-6af8-4277-b04b-8dec81c35a09": {
			"path": "generated-edge-simstep-7e926776-4565-4718-8fe0-67fccedad28a-84523489-6af8-4277-b04b-8dec81c35a09",
			"fileName": "assertions.js",
			"cellName": "Flow 3 (type check): Pass Result to Core Assert Logic",
			"cellId": "84523489-6af8-4277-b04b-8dec81c35a09",
			"visible": true,
			"startLine": 340,
			"endLine": 345,
			"parentPath": "lib/chai/core/assertions.js"
		},
		"1799216e-8b13-4638-9ea3-7258f10a4448": {
			"path": "1799216e-8b13-4638-9ea3-7258f10a4448",
			"cellName": "expect.js",
			"cellId": "1799216e-8b13-4638-9ea3-7258f10a4448",
			"visible": true,
			"parentCellId": "a1119216-5cf6-401f-a80f-bd9f6cddc124"
		},
		"8516dde4-fdc7-49cf-90a5-5abb0588348e": {
			"path": "8516dde4-fdc7-49cf-90a5-5abb0588348e",
			"cellName": "flag.js",
			"cellId": "8516dde4-fdc7-49cf-90a5-5abb0588348e",
			"visible": true,
			"parentCellId": "365dcd1f-e369-4e23-b3b7-84fb25a3fa18"
		},
		"aeb183a9-7b12-49ce-ba93-64b25e9a7d80": {
			"path": "aeb183a9-7b12-49ce-ba93-64b25e9a7d80",
			"cellName": "Property Assertion Flow: Start Assertion with `expect()` - expect.js:L1761",
			"cellId": "aeb183a9-7b12-49ce-ba93-64b25e9a7d80",
			"visible": true,
			"parentCellId": "1799216e-8b13-4638-9ea3-7258f10a4448"
		},
		"test/expect.js-simstep-746137a6-3544-4c70-bc76-88636ec01d1f": {
			"path": "test/expect.js-simstep-746137a6-3544-4c70-bc76-88636ec01d1f",
			"fileName": "expect.js",
			"wiki": "The test begins by calling `expect()` with the target object, which creates and returns a new `Assertion` object. This object holds the target (`_obj`) and various flags for the assertion chain. This is the entry point for the `expect` BDD interface.",
			"cellName": "Property Assertion Flow: Start Assertion with `expect()` - expect.js:L1761",
			"cellId": "aeb183a9-7b12-49ce-ba93-64b25e9a7d80",
			"visible": true,
			"startLine": 1761,
			"endLine": 1761,
			"parentCellId": "1799216e-8b13-4638-9ea3-7258f10a4448",
			"parentPath": "test/expect.js"
		},
		"21921551-9e0d-4282-9389-af27e5d0114e": {
			"path": "21921551-9e0d-4282-9389-af27e5d0114e",
			"cellName": "Property Assertion Flow: Set `.nested` Flag - assertions.js:L161-163",
			"cellId": "21921551-9e0d-4282-9389-af27e5d0114e",
			"visible": true,
			"parentCellId": "cb2d632b-b1e7-41e2-8642-977653392c81"
		},
		"lib/chai/core/assertions.js-simstep-83534e6d-9a92-477c-a4d1-22454ac97df5": {
			"path": "lib/chai/core/assertions.js-simstep-83534e6d-9a92-477c-a4d1-22454ac97df5",
			"fileName": "assertions.js",
			"wiki": "Accessing the `.nested` property acts as a getter that sets the 'nested' flag on the assertion object to `true`. This informs subsequent property assertions, like `.property()`, to interpret the property name as a dot-separated path for deep object traversal.",
			"cellName": "Property Assertion Flow: Set `.nested` Flag - assertions.js:L161-163",
			"cellId": "21921551-9e0d-4282-9389-af27e5d0114e",
			"visible": true,
			"startLine": 161,
			"endLine": 163,
			"parentCellId": "cb2d632b-b1e7-41e2-8642-977653392c81",
			"parentPath": "lib/chai/core/assertions.js"
		},
		"55e16a39-7839-4cc4-9acc-239022050196": {
			"path": "55e16a39-7839-4cc4-9acc-239022050196",
			"cellName": "Property Assertion Flow: Call `.property()` for Nested Value Check - assertions.js:L1922-2021",
			"cellId": "55e16a39-7839-4cc4-9acc-239022050196",
			"visible": true,
			"parentCellId": "cb2d632b-b1e7-41e2-8642-977653392c81"
		},
		"lib/chai/core/assertions.js-simstep-9e76524f-243c-4912-9e3b-9edfef97cb41": {
			"path": "lib/chai/core/assertions.js-simstep-9e76524f-243c-4912-9e3b-9edfef97cb41",
			"fileName": "assertions.js",
			"wiki": "The `.property()` method is called with the nested path 'a.b' and the expected value 'c'. This triggers the `assertProperty` function, which contains the core logic for property-based assertions.",
			"cellName": "Property Assertion Flow: Call `.property()` for Nested Value Check - assertions.js:L1922-2021",
			"cellId": "55e16a39-7839-4cc4-9acc-239022050196",
			"visible": true,
			"startLine": 1922,
			"endLine": 2021,
			"parentCellId": "cb2d632b-b1e7-41e2-8642-977653392c81",
			"parentPath": "lib/chai/core/assertions.js"
		},
		"7e8fede8-26fd-4cab-b856-2e346e9af8f2": {
			"path": "7e8fede8-26fd-4cab-b856-2e346e9af8f2",
			"cellName": "Property Assertion Flow: Assert Nested Property Value - assertions.js:L2001-2019",
			"cellId": "7e8fede8-26fd-4cab-b856-2e346e9af8f2",
			"visible": true,
			"parentCellId": "cb2d632b-b1e7-41e2-8642-977653392c81"
		},
		"lib/chai/core/assertions.js-simstep-99ab9e7b-2050-4310-853b-5668c613a660": {
			"path": "lib/chai/core/assertions.js-simstep-99ab9e7b-2050-4310-853b-5668c613a660",
			"fileName": "assertions.js",
			"wiki": "The retrieved value 'c' is compared to the expected value 'c'. Since they are strictly equal, the `this.assert()` method is called with a truthy expression, and the assertion passes without throwing an error.",
			"cellName": "Property Assertion Flow: Assert Nested Property Value - assertions.js:L2001-2019",
			"cellId": "7e8fede8-26fd-4cab-b856-2e346e9af8f2",
			"visible": true,
			"startLine": 2001,
			"endLine": 2019,
			"parentCellId": "cb2d632b-b1e7-41e2-8642-977653392c81",
			"parentPath": "lib/chai/core/assertions.js"
		},
		"d721a770-8000-427b-89be-8bf3b5844697": {
			"path": "d721a770-8000-427b-89be-8bf3b5844697",
			"cellName": "Own Property Flow: Set `.own` Flag - assertions.js:L187-189",
			"cellId": "d721a770-8000-427b-89be-8bf3b5844697",
			"visible": true,
			"parentCellId": "cb2d632b-b1e7-41e2-8642-977653392c81"
		},
		"lib/chai/core/assertions.js-simstep-64369f59-020e-4bb8-ac7a-c747618aadd4": {
			"path": "lib/chai/core/assertions.js-simstep-64369f59-020e-4bb8-ac7a-c747618aadd4",
			"fileName": "assertions.js",
			"wiki": "In a new assertion chain like `expect(obj).to.have.own.property('a')`, accessing the `.own` property sets the 'own' flag. This instructs `.property()` to ignore the prototype chain and only check for properties directly on the object.",
			"cellName": "Own Property Flow: Set `.own` Flag - assertions.js:L187-189",
			"cellId": "d721a770-8000-427b-89be-8bf3b5844697",
			"visible": true,
			"startLine": 187,
			"endLine": 189,
			"parentCellId": "cb2d632b-b1e7-41e2-8642-977653392c81",
			"parentPath": "lib/chai/core/assertions.js"
		},
		"68e92267-8ca9-47a7-b850-37cb8ad1e9d4": {
			"path": "68e92267-8ca9-47a7-b850-37cb8ad1e9d4",
			"cellName": "Own Property Flow: Check for Own Property - assertions.js:L1990-1991",
			"cellId": "68e92267-8ca9-47a7-b850-37cb8ad1e9d4",
			"visible": true,
			"parentCellId": "cb2d632b-b1e7-41e2-8642-977653392c81"
		},
		"lib/chai/core/assertions.js-simstep-f9ac5136-9a58-4213-bd61-88563d93e56d": {
			"path": "lib/chai/core/assertions.js-simstep-f9ac5136-9a58-4213-bd61-88563d93e56d",
			"fileName": "assertions.js",
			"wiki": "The `assertProperty` function is called. It detects the `own` flag and uses `Object.prototype.hasOwnProperty.call(obj, name)` to verify that the property exists directly on the object, not on its prototype.",
			"cellName": "Own Property Flow: Check for Own Property - assertions.js:L1990-1991",
			"cellId": "68e92267-8ca9-47a7-b850-37cb8ad1e9d4",
			"visible": true,
			"startLine": 1990,
			"endLine": 1991,
			"parentCellId": "cb2d632b-b1e7-41e2-8642-977653392c81",
			"parentPath": "lib/chai/core/assertions.js"
		},
		"58e1a797-b38e-41d5-9709-2f9f5045a403": {
			"path": "58e1a797-b38e-41d5-9709-2f9f5045a403",
			"cellName": "Own Property Flow: Assert Own Property Existence - assertion.js:L143-187",
			"cellId": "58e1a797-b38e-41d5-9709-2f9f5045a403",
			"visible": true,
			"parentCellId": "d6094e8b-04ee-4fd8-ba2c-2dcf2209cd63"
		},
		"lib/chai/assertion.js-simstep-98676212-6869-431d-b44e-7153e6a408cc": {
			"path": "lib/chai/assertion.js-simstep-98676212-6869-431d-b44e-7153e6a408cc",
			"fileName": "assertion.js",
			"wiki": "The `this.assert()` method receives `true` because the own property was found, and the assertion passes.",
			"cellName": "Own Property Flow: Assert Own Property Existence - assertion.js:L143-187",
			"cellId": "58e1a797-b38e-41d5-9709-2f9f5045a403",
			"visible": true,
			"startLine": 143,
			"endLine": 187,
			"parentCellId": "d6094e8b-04ee-4fd8-ba2c-2dcf2209cd63",
			"parentPath": "lib/chai/assertion.js"
		},
		"30085bc9-0bfa-4cc9-bcf7-d56a98b03843": {
			"path": "30085bc9-0bfa-4cc9-bcf7-d56a98b03843",
			"cellName": "Keys Assertion Flow: Call `.keys()` Method - assertions.js:L2480-2591",
			"cellId": "30085bc9-0bfa-4cc9-bcf7-d56a98b03843",
			"visible": true,
			"parentCellId": "cb2d632b-b1e7-41e2-8642-977653392c81"
		},
		"lib/chai/core/assertions.js-simstep-fdcb8440-3208-4a45-a16d-7627b454a604": {
			"path": "lib/chai/core/assertions.js-simstep-fdcb8440-3208-4a45-a16d-7627b454a604",
			"fileName": "assertions.js",
			"wiki": "In an assertion like `expect(obj).to.have.keys(['a', 'b'])`, the `.keys()` method is called. This invokes the `assertKeys` function, which handles the logic for comparing key sets.",
			"cellName": "Keys Assertion Flow: Call `.keys()` Method - assertions.js:L2480-2591",
			"cellId": "30085bc9-0bfa-4cc9-bcf7-d56a98b03843",
			"visible": true,
			"startLine": 2480,
			"endLine": 2591,
			"parentCellId": "cb2d632b-b1e7-41e2-8642-977653392c81",
			"parentPath": "lib/chai/core/assertions.js"
		},
		"5672de1c-1b3b-4e88-a903-227864227636": {
			"path": "5672de1c-1b3b-4e88-a903-227864227636",
			"cellName": "Keys Assertion Flow: Compare Key Sets - assertions.js:L2539-2557",
			"cellId": "5672de1c-1b3b-4e88-a903-227864227636",
			"visible": true,
			"parentCellId": "cb2d632b-b1e7-41e2-8642-977653392c81"
		},
		"lib/chai/core/assertions.js-simstep-82ec3d5c-525b-45d8-b031-689545566b02": {
			"path": "lib/chai/core/assertions.js-simstep-82ec3d5c-525b-45d8-b031-689545566b02",
			"fileName": "assertions.js",
			"wiki": "The list of actual keys is compared against the expected keys. Flags such as `.all` (default), `.any`, and `.include` determine the comparison rules (e.g., exact match, subset, or partial match). For a default `.keys()` call, it checks for an exact match of key sets.",
			"cellName": "Keys Assertion Flow: Compare Key Sets - assertions.js:L2539-2557",
			"cellId": "5672de1c-1b3b-4e88-a903-227864227636",
			"visible": true,
			"startLine": 2539,
			"endLine": 2557,
			"parentCellId": "cb2d632b-b1e7-41e2-8642-977653392c81",
			"parentPath": "lib/chai/core/assertions.js"
		},
		"33e4ebe1-541d-4240-9a7e-89cf413453fb": {
			"path": "33e4ebe1-541d-4240-9a7e-89cf413453fb",
			"cellName": "Assert Interface Flow: User Call to `assert.property()` - assert.js:L1263-1265",
			"cellId": "33e4ebe1-541d-4240-9a7e-89cf413453fb",
			"visible": true,
			"parentCellId": "1ddd4839-b3e2-43af-8b5e-9b585c757bb7"
		},
		"lib/chai/interface/assert.js-simstep-520ae158-b4c5-4849-9966-b6286f224dd1": {
			"path": "lib/chai/interface/assert.js-simstep-520ae158-b4c5-4849-9966-b6286f224dd1",
			"fileName": "assert.js",
			"wiki": "A user calls `assert.property()` from Chai's `assert` interface. This function serves as a wrapper that internally uses the same `Assertion` logic as `expect` and `should`.",
			"cellName": "Assert Interface Flow: User Call to `assert.property()` - assert.js:L1263-1265",
			"cellId": "33e4ebe1-541d-4240-9a7e-89cf413453fb",
			"visible": true,
			"startLine": 1263,
			"endLine": 1265,
			"parentCellId": "1ddd4839-b3e2-43af-8b5e-9b585c757bb7",
			"parentPath": "lib/chai/interface/assert.js"
		},
		"294876f2-5e6d-4265-b46c-31c4e00fe3b4": {
			"path": "294876f2-5e6d-4265-b46c-31c4e00fe3b4",
			"cellName": "Property Assertion\nFlow: Chain\nAssertion Object",
			"cellId": "294876f2-5e6d-4265-b46c-31c4e00fe3b4",
			"visible": true
		},
		"generated-edge-simstep-143eae5b-325d-40e7-8a16-158b8ac33b80-294876f2-5e6d-4265-b46c-31c4e00fe3b4": {
			"path": "generated-edge-simstep-143eae5b-325d-40e7-8a16-158b8ac33b80-294876f2-5e6d-4265-b46c-31c4e00fe3b4",
			"fileName": "expect.js",
			"cellName": "Property Assertion Flow: Chain Assertion Object",
			"cellId": "294876f2-5e6d-4265-b46c-31c4e00fe3b4",
			"visible": true,
			"startLine": 189,
			"endLine": 191,
			"parentPath": "test/expect.js"
		},
		"42b0d357-26ae-4201-8bb2-bc90bf01af18": {
			"path": "42b0d357-26ae-4201-8bb2-bc90bf01af18",
			"cellName": "Property Assertion\nFlow: Chain\nAssertion with\n`nested` flag",
			"cellId": "42b0d357-26ae-4201-8bb2-bc90bf01af18",
			"visible": true,
			"parentCellId": "cb2d632b-b1e7-41e2-8642-977653392c81"
		},
		"generated-edge-simstep-3ed10e00-58bb-4a7f-9226-fb364837d55d-42b0d357-26ae-4201-8bb2-bc90bf01af18": {
			"path": "generated-edge-simstep-3ed10e00-58bb-4a7f-9226-fb364837d55d-42b0d357-26ae-4201-8bb2-bc90bf01af18",
			"fileName": "assertions.js",
			"cellName": "Property Assertion Flow: Chain Assertion with `nested` flag",
			"cellId": "42b0d357-26ae-4201-8bb2-bc90bf01af18",
			"visible": true,
			"startLine": 25,
			"endLine": 33,
			"parentPath": "lib/chai/core/assertions.js"
		},
		"8aa2962b-1ace-4fb9-801f-1ee6e08d55ca": {
			"path": "8aa2962b-1ace-4fb9-801f-1ee6e08d55ca",
			"cellName": "Property Assertion\nFlow: Evaluate\nNested Path",
			"cellId": "8aa2962b-1ace-4fb9-801f-1ee6e08d55ca",
			"visible": true,
			"parentCellId": "cb2d632b-b1e7-41e2-8642-977653392c81"
		},
		"generated-edge-simstep-893c4144-0feb-4ab7-8ae2-c21459d1301d-8aa2962b-1ace-4fb9-801f-1ee6e08d55ca": {
			"path": "generated-edge-simstep-893c4144-0feb-4ab7-8ae2-c21459d1301d-8aa2962b-1ace-4fb9-801f-1ee6e08d55ca",
			"fileName": "assertions.js",
			"cellName": "Property Assertion Flow: Evaluate Nested Path",
			"cellId": "8aa2962b-1ace-4fb9-801f-1ee6e08d55ca",
			"visible": true,
			"startLine": 1967,
			"endLine": 1972,
			"parentPath": "lib/chai/core/assertions.js"
		},
		"b17fcc8d-22b2-44d6-952d-c85bcf91b534": {
			"path": "b17fcc8d-22b2-44d6-952d-c85bcf91b534",
			"cellName": "Own Property\nFlow: Transition\nto New\nScenario",
			"cellId": "b17fcc8d-22b2-44d6-952d-c85bcf91b534",
			"visible": true,
			"parentCellId": "cb2d632b-b1e7-41e2-8642-977653392c81"
		},
		"generated-edge-simstep-91b02ae5-4d01-42ca-a06f-23279795bceb-b17fcc8d-22b2-44d6-952d-c85bcf91b534": {
			"path": "generated-edge-simstep-91b02ae5-4d01-42ca-a06f-23279795bceb-b17fcc8d-22b2-44d6-952d-c85bcf91b534",
			"fileName": "assertions.js",
			"cellName": "Own Property Flow: Transition to New Scenario",
			"cellId": "b17fcc8d-22b2-44d6-952d-c85bcf91b534",
			"visible": true,
			"startLine": 1845,
			"endLine": 1845,
			"parentPath": "lib/chai/core/assertions.js"
		},
		"c43a8570-5daa-4a31-88a9-19deb661f03c": {
			"path": "c43a8570-5daa-4a31-88a9-19deb661f03c",
			"cellName": "Own Property\nFlow: Chain\nAssertion with\n`own` flag",
			"cellId": "c43a8570-5daa-4a31-88a9-19deb661f03c",
			"visible": true,
			"parentCellId": "cb2d632b-b1e7-41e2-8642-977653392c81"
		},
		"generated-edge-simstep-a4173368-a694-439a-95dc-cfca62d3239f-c43a8570-5daa-4a31-88a9-19deb661f03c": {
			"path": "generated-edge-simstep-a4173368-a694-439a-95dc-cfca62d3239f-c43a8570-5daa-4a31-88a9-19deb661f03c",
			"fileName": "assertions.js",
			"cellName": "Own Property Flow: Chain Assertion with `own` flag",
			"cellId": "c43a8570-5daa-4a31-88a9-19deb661f03c",
			"visible": true,
			"startLine": 25,
			"endLine": 33,
			"parentPath": "lib/chai/core/assertions.js"
		},
		"f0263f23-4936-4a4e-8c37-828310016668": {
			"path": "f0263f23-4936-4a4e-8c37-828310016668",
			"cellName": "Own Property\nFlow: Transmit\nExistence Result",
			"cellId": "f0263f23-4936-4a4e-8c37-828310016668",
			"visible": true,
			"parentCellId": "3b40d2fd-134a-4e51-a482-b1661a48d960"
		},
		"generated-edge-simstep-a57499e7-3803-41ad-89f8-fc84bd9d659f-f0263f23-4936-4a4e-8c37-828310016668": {
			"path": "generated-edge-simstep-a57499e7-3803-41ad-89f8-fc84bd9d659f-f0263f23-4936-4a4e-8c37-828310016668",
			"fileName": "assertions.js",
			"cellName": "Own Property Flow: Transmit Existence Result",
			"cellId": "f0263f23-4936-4a4e-8c37-828310016668",
			"visible": true,
			"startLine": 1997,
			"endLine": 2000,
			"parentPath": "lib/chai/core/assertions.js"
		},
		"864ab690-d41e-45b6-8c8d-691624634457": {
			"path": "864ab690-d41e-45b6-8c8d-691624634457",
			"cellName": "Keys Assertion\nFlow: Transition\nto New\nScenario",
			"cellId": "864ab690-d41e-45b6-8c8d-691624634457",
			"visible": true,
			"parentCellId": "3b40d2fd-134a-4e51-a482-b1661a48d960"
		},
		"generated-edge-simstep-68bf7b2f-befe-477b-ab65-7aa1ce1ef1f2-864ab690-d41e-45b6-8c8d-691624634457": {
			"path": "generated-edge-simstep-68bf7b2f-befe-477b-ab65-7aa1ce1ef1f2-864ab690-d41e-45b6-8c8d-691624634457",
			"fileName": "assertion.js",
			"cellName": "Keys Assertion Flow: Transition to New Scenario",
			"cellId": "864ab690-d41e-45b6-8c8d-691624634457",
			"visible": true,
			"startLine": 2583,
			"endLine": 2583,
			"parentPath": "lib/chai/assertion.js"
		},
		"6b40f6f8-f5bb-4f00-bdb5-2e8306e4bc90": {
			"path": "6b40f6f8-f5bb-4f00-bdb5-2e8306e4bc90",
			"cellName": "Keys Assertion\nFlow: Retrieve\nActual Keys",
			"cellId": "6b40f6f8-f5bb-4f00-bdb5-2e8306e4bc90",
			"visible": true,
			"parentCellId": "cb2d632b-b1e7-41e2-8642-977653392c81"
		},
		"generated-edge-simstep-544a1bb7-f237-40d2-a73c-40b941cb44c4-6b40f6f8-f5bb-4f00-bdb5-2e8306e4bc90": {
			"path": "generated-edge-simstep-544a1bb7-f237-40d2-a73c-40b941cb44c4-6b40f6f8-f5bb-4f00-bdb5-2e8306e4bc90",
			"fileName": "assertions.js",
			"cellName": "Keys Assertion Flow: Retrieve Actual Keys",
			"cellId": "6b40f6f8-f5bb-4f00-bdb5-2e8306e4bc90",
			"visible": true,
			"startLine": 2503,
			"endLine": 2503,
			"parentPath": "lib/chai/core/assertions.js"
		},
		"8cfff0c7-4a27-436d-8afd-c3cc5c55e206": {
			"path": "8cfff0c7-4a27-436d-8afd-c3cc5c55e206",
			"cellName": "Assert Interface\nFlow: Transition\nto New\nScenario",
			"cellId": "8cfff0c7-4a27-436d-8afd-c3cc5c55e206",
			"visible": true,
			"parentCellId": "3b40d2fd-134a-4e51-a482-b1661a48d960"
		},
		"generated-edge-simstep-e7ddf573-2be2-4827-97b3-60e9d4c9910b-8cfff0c7-4a27-436d-8afd-c3cc5c55e206": {
			"path": "generated-edge-simstep-e7ddf573-2be2-4827-97b3-60e9d4c9910b-8cfff0c7-4a27-436d-8afd-c3cc5c55e206",
			"fileName": "assertions.js",
			"cellName": "Assert Interface Flow: Transition to New Scenario",
			"cellId": "8cfff0c7-4a27-436d-8afd-c3cc5c55e206",
			"visible": true,
			"startLine": 1489,
			"endLine": 1489,
			"parentPath": "lib/chai/core/assertions.js"
		},
		"e3eb933b-c619-452d-ba91-b18a3e8e6c21": {
			"path": "e3eb933b-c619-452d-ba91-b18a3e8e6c21",
			"cellName": "chai.js",
			"cellId": "e3eb933b-c619-452d-ba91-b18a3e8e6c21",
			"visible": true,
			"parentCellId": "1f5c4ae6-1ee0-44d5-af43-2b58776742c5"
		},
		"aca4b2ac-87ec-4d9e-b750-f0d056ff758f": {
			"path": "aca4b2ac-87ec-4d9e-b750-f0d056ff758f",
			"cellName": "addMethod.js",
			"cellId": "aca4b2ac-87ec-4d9e-b750-f0d056ff758f",
			"visible": true,
			"parentCellId": "365dcd1f-e369-4e23-b3b7-84fb25a3fa18"
		},
		"90441f2e-b541-4170-9701-b69c91cafa5d": {
			"path": "90441f2e-b541-4170-9701-b69c91cafa5d",
			"cellName": "Plugin Registration: Invoke `chai.use()` - chai.js:L35-48",
			"cellId": "90441f2e-b541-4170-9701-b69c91cafa5d",
			"visible": true,
			"parentCellId": "e3eb933b-c619-452d-ba91-b18a3e8e6c21"
		},
		"lib/chai.js-simstep-8b98f977-49ce-48d5-b22a-86378a513572": {
			"path": "lib/chai.js-simstep-8b98f977-49ce-48d5-b22a-86378a513572",
			"fileName": "chai.js",
			"wiki": "The process begins when a developer calls `chai.use()` with a plugin function. This function contains the logic to extend Chai's default assertion capabilities.",
			"cellName": "Plugin Registration: Invoke `chai.use()` - chai.js:L35-48",
			"cellId": "90441f2e-b541-4170-9701-b69c91cafa5d",
			"visible": true,
			"startLine": 35,
			"endLine": 48,
			"parentCellId": "e3eb933b-c619-452d-ba91-b18a3e8e6c21",
			"parentPath": "lib/chai.js"
		},
		"447c64cb-e6e2-4cff-a64b-8c0460e81904": {
			"path": "447c64cb-e6e2-4cff-a64b-8c0460e81904",
			"cellName": "Plugin Execution: `use` Invokes Plugin - chai.js:L44",
			"cellId": "447c64cb-e6e2-4cff-a64b-8c0460e81904",
			"visible": true,
			"parentCellId": "e3eb933b-c619-452d-ba91-b18a3e8e6c21"
		},
		"lib/chai.js-simstep-eb0ac5c7-aa37-4d95-af2b-f0b1a55b11d3": {
			"path": "lib/chai.js-simstep-eb0ac5c7-aa37-4d95-af2b-f0b1a55b11d3",
			"fileName": "chai.js",
			"wiki": "The `use` function invokes the provided plugin, passing the `chai` exports and `util` objects as arguments. This gives the plugin access to Chai's core functionalities for extension.",
			"cellName": "Plugin Execution: `use` Invokes Plugin - chai.js:L44",
			"cellId": "447c64cb-e6e2-4cff-a64b-8c0460e81904",
			"visible": true,
			"startLine": 44,
			"endLine": 44,
			"parentCellId": "e3eb933b-c619-452d-ba91-b18a3e8e6c21",
			"parentPath": "lib/chai.js"
		},
		"368b33b2-faaa-4ee1-9226-8a883a702652": {
			"path": "368b33b2-faaa-4ee1-9226-8a883a702652",
			"cellName": "Extension: Plugin adds a Custom Property - assertion.js:L93-96",
			"cellId": "368b33b2-faaa-4ee1-9226-8a883a702652",
			"visible": true,
			"parentCellId": "d6094e8b-04ee-4fd8-ba2c-2dcf2209cd63"
		},
		"lib/chai/assertion.js-simstep-73c3b54f-965e-47c4-a537-f04e5c978305": {
			"path": "lib/chai/assertion.js-simstep-73c3b54f-965e-47c4-a537-f04e5c978305",
			"fileName": "assertion.js",
			"wiki": "Inside the plugin, the developer calls `chai.Assertion.addProperty()` to register a new chainable property. This call delegates to the `util.addProperty` helper.",
			"cellName": "Extension: Plugin adds a Custom Property - assertion.js:L93-96",
			"cellId": "368b33b2-faaa-4ee1-9226-8a883a702652",
			"visible": true,
			"startLine": 93,
			"endLine": 96,
			"parentCellId": "d6094e8b-04ee-4fd8-ba2c-2dcf2209cd63",
			"parentPath": "lib/chai/assertion.js"
		},
		"1b6ddf15-ae7d-43c4-82f7-f9dba5b20e71": {
			"path": "1b6ddf15-ae7d-43c4-82f7-f9dba5b20e71",
			"cellName": "Property Registration: Attach Property to Prototype - addProperty.js:L38-74",
			"cellId": "1b6ddf15-ae7d-43c4-82f7-f9dba5b20e71",
			"visible": true,
			"parentCellId": "c192a443-274d-45d6-acca-463e2a0eb9a6"
		},
		"lib/chai/utils/addProperty.js-simstep-ea57401a-7532-4c9d-8c72-fed963ad0de5": {
			"path": "lib/chai/utils/addProperty.js-simstep-ea57401a-7532-4c9d-8c72-fed963ad0de5",
			"fileName": "addProperty.js",
			"wiki": "The `addProperty` utility uses `Object.defineProperty` to add a new getter property to `Assertion.prototype`. When this property is accessed in an assertion chain, the provided function will be executed.",
			"cellName": "Property Registration: Attach Property to Prototype - addProperty.js:L38-74",
			"cellId": "1b6ddf15-ae7d-43c4-82f7-f9dba5b20e71",
			"visible": true,
			"startLine": 38,
			"endLine": 74,
			"parentCellId": "c192a443-274d-45d6-acca-463e2a0eb9a6",
			"parentPath": "lib/chai/utils/addProperty.js"
		},
		"e5c0ec36-1aca-4726-a72f-3abe6486de6d": {
			"path": "e5c0ec36-1aca-4726-a72f-3abe6486de6d",
			"cellName": "Extension: Plugin adds a Custom Method - assertion.js:L101-104",
			"cellId": "e5c0ec36-1aca-4726-a72f-3abe6486de6d",
			"visible": true,
			"parentCellId": "d6094e8b-04ee-4fd8-ba2c-2dcf2209cd63"
		},
		"lib/chai/assertion.js-simstep-21b1d00d-8dd5-4edd-b619-674d4d947f6c": {
			"path": "lib/chai/assertion.js-simstep-21b1d00d-8dd5-4edd-b619-674d4d947f6c",
			"fileName": "assertion.js",
			"wiki": "The plugin also calls `chai.Assertion.addMethod()` to register a new chainable method. This call delegates to the `util.addMethod` helper.",
			"cellName": "Extension: Plugin adds a Custom Method - assertion.js:L101-104",
			"cellId": "e5c0ec36-1aca-4726-a72f-3abe6486de6d",
			"visible": true,
			"startLine": 101,
			"endLine": 104,
			"parentCellId": "d6094e8b-04ee-4fd8-ba2c-2dcf2209cd63",
			"parentPath": "lib/chai/assertion.js"
		},
		"24c28424-4ad9-42bb-aeb9-4019b6072a1f": {
			"path": "24c28424-4ad9-42bb-aeb9-4019b6072a1f",
			"cellName": "Method Registration: Attach Method to Prototype - addMethod.js:L36-70",
			"cellId": "24c28424-4ad9-42bb-aeb9-4019b6072a1f",
			"visible": true,
			"parentCellId": "aca4b2ac-87ec-4d9e-b750-f0d056ff758f"
		},
		"lib/chai/utils/addMethod.js-simstep-c4a5e2d9-488a-4a05-933b-8986b9c4575f": {
			"path": "lib/chai/utils/addMethod.js-simstep-c4a5e2d9-488a-4a05-933b-8986b9c4575f",
			"fileName": "addMethod.js",
			"wiki": "The `addMethod` utility creates a wrapper function around the plugin's implementation. This wrapper handles internal Chai logic (like stack trace cleaning) and attaches the new method to `Assertion.prototype`.",
			"cellName": "Method Registration: Attach Method to Prototype - addMethod.js:L36-70",
			"cellId": "24c28424-4ad9-42bb-aeb9-4019b6072a1f",
			"visible": true,
			"startLine": 36,
			"endLine": 70,
			"parentCellId": "aca4b2ac-87ec-4d9e-b750-f0d056ff758f",
			"parentPath": "lib/chai/utils/addMethod.js"
		},
		"5a48a5d6-6068-4649-848f-6e12bc2b0806": {
			"path": "5a48a5d6-6068-4649-848f-6e12bc2b0806",
			"cellName": "Usage: Developer Uses Custom Assertion - addProperty.js:L43-68",
			"cellId": "5a48a5d6-6068-4649-848f-6e12bc2b0806",
			"visible": true,
			"parentCellId": "c192a443-274d-45d6-acca-463e2a0eb9a6"
		},
		"lib/chai/utils/addProperty.js-simstep-6423490d-72d3-487f-b300-7c8847781040": {
			"path": "lib/chai/utils/addProperty.js-simstep-6423490d-72d3-487f-b300-7c8847781040",
			"fileName": "addProperty.js",
			"wiki": "With the plugin registered, the developer can now use the custom property (`.thing`) and method (`.beAThing()`) in their tests. Accessing `.thing` triggers the getter, and calling `.beAThing()` executes the method, both running the custom logic defined in the plugin.",
			"cellName": "Usage: Developer Uses Custom Assertion - addProperty.js:L43-68",
			"cellId": "5a48a5d6-6068-4649-848f-6e12bc2b0806",
			"visible": true,
			"startLine": 43,
			"endLine": 68,
			"parentCellId": "c192a443-274d-45d6-acca-463e2a0eb9a6",
			"parentPath": "lib/chai/utils/addProperty.js"
		},
		"8a3b6945-9d4b-49fc-8bb6-59b29dfc7aa9": {
			"path": "8a3b6945-9d4b-49fc-8bb6-59b29dfc7aa9",
			"cellName": "Data Transmission:\nPlugin Function\nto `use`",
			"cellId": "8a3b6945-9d4b-49fc-8bb6-59b29dfc7aa9",
			"visible": true,
			"parentCellId": "e3eb933b-c619-452d-ba91-b18a3e8e6c21"
		},
		"generated-edge-simstep-edc31929-bf66-47ce-870c-bec1ab2c6bce-8a3b6945-9d4b-49fc-8bb6-59b29dfc7aa9": {
			"path": "generated-edge-simstep-edc31929-bf66-47ce-870c-bec1ab2c6bce-8a3b6945-9d4b-49fc-8bb6-59b29dfc7aa9",
			"fileName": "chai.js",
			"cellName": "Data Transmission: Plugin Function to `use`",
			"cellId": "8a3b6945-9d4b-49fc-8bb6-59b29dfc7aa9",
			"visible": true,
			"startLine": 35,
			"endLine": 35,
			"parentPath": "lib/chai.js"
		},
		"1621b7b4-3b93-479a-a77a-a23d3be66442": {
			"path": "1621b7b4-3b93-479a-a77a-a23d3be66442",
			"cellName": "Data Transmission:\nChai Internals\nto Plugin",
			"cellId": "1621b7b4-3b93-479a-a77a-a23d3be66442",
			"visible": true,
			"parentCellId": "1f5c4ae6-1ee0-44d5-af43-2b58776742c5"
		},
		"generated-edge-simstep-c3516169-6418-4233-a65e-f58ec1772e88-1621b7b4-3b93-479a-a77a-a23d3be66442": {
			"path": "generated-edge-simstep-c3516169-6418-4233-a65e-f58ec1772e88-1621b7b4-3b93-479a-a77a-a23d3be66442",
			"fileName": "chai.js",
			"cellName": "Data Transmission: Chai Internals to Plugin",
			"cellId": "1621b7b4-3b93-479a-a77a-a23d3be66442",
			"visible": true,
			"startLine": 44,
			"endLine": 44,
			"parentPath": "lib/chai.js"
		},
		"87fa4415-4367-42b3-ab84-d91f0e8fa5e3": {
			"path": "87fa4415-4367-42b3-ab84-d91f0e8fa5e3",
			"cellName": "Data Transmission:\nProperty Details\nto Utility",
			"cellId": "87fa4415-4367-42b3-ab84-d91f0e8fa5e3",
			"visible": true,
			"parentCellId": "3b40d2fd-134a-4e51-a482-b1661a48d960"
		},
		"generated-edge-simstep-bc62fe32-e423-4341-92f6-aad24da37d66-87fa4415-4367-42b3-ab84-d91f0e8fa5e3": {
			"path": "generated-edge-simstep-bc62fe32-e423-4341-92f6-aad24da37d66-87fa4415-4367-42b3-ab84-d91f0e8fa5e3",
			"fileName": "assertion.js",
			"cellName": "Data Transmission: Property Details to Utility",
			"cellId": "87fa4415-4367-42b3-ab84-d91f0e8fa5e3",
			"visible": true,
			"startLine": 94,
			"endLine": 94,
			"parentPath": "lib/chai/assertion.js"
		},
		"1dfda9d3-2a94-43f7-a794-98e6f34e7c13": {
			"path": "1dfda9d3-2a94-43f7-a794-98e6f34e7c13",
			"cellName": "Data Flow:\n`Assertion.prototype` is\nMutated",
			"cellId": "1dfda9d3-2a94-43f7-a794-98e6f34e7c13",
			"visible": true,
			"parentCellId": "3b40d2fd-134a-4e51-a482-b1661a48d960"
		},
		"generated-edge-simstep-09a523a3-d6f7-4e42-b3b8-5b773aeaba2f-1dfda9d3-2a94-43f7-a794-98e6f34e7c13": {
			"path": "generated-edge-simstep-09a523a3-d6f7-4e42-b3b8-5b773aeaba2f-1dfda9d3-2a94-43f7-a794-98e6f34e7c13",
			"fileName": "addProperty.js",
			"cellName": "Data Flow: `Assertion.prototype` is Mutated",
			"cellId": "1dfda9d3-2a94-43f7-a794-98e6f34e7c13",
			"visible": true,
			"startLine": 41,
			"endLine": 71,
			"parentPath": "lib/chai/utils/addProperty.js"
		},
		"b39cb986-0d94-4f8f-9094-c7d5a64de62c": {
			"path": "b39cb986-0d94-4f8f-9094-c7d5a64de62c",
			"cellName": "Data Transmission:\nMethod Details\nto Utility",
			"cellId": "b39cb986-0d94-4f8f-9094-c7d5a64de62c",
			"visible": true,
			"parentCellId": "3b40d2fd-134a-4e51-a482-b1661a48d960"
		},
		"generated-edge-simstep-de96bc1a-90ea-40e2-9cf4-aa1e3c34568c-b39cb986-0d94-4f8f-9094-c7d5a64de62c": {
			"path": "generated-edge-simstep-de96bc1a-90ea-40e2-9cf4-aa1e3c34568c-b39cb986-0d94-4f8f-9094-c7d5a64de62c",
			"fileName": "assertion.js",
			"cellName": "Data Transmission: Method Details to Utility",
			"cellId": "b39cb986-0d94-4f8f-9094-c7d5a64de62c",
			"visible": true,
			"startLine": 102,
			"endLine": 102,
			"parentPath": "lib/chai/assertion.js"
		},
		"29db87a9-9d2e-47e3-9fe9-0de786e801d1": {
			"path": "29db87a9-9d2e-47e3-9fe9-0de786e801d1",
			"cellName": "Data Flow:\n`Assertion.prototype` is\nMutated",
			"cellId": "29db87a9-9d2e-47e3-9fe9-0de786e801d1",
			"visible": true,
			"parentCellId": "365dcd1f-e369-4e23-b3b7-84fb25a3fa18"
		},
		"generated-edge-simstep-dad9c9fc-2d93-4476-b66f-c6fc79c0cf6b-29db87a9-9d2e-47e3-9fe9-0de786e801d1": {
			"path": "generated-edge-simstep-dad9c9fc-2d93-4476-b66f-c6fc79c0cf6b-29db87a9-9d2e-47e3-9fe9-0de786e801d1",
			"fileName": "addMethod.js",
			"cellName": "Data Flow: `Assertion.prototype` is Mutated",
			"cellId": "29db87a9-9d2e-47e3-9fe9-0de786e801d1",
			"visible": true,
			"startLine": 66,
			"endLine": 66,
			"parentPath": "lib/chai/utils/addMethod.js"
		},
		"1899beed-01ef-4c54-b347-1cedacb7ae6b": {
			"path": "1899beed-01ef-4c54-b347-1cedacb7ae6b",
			"cellName": "Flow 1: Start - `assert.throws` is called - assert.js:L1993-2000",
			"cellId": "1899beed-01ef-4c54-b347-1cedacb7ae6b",
			"visible": true,
			"parentCellId": "1ddd4839-b3e2-43af-8b5e-9b585c757bb7"
		},
		"lib/chai/interface/assert.js-simstep-9b37ec8b-ac85-4dfa-ae56-fba8c09fbd46": {
			"path": "lib/chai/interface/assert.js-simstep-9b37ec8b-ac85-4dfa-ae56-fba8c09fbd46",
			"fileName": "assert.js",
			"wiki": "The user calls `assert.throws` to verify that a function (`badFn`) throws an error. The `assert` interface creates a new `Assertion` object and invokes the `.throw()` method on it, passing the expected error type and message fragment.",
			"cellName": "Flow 1: Start - `assert.throws` is called - assert.js:L1993-2000",
			"cellId": "1899beed-01ef-4c54-b347-1cedacb7ae6b",
			"visible": true,
			"startLine": 1993,
			"endLine": 2000,
			"parentCellId": "1ddd4839-b3e2-43af-8b5e-9b585c757bb7",
			"parentPath": "lib/chai/interface/assert.js"
		},
		"64a3623b-42f0-49bf-a81f-0e491a6a4740": {
			"path": "64a3623b-42f0-49bf-a81f-0e491a6a4740",
			"cellName": "Flow 1: Core logic executes function and catches error - assertions.js:L2769-2774",
			"cellId": "64a3623b-42f0-49bf-a81f-0e491a6a4740",
			"visible": true,
			"parentCellId": "cb2d632b-b1e7-41e2-8642-977653392c81"
		},
		"lib/chai/core/assertions.js-simstep-9d7a6f18-acf6-4d81-bbb5-1fa24e9ba738": {
			"path": "lib/chai/core/assertions.js-simstep-9d7a6f18-acf6-4d81-bbb5-1fa24e9ba738",
			"fileName": "assertions.js",
			"wiki": "The `assertThrows` method executes the target function within a `try...catch` block. The function throws an error as expected, which is caught and stored for validation.",
			"cellName": "Flow 1: Core logic executes function and catches error - assertions.js:L2769-2774",
			"cellId": "64a3623b-42f0-49bf-a81f-0e491a6a4740",
			"visible": true,
			"startLine": 2769,
			"endLine": 2774,
			"parentCellId": "cb2d632b-b1e7-41e2-8642-977653392c81",
			"parentPath": "lib/chai/core/assertions.js"
		},
		"e3b13ece-10f4-48f0-8bb2-5ab92d7af2fa": {
			"path": "e3b13ece-10f4-48f0-8bb2-5ab92d7af2fa",
			"cellName": "Flow 1: End - Assertion passes and returns error - assertions.js:L2828-2920",
			"cellId": "e3b13ece-10f4-48f0-8bb2-5ab92d7af2fa",
			"visible": true,
			"parentCellId": "cb2d632b-b1e7-41e2-8642-977653392c81"
		},
		"lib/chai/core/assertions.js-simstep-ffd81900-4008-4a58-9dce-7234a88a5806": {
			"path": "lib/chai/core/assertions.js-simstep-ffd81900-4008-4a58-9dce-7234a88a5806",
			"fileName": "assertions.js",
			"wiki": "The validation logic confirms the caught error matches the expected type (`Error`) and its message includes the expected text (`testing`). Since the assertion is successful, no `AssertionError` is thrown. The caught error becomes the new subject of the assertion chain, allowing for further checks like `...throw().with.property('code', 42)`.",
			"cellName": "Flow 1: End - Assertion passes and returns error - assertions.js:L2828-2920",
			"cellId": "e3b13ece-10f4-48f0-8bb2-5ab92d7af2fa",
			"visible": true,
			"startLine": 2828,
			"endLine": 2920,
			"parentCellId": "cb2d632b-b1e7-41e2-8642-977653392c81",
			"parentPath": "lib/chai/core/assertions.js"
		},
		"b01e639f-18ef-4373-b85c-97964c77650e": {
			"path": "b01e639f-18ef-4373-b85c-97964c77650e",
			"cellName": "Flow 2: Start - `assert.doesNotThrow` is called - assert.js:L2033-2041",
			"cellId": "b01e639f-18ef-4373-b85c-97964c77650e",
			"visible": true,
			"parentCellId": "1ddd4839-b3e2-43af-8b5e-9b585c757bb7"
		},
		"lib/chai/interface/assert.js-simstep-75f3e294-cb8a-4f90-b0f0-f7afffcf88bd": {
			"path": "lib/chai/interface/assert.js-simstep-75f3e294-cb8a-4f90-b0f0-f7afffcf88bd",
			"fileName": "assert.js",
			"wiki": "The user calls `assert.doesNotThrow` to verify a function (`goodFn`) runs without errors. This interface method creates a new `Assertion`, sets the negation flag (`.not`), and invokes the `.throw()` method.",
			"cellName": "Flow 2: Start - `assert.doesNotThrow` is called - assert.js:L2033-2041",
			"cellId": "b01e639f-18ef-4373-b85c-97964c77650e",
			"visible": true,
			"startLine": 2033,
			"endLine": 2041,
			"parentCellId": "1ddd4839-b3e2-43af-8b5e-9b585c757bb7",
			"parentPath": "lib/chai/interface/assert.js"
		},
		"52112520-8bc4-4780-b274-db60aa7341c2": {
			"path": "52112520-8bc4-4780-b274-db60aa7341c2",
			"cellName": "Flow 2: Core logic executes function successfully - assertions.js:L2769-2774",
			"cellId": "52112520-8bc4-4780-b274-db60aa7341c2",
			"visible": true,
			"parentCellId": "cb2d632b-b1e7-41e2-8642-977653392c81"
		},
		"lib/chai/core/assertions.js-simstep-207dd1d1-9c91-469f-a2c3-df6b75e228c0": {
			"path": "lib/chai/core/assertions.js-simstep-207dd1d1-9c91-469f-a2c3-df6b75e228c0",
			"fileName": "assertions.js",
			"wiki": "The `assertThrows` method executes the target function (`goodFn`) in a `try...catch` block. The function completes its execution without throwing any errors.",
			"cellName": "Flow 2: Core logic executes function successfully - assertions.js:L2769-2774",
			"cellId": "52112520-8bc4-4780-b274-db60aa7341c2",
			"visible": true,
			"startLine": 2769,
			"endLine": 2774,
			"parentCellId": "cb2d632b-b1e7-41e2-8642-977653392c81",
			"parentPath": "lib/chai/core/assertions.js"
		},
		"c57f08a5-f7e3-4c59-bc88-899d76966cad": {
			"path": "c57f08a5-f7e3-4c59-bc88-899d76966cad",
			"cellName": "Flow 2: End - Negated assertion passes - assertions.js:L2820-2825",
			"cellId": "c57f08a5-f7e3-4c59-bc88-899d76966cad",
			"visible": true,
			"parentCellId": "cb2d632b-b1e7-41e2-8642-977653392c81"
		},
		"lib/chai/core/assertions.js-simstep-672dc4b9-7e13-4359-a66c-d5f1f870d184": {
			"path": "lib/chai/core/assertions.js-simstep-672dc4b9-7e13-4359-a66c-d5f1f870d184",
			"fileName": "assertions.js",
			"wiki": "The validation logic checks if an error was thrown. Since `errorWasThrown` is `false` and the `negate` flag is `true`, the condition `!errorWasThrown` passes. The assertion is successful, and the method completes without throwing an `AssertionError`.",
			"cellName": "Flow 2: End - Negated assertion passes - assertions.js:L2820-2825",
			"cellId": "c57f08a5-f7e3-4c59-bc88-899d76966cad",
			"visible": true,
			"startLine": 2820,
			"endLine": 2825,
			"parentCellId": "cb2d632b-b1e7-41e2-8642-977653392c81",
			"parentPath": "lib/chai/core/assertions.js"
		},
		"6419a1c1-4003-4f53-a1f5-2f40b7c0fa4f": {
			"path": "6419a1c1-4003-4f53-a1f5-2f40b7c0fa4f",
			"cellName": "Flow 3 (Failure): `assert.throws` is called with a non-throwing function - assert.js:L1993-2000",
			"cellId": "6419a1c1-4003-4f53-a1f5-2f40b7c0fa4f",
			"visible": true,
			"parentCellId": "1ddd4839-b3e2-43af-8b5e-9b585c757bb7"
		},
		"lib/chai/interface/assert.js-simstep-288bceb1-84ea-43f8-9be0-81b6da69a036": {
			"path": "lib/chai/interface/assert.js-simstep-288bceb1-84ea-43f8-9be0-81b6da69a036",
			"fileName": "assert.js",
			"wiki": "The user incorrectly asserts that `goodFn` will throw an error. The `assert.throws` interface creates an `Assertion` object to check for a thrown error.",
			"cellName": "Flow 3 (Failure): `assert.throws` is called with a non-throwing function - assert.js:L1993-2000",
			"cellId": "6419a1c1-4003-4f53-a1f5-2f40b7c0fa4f",
			"visible": true,
			"startLine": 1993,
			"endLine": 2000,
			"parentCellId": "1ddd4839-b3e2-43af-8b5e-9b585c757bb7",
			"parentPath": "lib/chai/interface/assert.js"
		},
		"354859c5-3779-42f5-acdd-6bc7cc000499": {
			"path": "354859c5-3779-42f5-acdd-6bc7cc000499",
			"cellName": "Flow 3 (Failure): Core logic finds no error - assertions.js:L2769-2774",
			"cellId": "354859c5-3779-42f5-acdd-6bc7cc000499",
			"visible": true,
			"parentCellId": "cb2d632b-b1e7-41e2-8642-977653392c81"
		},
		"lib/chai/core/assertions.js-simstep-9f36bb1a-c41c-4b43-8d3f-6308d788fdb0": {
			"path": "lib/chai/core/assertions.js-simstep-9f36bb1a-c41c-4b43-8d3f-6308d788fdb0",
			"fileName": "assertions.js",
			"wiki": "`assertThrows` executes `goodFn` in a `try...catch` block, but the function completes normally and no error is caught.",
			"cellName": "Flow 3 (Failure): Core logic finds no error - assertions.js:L2769-2774",
			"cellId": "354859c5-3779-42f5-acdd-6bc7cc000499",
			"visible": true,
			"startLine": 2769,
			"endLine": 2774,
			"parentCellId": "cb2d632b-b1e7-41e2-8642-977653392c81",
			"parentPath": "lib/chai/core/assertions.js"
		},
		"1af6ee46-5ea3-408a-9022-e8633ccb7410": {
			"path": "1af6ee46-5ea3-408a-9022-e8633ccb7410",
			"cellName": "Flow 3 (Failure): `Assertion.prototype.assert` throws `AssertionError` - assertion.js:L163-184",
			"cellId": "1af6ee46-5ea3-408a-9022-e8633ccb7410",
			"visible": true,
			"parentCellId": "d6094e8b-04ee-4fd8-ba2c-2dcf2209cd63"
		},
		"lib/chai/assertion.js-simstep-9b790ebe-a0d9-402a-b578-afb3a141bf29": {
			"path": "lib/chai/assertion.js-simstep-9b790ebe-a0d9-402a-b578-afb3a141bf29",
			"fileName": "assertion.js",
			"wiki": "The central `assert` method receives a failing expression (`ok` is false). It constructs a new `AssertionError` with a detailed message and throws it, causing the test to fail.",
			"cellName": "Flow 3 (Failure): `Assertion.prototype.assert` throws `AssertionError` - assertion.js:L163-184",
			"cellId": "1af6ee46-5ea3-408a-9022-e8633ccb7410",
			"visible": true,
			"startLine": 163,
			"endLine": 184,
			"parentCellId": "d6094e8b-04ee-4fd8-ba2c-2dcf2209cd63",
			"parentPath": "lib/chai/assertion.js"
		},
		"62849151-9f8d-4a3c-b751-42113f3f1ee8": {
			"path": "62849151-9f8d-4a3c-b751-42113f3f1ee8",
			"cellName": "Flow 1:\nAssertion object\npassed to\ncore logic",
			"cellId": "62849151-9f8d-4a3c-b751-42113f3f1ee8",
			"visible": true,
			"parentCellId": "3b40d2fd-134a-4e51-a482-b1661a48d960"
		},
		"generated-edge-simstep-5b098e9f-3135-4349-85e4-d560dbf5c6e9-62849151-9f8d-4a3c-b751-42113f3f1ee8": {
			"path": "generated-edge-simstep-5b098e9f-3135-4349-85e4-d560dbf5c6e9-62849151-9f8d-4a3c-b751-42113f3f1ee8",
			"fileName": "assert.js",
			"cellName": "Flow 1: Assertion object passed to core logic",
			"cellId": "62849151-9f8d-4a3c-b751-42113f3f1ee8",
			"visible": true,
			"startLine": 1997,
			"endLine": 1997,
			"parentPath": "lib/chai/interface/assert.js"
		},
		"a50c1de7-c7d0-4915-a745-ebdd83a44c65": {
			"path": "a50c1de7-c7d0-4915-a745-ebdd83a44c65",
			"cellName": "Flow 1:\nCaught error\nis passed\nfor validation",
			"cellId": "a50c1de7-c7d0-4915-a745-ebdd83a44c65",
			"visible": true,
			"parentCellId": "cb2d632b-b1e7-41e2-8642-977653392c81"
		},
		"generated-edge-simstep-c8656bce-1b49-4380-a902-bd4fa75726ac-a50c1de7-c7d0-4915-a745-ebdd83a44c65": {
			"path": "generated-edge-simstep-c8656bce-1b49-4380-a902-bd4fa75726ac-a50c1de7-c7d0-4915-a745-ebdd83a44c65",
			"fileName": "assertions.js",
			"cellName": "Flow 1: Caught error is passed for validation",
			"cellId": "a50c1de7-c7d0-4915-a745-ebdd83a44c65",
			"visible": true,
			"startLine": 2773,
			"endLine": 2773,
			"parentPath": "lib/chai/core/assertions.js"
		},
		"fd7021ad-b9a7-4df1-b8da-d76bdd0c722b": {
			"path": "fd7021ad-b9a7-4df1-b8da-d76bdd0c722b",
			"cellName": "Flow 2:\nAssertion object\npassed to\ncore logic",
			"cellId": "fd7021ad-b9a7-4df1-b8da-d76bdd0c722b",
			"visible": true,
			"parentCellId": "3b40d2fd-134a-4e51-a482-b1661a48d960"
		},
		"generated-edge-simstep-e438e7b2-83f3-4600-a929-eca56b8b721b-fd7021ad-b9a7-4df1-b8da-d76bdd0c722b": {
			"path": "generated-edge-simstep-e438e7b2-83f3-4600-a929-eca56b8b721b-fd7021ad-b9a7-4df1-b8da-d76bdd0c722b",
			"fileName": "assert.js",
			"cellName": "Flow 2: Assertion object passed to core logic",
			"cellId": "fd7021ad-b9a7-4df1-b8da-d76bdd0c722b",
			"visible": true,
			"startLine": 2039,
			"endLine": 2039,
			"parentPath": "lib/chai/interface/assert.js"
		},
		"1100bfcd-96f6-428e-9cb4-9f299e01c268": {
			"path": "1100bfcd-96f6-428e-9cb4-9f299e01c268",
			"cellName": "Flow 2:\nResult (no\nerror) passed\nfor validation",
			"cellId": "1100bfcd-96f6-428e-9cb4-9f299e01c268",
			"visible": true,
			"parentCellId": "cb2d632b-b1e7-41e2-8642-977653392c81"
		},
		"generated-edge-simstep-9ee866bf-f609-46b2-be10-3931ed9f9375-1100bfcd-96f6-428e-9cb4-9f299e01c268": {
			"path": "generated-edge-simstep-9ee866bf-f609-46b2-be10-3931ed9f9375-1100bfcd-96f6-428e-9cb4-9f299e01c268",
			"fileName": "assertions.js",
			"cellName": "Flow 2: Result (no error) passed for validation",
			"cellId": "1100bfcd-96f6-428e-9cb4-9f299e01c268",
			"visible": true,
			"startLine": 2774,
			"endLine": 2774,
			"parentPath": "lib/chai/core/assertions.js"
		},
		"9416e139-1247-48c5-ae43-7d7baa4319fa": {
			"path": "9416e139-1247-48c5-ae43-7d7baa4319fa",
			"cellName": "Flow 3\n(Failure): Assertion\nobject passed\nto core\nlogic",
			"cellId": "9416e139-1247-48c5-ae43-7d7baa4319fa",
			"visible": true,
			"parentCellId": "3b40d2fd-134a-4e51-a482-b1661a48d960"
		},
		"generated-edge-simstep-c07d18ab-c07f-4fd2-b23e-759556458c7a-9416e139-1247-48c5-ae43-7d7baa4319fa": {
			"path": "generated-edge-simstep-c07d18ab-c07f-4fd2-b23e-759556458c7a-9416e139-1247-48c5-ae43-7d7baa4319fa",
			"fileName": "assert.js",
			"cellName": "Flow 3 (Failure): Assertion object passed to core logic",
			"cellId": "9416e139-1247-48c5-ae43-7d7baa4319fa",
			"visible": true,
			"startLine": 1997,
			"endLine": 1997,
			"parentPath": "lib/chai/interface/assert.js"
		},
		"aab0a4c6-30a9-4fc4-b321-5dddd67bc636": {
			"path": "aab0a4c6-30a9-4fc4-b321-5dddd67bc636",
			"cellName": "Flow 3\n(Failure): Failure\ncondition passed\nto `this.assert`",
			"cellId": "aab0a4c6-30a9-4fc4-b321-5dddd67bc636",
			"visible": true,
			"parentCellId": "3b40d2fd-134a-4e51-a482-b1661a48d960"
		},
		"generated-edge-simstep-87339037-b5e5-4d1f-9033-964ef9471ffe-aab0a4c6-30a9-4fc4-b321-5dddd67bc636": {
			"path": "generated-edge-simstep-87339037-b5e5-4d1f-9033-964ef9471ffe-aab0a4c6-30a9-4fc4-b321-5dddd67bc636",
			"fileName": "assertions.js",
			"cellName": "Flow 3 (Failure): Failure condition passed to `this.assert`",
			"cellId": "aab0a4c6-30a9-4fc4-b321-5dddd67bc636",
			"visible": true,
			"startLine": 2820,
			"endLine": 2825,
			"parentPath": "lib/chai/core/assertions.js"
		},
		"9dea3048-df0f-44e5-9e90-43986b3487e6": {
			"path": "9dea3048-df0f-44e5-9e90-43986b3487e6",
			"cellName": "User Assertion: Check for Inclusion - assertions.js:L519-522",
			"cellId": "9dea3048-df0f-44e5-9e90-43986b3487e6",
			"visible": true,
			"parentCellId": "cb2d632b-b1e7-41e2-8642-977653392c81"
		},
		"lib/chai/core/assertions.js-simstep-ee854269-5b2d-4d59-a901-c6adae36606e": {
			"path": "lib/chai/core/assertions.js-simstep-ee854269-5b2d-4d59-a901-c6adae36606e",
			"fileName": "assertions.js",
			"wiki": "A test is written to assert that an array contains a specific value using `expect(...).to.include(...)`. This is the entry point for the `include` assertion.",
			"cellName": "User Assertion: Check for Inclusion - assertions.js:L519-522",
			"cellId": "9dea3048-df0f-44e5-9e90-43986b3487e6",
			"visible": true,
			"startLine": 519,
			"endLine": 522,
			"parentCellId": "cb2d632b-b1e7-41e2-8642-977653392c81",
			"parentPath": "lib/chai/core/assertions.js"
		},
		"618aefbe-9477-42a6-a6d7-d5f60f805f29": {
			"path": "618aefbe-9477-42a6-a6d7-d5f60f805f29",
			"cellName": "`include` Assertion Logic - assertions.js:L570-575",
			"cellId": "618aefbe-9477-42a6-a6d7-d5f60f805f29",
			"visible": true,
			"parentCellId": "cb2d632b-b1e7-41e2-8642-977653392c81"
		},
		"lib/chai/core/assertions.js-simstep-abd6c2e9-0410-4f60-aa65-ae91e5f8608b": {
			"path": "lib/chai/core/assertions.js-simstep-abd6c2e9-0410-4f60-aa65-ae91e5f8608b",
			"fileName": "assertions.js",
			"wiki": "The `include` method checks the type of the target object. Since it's an array, it uses `indexOf` for strict equality to see if the value is present.",
			"cellName": "`include` Assertion Logic - assertions.js:L570-575",
			"cellId": "618aefbe-9477-42a6-a6d7-d5f60f805f29",
			"visible": true,
			"startLine": 570,
			"endLine": 575,
			"parentCellId": "cb2d632b-b1e7-41e2-8642-977653392c81",
			"parentPath": "lib/chai/core/assertions.js"
		},
		"1ac5073d-fc9a-43ed-914f-9da183d33cf4": {
			"path": "1ac5073d-fc9a-43ed-914f-9da183d33cf4",
			"cellName": "Assertion Succeeded - assertion.js:L178-186",
			"cellId": "1ac5073d-fc9a-43ed-914f-9da183d33cf4",
			"visible": true,
			"parentCellId": "d6094e8b-04ee-4fd8-ba2c-2dcf2209cd63"
		},
		"lib/chai/assertion.js-simstep-1cd9a38f-377c-471b-a498-826b8fe7af3e": {
			"path": "lib/chai/assertion.js-simstep-1cd9a38f-377c-471b-a498-826b8fe7af3e",
			"fileName": "assertion.js",
			"wiki": "The core `assert` method receives a successful result. Since the assertion passed, no error is thrown, and the test runner continues executing subsequent tests.",
			"cellName": "Assertion Succeeded - assertion.js:L178-186",
			"cellId": "1ac5073d-fc9a-43ed-914f-9da183d33cf4",
			"visible": true,
			"startLine": 178,
			"endLine": 186,
			"parentCellId": "d6094e8b-04ee-4fd8-ba2c-2dcf2209cd63",
			"parentPath": "lib/chai/assertion.js"
		},
		"313ceff3-447c-4c19-99e8-5a7ec009b617": {
			"path": "313ceff3-447c-4c19-99e8-5a7ec009b617",
			"cellName": "User Assertion: Check for Same Members - assertions.js:L3277",
			"cellId": "313ceff3-447c-4c19-99e8-5a7ec009b617",
			"visible": true,
			"parentCellId": "cb2d632b-b1e7-41e2-8642-977653392c81"
		},
		"lib/chai/core/assertions.js-simstep-b490ed32-3851-4515-9583-e1f59a78b99e": {
			"path": "lib/chai/core/assertions.js-simstep-b490ed32-3851-4515-9583-e1f59a78b99e",
			"fileName": "assertions.js",
			"wiki": "A test is written to assert that an array has the same members as another, regardless of order. Example: `expect([5, 4]).to.have.members([4, 5])`.",
			"cellName": "User Assertion: Check for Same Members - assertions.js:L3277",
			"cellId": "313ceff3-447c-4c19-99e8-5a7ec009b617",
			"visible": true,
			"startLine": 3277,
			"endLine": 3277,
			"parentCellId": "cb2d632b-b1e7-41e2-8642-977653392c81",
			"parentPath": "lib/chai/core/assertions.js"
		},
		"f6a060df-b7b2-4ddf-a5d6-ecc8fc05573e": {
			"path": "f6a060df-b7b2-4ddf-a5d6-ecc8fc05573e",
			"cellName": "`members` Assertion Logic - assertions.js:L3311-3323",
			"cellId": "f6a060df-b7b2-4ddf-a5d6-ecc8fc05573e",
			"visible": true,
			"parentCellId": "cb2d632b-b1e7-41e2-8642-977653392c81"
		},
		"lib/chai/core/assertions.js-simstep-07078074-9216-43ba-b37a-c50abb096f98": {
			"path": "lib/chai/core/assertions.js-simstep-07078074-9216-43ba-b37a-c50abb096f98",
			"fileName": "assertions.js",
			"wiki": "The `members` method compares the two arrays. By default, it checks for the same members without considering order, allowing for differences in sequence.",
			"cellName": "`members` Assertion Logic - assertions.js:L3311-3323",
			"cellId": "f6a060df-b7b2-4ddf-a5d6-ecc8fc05573e",
			"visible": true,
			"startLine": 3311,
			"endLine": 3323,
			"parentCellId": "cb2d632b-b1e7-41e2-8642-977653392c81",
			"parentPath": "lib/chai/core/assertions.js"
		},
		"a37a5560-1ee5-4f31-bd53-fbbfd3d5301d": {
			"path": "a37a5560-1ee5-4f31-bd53-fbbfd3d5301d",
			"cellName": "Assertion Succeeded - assertion.js:L178-186",
			"cellId": "a37a5560-1ee5-4f31-bd53-fbbfd3d5301d",
			"visible": true,
			"parentCellId": "d6094e8b-04ee-4fd8-ba2c-2dcf2209cd63"
		},
		"lib/chai/assertion.js-simstep-0c16e099-0844-4e09-85c6-61500c93bffa": {
			"path": "lib/chai/assertion.js-simstep-0c16e099-0844-4e09-85c6-61500c93bffa",
			"fileName": "assertion.js",
			"wiki": "The core `assert` method receives a successful result. No error is thrown, and the test runner continues execution.",
			"cellName": "Assertion Succeeded - assertion.js:L178-186",
			"cellId": "a37a5560-1ee5-4f31-bd53-fbbfd3d5301d",
			"visible": true,
			"startLine": 178,
			"endLine": 186,
			"parentCellId": "d6094e8b-04ee-4fd8-ba2c-2dcf2209cd63",
			"parentPath": "lib/chai/assertion.js"
		},
		"285d4dde-717f-4ab2-87f1-694b42c51e9e": {
			"path": "285d4dde-717f-4ab2-87f1-694b42c51e9e",
			"cellName": "User Assertion: Enable Ordered Check - assertions.js:L206-209",
			"cellId": "285d4dde-717f-4ab2-87f1-694b42c51e9e",
			"visible": true,
			"parentCellId": "cb2d632b-b1e7-41e2-8642-977653392c81"
		},
		"lib/chai/core/assertions.js-simstep-880afa8e-d530-474a-b77d-25f76dae4c20": {
			"path": "lib/chai/core/assertions.js-simstep-880afa8e-d530-474a-b77d-25f76dae4c20",
			"fileName": "assertions.js",
			"wiki": "The `.ordered` chainable property is used before `.members()` to set a flag that enforces an order-sensitive comparison.",
			"cellName": "User Assertion: Enable Ordered Check - assertions.js:L206-209",
			"cellId": "285d4dde-717f-4ab2-87f1-694b42c51e9e",
			"visible": true,
			"startLine": 206,
			"endLine": 209,
			"parentCellId": "cb2d632b-b1e7-41e2-8642-977653392c81",
			"parentPath": "lib/chai/core/assertions.js"
		},
		"5f37baa4-b3d9-4f39-ad43-014a9bb088b4": {
			"path": "5f37baa4-b3d9-4f39-ad43-014a9bb088b4",
			"cellName": "`members` Called with Order Enforcement - assertions.js:L3327-3331",
			"cellId": "5f37baa4-b3d9-4f39-ad43-014a9bb088b4",
			"visible": true,
			"parentCellId": "cb2d632b-b1e7-41e2-8642-977653392c81"
		},
		"lib/chai/core/assertions.js-simstep-d4c4d6ee-ef26-4698-bd8f-9970a2ea15de": {
			"path": "lib/chai/core/assertions.js-simstep-d4c4d6ee-ef26-4698-bd8f-9970a2ea15de",
			"fileName": "assertions.js",
			"wiki": "The `.members()` method is now called. Inside, it detects the `ordered` flag and performs a direct, element-by-element comparison of the two arrays. Example: `expect([1, 2, 3]).to.have.ordered.members([1, 2, 3])`.",
			"cellName": "`members` Called with Order Enforcement - assertions.js:L3327-3331",
			"cellId": "5f37baa4-b3d9-4f39-ad43-014a9bb088b4",
			"visible": true,
			"startLine": 3327,
			"endLine": 3331,
			"parentCellId": "cb2d632b-b1e7-41e2-8642-977653392c81",
			"parentPath": "lib/chai/core/assertions.js"
		},
		"5cad8e76-7113-4346-8782-4158978c317b": {
			"path": "5cad8e76-7113-4346-8782-4158978c317b",
			"cellName": "Assertion Succeeded - assertion.js:L178-186",
			"cellId": "5cad8e76-7113-4346-8782-4158978c317b",
			"visible": true,
			"parentCellId": "d6094e8b-04ee-4fd8-ba2c-2dcf2209cd63"
		},
		"lib/chai/assertion.js-simstep-bd045f3b-60a4-474b-a89c-b03fbaf0fcc9": {
			"path": "lib/chai/assertion.js-simstep-bd045f3b-60a4-474b-a89c-b03fbaf0fcc9",
			"fileName": "assertion.js",
			"wiki": "The core `assert` method receives a successful result. The test passes and the test runner continues execution.",
			"cellName": "Assertion Succeeded - assertion.js:L178-186",
			"cellId": "5cad8e76-7113-4346-8782-4158978c317b",
			"visible": true,
			"startLine": 178,
			"endLine": 186,
			"parentCellId": "d6094e8b-04ee-4fd8-ba2c-2dcf2209cd63",
			"parentPath": "lib/chai/assertion.js"
		},
		"176e2036-2d1e-4abd-a885-29b414e3aaf7": {
			"path": "176e2036-2d1e-4abd-a885-29b414e3aaf7",
			"cellName": "User Assertion: Check Length - assertions.js:L2259-2262",
			"cellId": "176e2036-2d1e-4abd-a885-29b414e3aaf7",
			"visible": true,
			"parentCellId": "cb2d632b-b1e7-41e2-8642-977653392c81"
		},
		"lib/chai/core/assertions.js-simstep-9d0b52b3-5f2d-4216-ba5e-b6e80f3aa801": {
			"path": "lib/chai/core/assertions.js-simstep-9d0b52b3-5f2d-4216-ba5e-b6e80f3aa801",
			"fileName": "assertions.js",
			"wiki": "A test is written to assert that a string, array, Set, or Map has a specific length or size. Example: `expect('test').to.have.lengthOf(4)`.",
			"cellName": "User Assertion: Check Length - assertions.js:L2259-2262",
			"cellId": "176e2036-2d1e-4abd-a885-29b414e3aaf7",
			"visible": true,
			"startLine": 2259,
			"endLine": 2262,
			"parentCellId": "cb2d632b-b1e7-41e2-8642-977653392c81",
			"parentPath": "lib/chai/core/assertions.js"
		},
		"ce702a01-133b-434c-813b-e89a1811b230": {
			"path": "ce702a01-133b-434c-813b-e89a1811b230",
			"cellName": "`lengthOf` Assertion Logic - assertions.js:L2269-2285",
			"cellId": "ce702a01-133b-434c-813b-e89a1811b230",
			"visible": true,
			"parentCellId": "cb2d632b-b1e7-41e2-8642-977653392c81"
		},
		"lib/chai/core/assertions.js-simstep-8f6cf4f0-5cfc-4950-b515-9d177c36eb64": {
			"path": "lib/chai/core/assertions.js-simstep-8f6cf4f0-5cfc-4950-b515-9d177c36eb64",
			"fileName": "assertions.js",
			"wiki": "The `lengthOf` method retrieves the `length` property from the string (or `.size` for Map/Set) and compares it to the expected value.",
			"cellName": "`lengthOf` Assertion Logic - assertions.js:L2269-2285",
			"cellId": "ce702a01-133b-434c-813b-e89a1811b230",
			"visible": true,
			"startLine": 2269,
			"endLine": 2285,
			"parentCellId": "cb2d632b-b1e7-41e2-8642-977653392c81",
			"parentPath": "lib/chai/core/assertions.js"
		},
		"a5d34bfc-a3cf-45a6-86d3-94f8e9bfa9cc": {
			"path": "a5d34bfc-a3cf-45a6-86d3-94f8e9bfa9cc",
			"cellName": "Assertion Succeeded - assertion.js:L178-186",
			"cellId": "a5d34bfc-a3cf-45a6-86d3-94f8e9bfa9cc",
			"visible": true,
			"parentCellId": "d6094e8b-04ee-4fd8-ba2c-2dcf2209cd63"
		},
		"lib/chai/assertion.js-simstep-0577ff22-519e-44bb-b234-0e0a28a9f1db": {
			"path": "lib/chai/assertion.js-simstep-0577ff22-519e-44bb-b234-0e0a28a9f1db",
			"fileName": "assertion.js",
			"wiki": "The core `assert` method receives a successful result. The test passes and the test runner continues execution.",
			"cellName": "Assertion Succeeded - assertion.js:L178-186",
			"cellId": "a5d34bfc-a3cf-45a6-86d3-94f8e9bfa9cc",
			"visible": true,
			"startLine": 178,
			"endLine": 186,
			"parentCellId": "d6094e8b-04ee-4fd8-ba2c-2dcf2209cd63",
			"parentPath": "lib/chai/assertion.js"
		},
		"a32af246-a534-4581-ad06-a4e6cccafe26": {
			"path": "a32af246-a534-4581-ad06-a4e6cccafe26",
			"cellName": "Data Transmission\nto `include`",
			"cellId": "a32af246-a534-4581-ad06-a4e6cccafe26",
			"visible": true,
			"parentCellId": "cb2d632b-b1e7-41e2-8642-977653392c81"
		},
		"generated-edge-simstep-d169293d-9c11-46cc-8366-83ea2d6be3ba-a32af246-a534-4581-ad06-a4e6cccafe26": {
			"path": "generated-edge-simstep-d169293d-9c11-46cc-8366-83ea2d6be3ba-a32af246-a534-4581-ad06-a4e6cccafe26",
			"fileName": "assertions.js",
			"cellName": "Data Transmission to `include`",
			"cellId": "a32af246-a534-4581-ad06-a4e6cccafe26",
			"visible": true,
			"startLine": 641,
			"endLine": 641,
			"parentPath": "lib/chai/core/assertions.js"
		},
		"b36d7bf5-a7fd-45a2-bc58-9c4b688a78d4": {
			"path": "b36d7bf5-a7fd-45a2-bc58-9c4b688a78d4",
			"cellName": "Assertion Result\nTransmission",
			"cellId": "b36d7bf5-a7fd-45a2-bc58-9c4b688a78d4",
			"visible": true,
			"parentCellId": "3b40d2fd-134a-4e51-a482-b1661a48d960"
		},
		"generated-edge-simstep-63f01c78-da76-4893-97b8-54a3dd701d5e-b36d7bf5-a7fd-45a2-bc58-9c4b688a78d4": {
			"path": "generated-edge-simstep-63f01c78-da76-4893-97b8-54a3dd701d5e-b36d7bf5-a7fd-45a2-bc58-9c4b688a78d4",
			"fileName": "assertions.js",
			"cellName": "Assertion Result Transmission",
			"cellId": "b36d7bf5-a7fd-45a2-bc58-9c4b688a78d4",
			"visible": true,
			"startLine": 631,
			"endLine": 635,
			"parentPath": "lib/chai/core/assertions.js"
		},
		"eda3425e-cae9-40dc-9a09-0fbb2baabf6e": {
			"path": "eda3425e-cae9-40dc-9a09-0fbb2baabf6e",
			"cellName": "Data Transmission\nto `members`",
			"cellId": "eda3425e-cae9-40dc-9a09-0fbb2baabf6e",
			"visible": true,
			"parentCellId": "cb2d632b-b1e7-41e2-8642-977653392c81"
		},
		"generated-edge-simstep-58d32935-8d6f-451b-ac11-cfa0c4770b70-eda3425e-cae9-40dc-9a09-0fbb2baabf6e": {
			"path": "generated-edge-simstep-58d32935-8d6f-451b-ac11-cfa0c4770b70-eda3425e-cae9-40dc-9a09-0fbb2baabf6e",
			"fileName": "assertions.js",
			"cellName": "Data Transmission to `members`",
			"cellId": "eda3425e-cae9-40dc-9a09-0fbb2baabf6e",
			"visible": true,
			"startLine": 3277,
			"endLine": 3277,
			"parentPath": "lib/chai/core/assertions.js"
		},
		"b52e6420-664e-4141-a71e-4b0f257b4b3b": {
			"path": "b52e6420-664e-4141-a71e-4b0f257b4b3b",
			"cellName": "Assertion Result\nTransmission",
			"cellId": "b52e6420-664e-4141-a71e-4b0f257b4b3b",
			"visible": true,
			"parentCellId": "3b40d2fd-134a-4e51-a482-b1661a48d960"
		},
		"generated-edge-simstep-dd8252da-0a7a-4545-abfa-788f5a573670-b52e6420-664e-4141-a71e-4b0f257b4b3b": {
			"path": "generated-edge-simstep-dd8252da-0a7a-4545-abfa-788f5a573670-b52e6420-664e-4141-a71e-4b0f257b4b3b",
			"fileName": "assertions.js",
			"cellName": "Assertion Result Transmission",
			"cellId": "b52e6420-664e-4141-a71e-4b0f257b4b3b",
			"visible": true,
			"startLine": 3343,
			"endLine": 3347,
			"parentPath": "lib/chai/core/assertions.js"
		},
		"f3329c0d-a97d-46d9-9d75-29b00dcd6b65": {
			"path": "f3329c0d-a97d-46d9-9d75-29b00dcd6b65",
			"cellName": "`ordered` Flag\nSet",
			"cellId": "f3329c0d-a97d-46d9-9d75-29b00dcd6b65",
			"visible": true,
			"parentCellId": "cb2d632b-b1e7-41e2-8642-977653392c81"
		},
		"generated-edge-simstep-69871210-180b-4e13-a54d-dee0a1e9769f-f3329c0d-a97d-46d9-9d75-29b00dcd6b65": {
			"path": "generated-edge-simstep-69871210-180b-4e13-a54d-dee0a1e9769f-f3329c0d-a97d-46d9-9d75-29b00dcd6b65",
			"fileName": "assertions.js",
			"cellName": "`ordered` Flag Set",
			"cellId": "f3329c0d-a97d-46d9-9d75-29b00dcd6b65",
			"visible": true,
			"startLine": 208,
			"endLine": 208,
			"parentPath": "lib/chai/core/assertions.js"
		},
		"49a6e174-0dc2-49f9-a752-6298a1c48b17": {
			"path": "49a6e174-0dc2-49f9-a752-6298a1c48b17",
			"cellName": "Assertion Result\nTransmission",
			"cellId": "49a6e174-0dc2-49f9-a752-6298a1c48b17",
			"visible": true,
			"parentCellId": "3b40d2fd-134a-4e51-a482-b1661a48d960"
		},
		"generated-edge-simstep-2f2f0366-372a-49a7-bee3-680364b83c12-49a6e174-0dc2-49f9-a752-6298a1c48b17": {
			"path": "generated-edge-simstep-2f2f0366-372a-49a7-bee3-680364b83c12-49a6e174-0dc2-49f9-a752-6298a1c48b17",
			"fileName": "assertions.js",
			"cellName": "Assertion Result Transmission",
			"cellId": "49a6e174-0dc2-49f9-a752-6298a1c48b17",
			"visible": true,
			"startLine": 3343,
			"endLine": 3347,
			"parentPath": "lib/chai/core/assertions.js"
		},
		"325db70c-7165-4d3e-8c76-f5547ccadd00": {
			"path": "325db70c-7165-4d3e-8c76-f5547ccadd00",
			"cellName": "Data Transmission\nto `lengthOf`",
			"cellId": "325db70c-7165-4d3e-8c76-f5547ccadd00",
			"visible": true,
			"parentCellId": "cb2d632b-b1e7-41e2-8642-977653392c81"
		},
		"generated-edge-simstep-012f307d-8ce8-4525-b749-9b02dca6f100-325db70c-7165-4d3e-8c76-f5547ccadd00": {
			"path": "generated-edge-simstep-012f307d-8ce8-4525-b749-9b02dca6f100-325db70c-7165-4d3e-8c76-f5547ccadd00",
			"fileName": "assertions.js",
			"cellName": "Data Transmission to `lengthOf`",
			"cellId": "325db70c-7165-4d3e-8c76-f5547ccadd00",
			"visible": true,
			"startLine": 2294,
			"endLine": 2294,
			"parentPath": "lib/chai/core/assertions.js"
		},
		"970d7816-7875-46ca-bab1-a3a0e1416800": {
			"path": "970d7816-7875-46ca-bab1-a3a0e1416800",
			"cellName": "Assertion Result\nTransmission",
			"cellId": "970d7816-7875-46ca-bab1-a3a0e1416800",
			"visible": true,
			"parentCellId": "3b40d2fd-134a-4e51-a482-b1661a48d960"
		},
		"generated-edge-simstep-cd08c58c-4a98-489b-ab05-50c80ac467ae-970d7816-7875-46ca-bab1-a3a0e1416800": {
			"path": "generated-edge-simstep-cd08c58c-4a98-489b-ab05-50c80ac467ae-970d7816-7875-46ca-bab1-a3a0e1416800",
			"fileName": "assertions.js",
			"cellName": "Assertion Result Transmission",
			"cellId": "970d7816-7875-46ca-bab1-a3a0e1416800",
			"visible": true,
			"startLine": 2282,
			"endLine": 2285,
			"parentPath": "lib/chai/core/assertions.js"
		},
		"ddeb7b36-bb2d-429a-b928-35cd5010095f": {
			"path": "ddeb7b36-bb2d-429a-b928-35cd5010095f",
			"cellName": "Setup: Define Language Chains - assertions.js:L43-60",
			"cellId": "ddeb7b36-bb2d-429a-b928-35cd5010095f",
			"visible": true,
			"parentCellId": "cb2d632b-b1e7-41e2-8642-977653392c81"
		},
		"lib/chai/core/assertions.js-simstep-53e9a83c-fd5c-4904-ac31-42976bc36617": {
			"path": "lib/chai/core/assertions.js-simstep-53e9a83c-fd5c-4904-ac31-42976bc36617",
			"fileName": "assertions.js",
			"wiki": "Chai defines an array of keywords that act as 'language chains'. These are getters that improve assertion readability but perform no logic themselves. They include words like 'to', 'be', 'and', 'which'.",
			"cellName": "Setup: Define Language Chains - assertions.js:L43-60",
			"cellId": "ddeb7b36-bb2d-429a-b928-35cd5010095f",
			"visible": true,
			"startLine": 43,
			"endLine": 60,
			"parentCellId": "cb2d632b-b1e7-41e2-8642-977653392c81",
			"parentPath": "lib/chai/core/assertions.js"
		},
		"a38ba456-b539-4581-848b-6dfd39a43a50": {
			"path": "a38ba456-b539-4581-848b-6dfd39a43a50",
			"cellName": "Setup: Implement Chainable Getter - addProperty.js:L39-60",
			"cellId": "a38ba456-b539-4581-848b-6dfd39a43a50",
			"visible": true,
			"parentCellId": "c192a443-274d-45d6-acca-463e2a0eb9a6"
		},
		"lib/chai/utils/addProperty.js-simstep-f2ca94bb-ebb0-496f-bfac-4194fddabdef": {
			"path": "lib/chai/utils/addProperty.js-simstep-f2ca94bb-ebb0-496f-bfac-4194fddabdef",
			"fileName": "addProperty.js",
			"wiki": "The `addProperty` utility defines a getter on the `Assertion` prototype. For language chains, no specific getter logic is provided, so it defaults to a function that simply returns the assertion object itself (`this`). This is the core mechanism that enables chaining.",
			"cellName": "Setup: Implement Chainable Getter - addProperty.js:L39-60",
			"cellId": "a38ba456-b539-4581-848b-6dfd39a43a50",
			"visible": true,
			"startLine": 39,
			"endLine": 60,
			"parentCellId": "c192a443-274d-45d6-acca-463e2a0eb9a6",
			"parentPath": "lib/chai/utils/addProperty.js"
		},
		"de166f66-5ad7-496e-bfb7-d2d856d0f616": {
			"path": "de166f66-5ad7-496e-bfb7-d2d856d0f616",
			"cellName": "Execution: Return Assertion for Chaining - addProperty.js:L43-55",
			"cellId": "de166f66-5ad7-496e-bfb7-d2d856d0f616",
			"visible": true,
			"parentCellId": "c192a443-274d-45d6-acca-463e2a0eb9a6"
		},
		"lib/chai/utils/addProperty.js-simstep-61f56926-7e65-46f7-8886-0267f2dc1da5": {
			"path": "lib/chai/utils/addProperty.js-simstep-61f56926-7e65-46f7-8886-0267f2dc1da5",
			"fileName": "addProperty.js",
			"wiki": "The getter for the `.to` property is executed. Since it's a language chain, its purpose is to return the current `Assertion` instance. This allows the next property in the chain, `.be`, to be accessed on the same assertion object.",
			"cellName": "Execution: Return Assertion for Chaining - addProperty.js:L43-55",
			"cellId": "de166f66-5ad7-496e-bfb7-d2d856d0f616",
			"visible": true,
			"startLine": 43,
			"endLine": 55,
			"parentCellId": "c192a443-274d-45d6-acca-463e2a0eb9a6",
			"parentPath": "lib/chai/utils/addProperty.js"
		},
		"36131db5-91db-403c-ac25-5f117ec0e635": {
			"path": "36131db5-91db-403c-ac25-5f117ec0e635",
			"cellName": "Execution: Continue Chain - addProperty.js:L43-55",
			"cellId": "36131db5-91db-403c-ac25-5f117ec0e635",
			"visible": true,
			"parentCellId": "c192a443-274d-45d6-acca-463e2a0eb9a6"
		},
		"lib/chai/utils/addProperty.js-simstep-25bea7dc-f163-4a24-9dc5-8a7adab3e5e3": {
			"path": "lib/chai/utils/addProperty.js-simstep-25bea7dc-f163-4a24-9dc5-8a7adab3e5e3",
			"fileName": "addProperty.js",
			"wiki": "The getter for the `.be` property executes. Similar to `.to`, it returns the same `Assertion` instance, allowing the chain to continue until a method that performs an actual assertion (like `.a()`) is called.",
			"cellName": "Execution: Continue Chain - addProperty.js:L43-55",
			"cellId": "36131db5-91db-403c-ac25-5f117ec0e635",
			"visible": true,
			"startLine": 43,
			"endLine": 55,
			"parentCellId": "c192a443-274d-45d6-acca-463e2a0eb9a6",
			"parentPath": "lib/chai/utils/addProperty.js"
		},
		"74e21110-13cc-49d3-8c1b-76be0ba1d7cf": {
			"path": "74e21110-13cc-49d3-8c1b-76be0ba1d7cf",
			"cellName": "Setup: Register\nLanguage Chain\nProperty 'to'",
			"cellId": "74e21110-13cc-49d3-8c1b-76be0ba1d7cf",
			"visible": true,
			"parentCellId": "3b40d2fd-134a-4e51-a482-b1661a48d960"
		},
		"generated-edge-simstep-501ef523-f810-4d04-b466-8cc39b708193-74e21110-13cc-49d3-8c1b-76be0ba1d7cf": {
			"path": "generated-edge-simstep-501ef523-f810-4d04-b466-8cc39b708193-74e21110-13cc-49d3-8c1b-76be0ba1d7cf",
			"fileName": "assertions.js",
			"cellName": "Setup: Register Language Chain Property 'to'",
			"cellId": "74e21110-13cc-49d3-8c1b-76be0ba1d7cf",
			"visible": true,
			"startLine": 59,
			"endLine": 59,
			"parentPath": "lib/chai/core/assertions.js"
		},
		"23863589-0536-4ae4-8d65-20c9ea92f194": {
			"path": "23863589-0536-4ae4-8d65-20c9ea92f194",
			"cellName": "Execution: Access\nLanguage Chain\nin Test",
			"cellId": "23863589-0536-4ae4-8d65-20c9ea92f194",
			"visible": true,
			"parentCellId": "c192a443-274d-45d6-acca-463e2a0eb9a6"
		},
		"generated-edge-simstep-93ab2626-ff8c-4b2e-808a-df5c417e9534-23863589-0536-4ae4-8d65-20c9ea92f194": {
			"path": "generated-edge-simstep-93ab2626-ff8c-4b2e-808a-df5c417e9534-23863589-0536-4ae4-8d65-20c9ea92f194",
			"fileName": "addProperty.js",
			"cellName": "Execution: Access Language Chain in Test",
			"cellId": "23863589-0536-4ae4-8d65-20c9ea92f194",
			"visible": true,
			"startLine": 43,
			"endLine": 43,
			"parentPath": "lib/chai/utils/addProperty.js"
		},
		"984fc8c8-fe77-472c-bf0a-7dcf817a5b3e": {
			"path": "984fc8c8-fe77-472c-bf0a-7dcf817a5b3e",
			"cellName": "Execution: Pass\nAssertion to\nNext Chain",
			"cellId": "984fc8c8-fe77-472c-bf0a-7dcf817a5b3e",
			"visible": true,
			"parentCellId": "c192a443-274d-45d6-acca-463e2a0eb9a6"
		},
		"generated-edge-simstep-3da7a42e-7feb-4a22-b5af-fa4a0604dac6-984fc8c8-fe77-472c-bf0a-7dcf817a5b3e": {
			"path": "generated-edge-simstep-3da7a42e-7feb-4a22-b5af-fa4a0604dac6-984fc8c8-fe77-472c-bf0a-7dcf817a5b3e",
			"fileName": "addProperty.js",
			"cellName": "Execution: Pass Assertion to Next Chain",
			"cellId": "984fc8c8-fe77-472c-bf0a-7dcf817a5b3e",
			"visible": true,
			"startLine": 44,
			"endLine": 44,
			"parentPath": "lib/chai/utils/addProperty.js"
		},
		"93fdacaf-e207-4251-9e75-cc6f45f586a2": {
			"path": "93fdacaf-e207-4251-9e75-cc6f45f586a2",
			"cellName": "config.js",
			"cellId": "93fdacaf-e207-4251-9e75-cc6f45f586a2",
			"visible": true,
			"parentCellId": "3b40d2fd-134a-4e51-a482-b1661a48d960"
		},
		"024e93d1-f1b8-417a-a584-01b228b125fa": {
			"path": "024e93d1-f1b8-417a-a584-01b228b125fa",
			"cellName": "objDisplay.js",
			"cellId": "024e93d1-f1b8-417a-a584-01b228b125fa",
			"visible": true,
			"parentCellId": "365dcd1f-e369-4e23-b3b7-84fb25a3fa18"
		},
		"7960cb22-e502-47ae-99aa-d8339852ad00": {
			"path": "7960cb22-e502-47ae-99aa-d8339852ad00",
			"cellName": "Config: Define Default Configuration - config.js:L1-101",
			"cellId": "7960cb22-e502-47ae-99aa-d8339852ad00",
			"visible": true,
			"parentCellId": "93fdacaf-e207-4251-9e75-cc6f45f586a2"
		},
		"lib/chai/config.js-simstep-b0ad61f5-b704-4f1a-b498-a60db2195f2a": {
			"path": "lib/chai/config.js-simstep-b0ad61f5-b704-4f1a-b498-a60db2195f2a",
			"fileName": "config.js",
			"wiki": "Chai defines a global configuration object with default values for various behaviors. This includes `includeStack` (false), `showDiff` (true), and `truncateThreshold` (40).",
			"cellName": "Config: Define Default Configuration - config.js:L1-101",
			"cellId": "7960cb22-e502-47ae-99aa-d8339852ad00",
			"visible": true,
			"startLine": 1,
			"endLine": 101,
			"parentCellId": "93fdacaf-e207-4251-9e75-cc6f45f586a2",
			"parentPath": "lib/chai/config.js"
		},
		"34a70d5e-a66a-4f0f-97fc-e07a744b6941": {
			"path": "34a70d5e-a66a-4f0f-97fc-e07a744b6941",
			"cellName": "User Action: Customize Chai Configuration - chai.js:L34",
			"cellId": "34a70d5e-a66a-4f0f-97fc-e07a744b6941",
			"visible": true,
			"parentCellId": "e3eb933b-c619-452d-ba91-b18a3e8e6c21"
		},
		"lib/chai.js-simstep-3eb64751-6689-45d7-b71f-7203d9d71d5e": {
			"path": "lib/chai.js-simstep-3eb64751-6689-45d7-b71f-7203d9d71d5e",
			"fileName": "chai.js",
			"wiki": "A user modifies the global `chai.config` object in their test setup to override default behaviors. In this example, they enable stack traces, disable diffs, and set a specific truncation threshold.",
			"cellName": "User Action: Customize Chai Configuration - chai.js:L34",
			"cellId": "34a70d5e-a66a-4f0f-97fc-e07a744b6941",
			"visible": true,
			"startLine": 34,
			"endLine": 34,
			"parentCellId": "e3eb933b-c619-452d-ba91-b18a3e8e6c21",
			"parentPath": "lib/chai.js"
		},
		"ac612a19-34b5-44f3-a209-01b54c8f2336": {
			"path": "ac612a19-34b5-44f3-a209-01b54c8f2336",
			"cellName": "Assertion: An Assertion Fails - assertion.js:L157-186",
			"cellId": "ac612a19-34b5-44f3-a209-01b54c8f2336",
			"visible": true,
			"parentCellId": "d6094e8b-04ee-4fd8-ba2c-2dcf2209cd63"
		},
		"lib/chai/assertion.js-simstep-81b87a51-1503-4308-b64b-74f2eaa90bf3": {
			"path": "lib/chai/assertion.js-simstep-81b87a51-1503-4308-b64b-74f2eaa90bf3",
			"fileName": "assertion.js",
			"wiki": "A test assertion fails, triggering the internal `assert` method within Chai's `Assertion` class. This method is the central point for handling assertion logic and error generation.",
			"cellName": "Assertion: An Assertion Fails - assertion.js:L157-186",
			"cellId": "ac612a19-34b5-44f3-a209-01b54c8f2336",
			"visible": true,
			"startLine": 157,
			"endLine": 186,
			"parentCellId": "d6094e8b-04ee-4fd8-ba2c-2dcf2209cd63",
			"parentPath": "lib/chai/assertion.js"
		},
		"574766f7-f27a-47cb-82a5-130e36b00aff": {
			"path": "574766f7-f27a-47cb-82a5-130e36b00aff",
			"cellName": "Error Handling: Process `includeStack` and `showDiff` - assertion.js:L161-183",
			"cellId": "574766f7-f27a-47cb-82a5-130e36b00aff",
			"visible": true,
			"parentCellId": "d6094e8b-04ee-4fd8-ba2c-2dcf2209cd63"
		},
		"lib/chai/assertion.js-simstep-6fed5695-b1b1-4c70-b0c2-dc0dd21381ed": {
			"path": "lib/chai/assertion.js-simstep-6fed5695-b1b1-4c70-b0c2-dc0dd21381ed",
			"fileName": "assertion.js",
			"wiki": "Inside the `assert` method, `config.showDiff` is checked to decide if the `showDiff` flag on the error should be false. Then, `config.includeStack` is checked to determine the `ssfi` (start stack function indicator), which controls whether Chai's internal stack is included in the error trace.",
			"cellName": "Error Handling: Process `includeStack` and `showDiff` - assertion.js:L161-183",
			"cellId": "574766f7-f27a-47cb-82a5-130e36b00aff",
			"visible": true,
			"startLine": 161,
			"endLine": 183,
			"parentCellId": "d6094e8b-04ee-4fd8-ba2c-2dcf2209cd63",
			"parentPath": "lib/chai/assertion.js"
		},
		"6f06b54f-8fd6-4b17-b471-6640ca1910cf": {
			"path": "6f06b54f-8fd6-4b17-b471-6640ca1910cf",
			"cellName": "Data Transformation: Process `truncateThreshold` - objDisplay.js:L26-40",
			"cellId": "6f06b54f-8fd6-4b17-b471-6640ca1910cf",
			"visible": true,
			"parentCellId": "024e93d1-f1b8-417a-a584-01b228b125fa"
		},
		"lib/chai/utils/objDisplay.js-simstep-bff42bea-6d33-4fac-9f5b-118e65dcb673": {
			"path": "lib/chai/utils/objDisplay.js-simstep-bff42bea-6d33-4fac-9f5b-118e65dcb673",
			"fileName": "objDisplay.js",
			"wiki": "The `objDisplay` utility function reads `config.truncateThreshold`. It checks if the string representation of an object exceeds this threshold. If it does, the string is truncated to a summary like `{ Object (prop1, prop2) }`.",
			"cellName": "Data Transformation: Process `truncateThreshold` - objDisplay.js:L26-40",
			"cellId": "6f06b54f-8fd6-4b17-b471-6640ca1910cf",
			"visible": true,
			"startLine": 26,
			"endLine": 40,
			"parentCellId": "024e93d1-f1b8-417a-a584-01b228b125fa",
			"parentPath": "lib/chai/utils/objDisplay.js"
		},
		"d063631a-4d01-41f9-8dfd-e59f39c1f37b": {
			"path": "d063631a-4d01-41f9-8dfd-e59f39c1f37b",
			"cellName": "Error Handling: Final Error is Thrown - assertion.js:L178-184",
			"cellId": "d063631a-4d01-41f9-8dfd-e59f39c1f37b",
			"visible": true,
			"parentCellId": "d6094e8b-04ee-4fd8-ba2c-2dcf2209cd63"
		},
		"lib/chai/assertion.js-simstep-969abbd0-74ba-47c5-9031-fb69889c56be": {
			"path": "lib/chai/assertion.js-simstep-969abbd0-74ba-47c5-9031-fb69889c56be",
			"fileName": "assertion.js",
			"wiki": "Back in the `assert` method, a new `AssertionError` is instantiated with the formatted message and properties derived from the configuration (`showDiff`, `includeStack`). This error is then thrown, causing the test to fail with a descriptive message.",
			"cellName": "Error Handling: Final Error is Thrown - assertion.js:L178-184",
			"cellId": "d063631a-4d01-41f9-8dfd-e59f39c1f37b",
			"visible": true,
			"startLine": 178,
			"endLine": 184,
			"parentCellId": "d6094e8b-04ee-4fd8-ba2c-2dcf2209cd63",
			"parentPath": "lib/chai/assertion.js"
		},
		"500a71c2-7b6b-4d9e-a2d4-4170d7671f48": {
			"path": "500a71c2-7b6b-4d9e-a2d4-4170d7671f48",
			"cellName": "Config: Export\nConfiguration Object",
			"cellId": "500a71c2-7b6b-4d9e-a2d4-4170d7671f48",
			"visible": true,
			"parentCellId": "1f5c4ae6-1ee0-44d5-af43-2b58776742c5"
		},
		"generated-edge-simstep-11672c3e-3d11-45d1-baa0-fb8b6bcc1ef2-500a71c2-7b6b-4d9e-a2d4-4170d7671f48": {
			"path": "generated-edge-simstep-11672c3e-3d11-45d1-baa0-fb8b6bcc1ef2-500a71c2-7b6b-4d9e-a2d4-4170d7671f48",
			"fileName": "config.js",
			"cellName": "Config: Export Configuration Object",
			"cellId": "500a71c2-7b6b-4d9e-a2d4-4170d7671f48",
			"visible": true,
			"startLine": 54,
			"endLine": 54,
			"parentPath": "lib/chai/config.js"
		},
		"0faeee74-7d2d-475e-b7aa-020f11493950": {
			"path": "0faeee74-7d2d-475e-b7aa-020f11493950",
			"cellName": "State Update:\nModified Configuration\nPropagates",
			"cellId": "0faeee74-7d2d-475e-b7aa-020f11493950",
			"visible": true,
			"parentCellId": "1f5c4ae6-1ee0-44d5-af43-2b58776742c5"
		},
		"generated-edge-simstep-175a4c1f-895b-4b6e-8071-8298fb19d316-0faeee74-7d2d-475e-b7aa-020f11493950": {
			"path": "generated-edge-simstep-175a4c1f-895b-4b6e-8071-8298fb19d316-0faeee74-7d2d-475e-b7aa-020f11493950",
			"fileName": "chai.js",
			"cellName": "State Update: Modified Configuration Propagates",
			"cellId": "0faeee74-7d2d-475e-b7aa-020f11493950",
			"visible": true,
			"startLine": 1,
			"endLine": 1,
			"parentPath": "lib/chai.js"
		},
		"213ef39d-bd63-4f1d-84d2-38ad99a83f14": {
			"path": "213ef39d-bd63-4f1d-84d2-38ad99a83f14",
			"cellName": "Data Access:\nConfiguration is\nRead for\nError Handling",
			"cellId": "213ef39d-bd63-4f1d-84d2-38ad99a83f14",
			"visible": true,
			"parentCellId": "d6094e8b-04ee-4fd8-ba2c-2dcf2209cd63"
		},
		"generated-edge-simstep-9a8fc88f-a8ce-4077-be61-7eb53441a3ff-213ef39d-bd63-4f1d-84d2-38ad99a83f14": {
			"path": "generated-edge-simstep-9a8fc88f-a8ce-4077-be61-7eb53441a3ff-213ef39d-bd63-4f1d-84d2-38ad99a83f14",
			"fileName": "assertion.js",
			"cellName": "Data Access: Configuration is Read for Error Handling",
			"cellId": "213ef39d-bd63-4f1d-84d2-38ad99a83f14",
			"visible": true,
			"startLine": 8,
			"endLine": 8,
			"parentPath": "lib/chai/assertion.js"
		},
		"4cb0c888-8a58-4fba-bcdb-98727b5f7e41": {
			"path": "4cb0c888-8a58-4fba-bcdb-98727b5f7e41",
			"cellName": "Data Flow:\nObject Passed\nto Message\nFormatter",
			"cellId": "4cb0c888-8a58-4fba-bcdb-98727b5f7e41",
			"visible": true,
			"parentCellId": "3b40d2fd-134a-4e51-a482-b1661a48d960"
		},
		"generated-edge-simstep-0d4e28d9-0f96-4736-bd45-370ef248b805-4cb0c888-8a58-4fba-bcdb-98727b5f7e41": {
			"path": "generated-edge-simstep-0d4e28d9-0f96-4736-bd45-370ef248b805-4cb0c888-8a58-4fba-bcdb-98727b5f7e41",
			"fileName": "assertion.js",
			"cellName": "Data Flow: Object Passed to Message Formatter",
			"cellId": "4cb0c888-8a58-4fba-bcdb-98727b5f7e41",
			"visible": true,
			"startLine": 164,
			"endLine": 164,
			"parentPath": "lib/chai/assertion.js"
		},
		"ae37d70f-af46-4160-ad9c-307e9042cf37": {
			"path": "ae37d70f-af46-4160-ad9c-307e9042cf37",
			"cellName": "Data Flow:\nFormatted Message\nReturned",
			"cellId": "ae37d70f-af46-4160-ad9c-307e9042cf37",
			"visible": true,
			"parentCellId": "3b40d2fd-134a-4e51-a482-b1661a48d960"
		},
		"generated-edge-simstep-20b807c7-040d-4aed-9559-929f7718128d-ae37d70f-af46-4160-ad9c-307e9042cf37": {
			"path": "generated-edge-simstep-20b807c7-040d-4aed-9559-929f7718128d-ae37d70f-af46-4160-ad9c-307e9042cf37",
			"fileName": "objDisplay.js",
			"cellName": "Data Flow: Formatted Message Returned",
			"cellId": "ae37d70f-af46-4160-ad9c-307e9042cf37",
			"visible": true,
			"startLine": 41,
			"endLine": 41,
			"parentPath": "lib/chai/utils/objDisplay.js"
		}
	},
	"simulations": {
		"Write BDD-style assertions using the `expect` interface": {
			"name": "Write BDD-style assertions using the `expect` interface",
			"simSteps": [
				{
					"simStepId": "ffbf2b31-d402-4666-a860-80eef02213b8",
					"diagramNodeId": "3d7b6b57-5884-429f-9697-7b237b43fc8e",
					"simStepLabel": "Start: expect()",
					"simStepDescription": "The test initiates a BDD-style assertion by calling `expect()` with the value to be tested. This function creates and returns a new `Assertion` object, which holds the target value and other flags for the subsequent chain.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "lib/chai/interface/expect.js",
						"startLine": "15",
						"endLine": "17",
						"relevantVariables": [
							"expect",
							"Assertion"
						]
					},
					"inputDataExample": "{\"val\": 42, \"message\": \"optional message\"}",
					"outputDataExample": "{\"__flags\":{\"ssfi\":\"[Function: expect]\",\"lockSsfi\":false,\"object\":42,\"message\":\"optional message\",\"eql\":\"[Function: eql]\"}}"
				},
				{
					"simStepId": "b31c7d39-49be-4587-b49d-4f5e56f817a7",
					"diagramNodeId": "99c7836f-37a1-4e37-a2bc-de0a6ccfcb2a",
					"simStepLabel": "Return Assertion Object",
					"simStepDescription": "The `expect` function returns the newly created `Assertion` instance. This object is the foundation for the chainable BDD syntax, and its properties will be accessed in the following steps.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "lib/chai/interface/expect.js",
						"startLine": "16",
						"endLine": "16",
						"relevantVariables": [
							"new Assertion(val, message)"
						]
					},
					"inputDataExample": "{\"__flags\":{\"ssfi\":\"[Function: expect]\",\"lockSsfi\":false,\"object\":42,\"message\":\"optional message\",\"eql\":\"[Function: eql]\"}}",
					"outputDataExample": "{\"__flags\":{\"ssfi\":\"[Function: expect]\",\"lockSsfi\":false,\"object\":42,\"message\":\"optional message\",\"eql\":\"[Function: eql]\"}}"
				},
				{
					"simStepId": "0ded55ff-7ad5-41e9-aeba-b55a1dc27961",
					"diagramNodeId": "9a018c67-2789-4a30-99bb-21f2cbb1086a",
					"simStepLabel": "Language Chain: .to",
					"simStepDescription": "The `.to` property is accessed on the `Assertion` object. This is a language chain getter that doesn't perform any logic. It simply returns the same `Assertion` instance to allow for further chaining and to create a more readable, sentence-like assertion.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "lib/chai/core/assertions.js",
						"startLine": "61",
						"endLine": "63",
						"relevantVariables": [
							"Assertion.addProperty",
							"'to'"
						]
					},
					"inputDataExample": "{\"__flags\":{\"object\":42,...}}",
					"outputDataExample": "{\"__flags\":{\"object\":42,...}}"
				},
				{
					"simStepId": "bbb4e818-7b45-4b41-98a3-dc39c7bca5a8",
					"diagramNodeId": "f0466bf2-9593-4717-8b9e-75f4189007be",
					"simStepLabel": "Chain Assertion Object",
					"simStepDescription": "The `.to` property getter returns the `Assertion` object, passing it along to the next link in the chain.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "lib/chai/utils/addProperty.js",
						"startLine": "67",
						"endLine": "67",
						"relevantVariables": [
							"return newAssertion;"
						]
					},
					"inputDataExample": "{\"__flags\":{\"object\":42,...}}",
					"outputDataExample": "{\"__flags\":{\"object\":42,...}}"
				},
				{
					"simStepId": "6befc5d9-1a5d-4e39-b0d6-e5c6dfb1302f",
					"diagramNodeId": "98fe157b-c465-40e7-9879-af8abb572a33",
					"simStepLabel": "Language Chain: .be",
					"simStepDescription": "Similar to `.to`, the `.be` property is another language chain. It returns the `Assertion` instance, contributing to the BDD syntax's readability without performing any checks.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "lib/chai/core/assertions.js",
						"startLine": "61",
						"endLine": "63",
						"relevantVariables": [
							"Assertion.addProperty",
							"'be'"
						]
					},
					"inputDataExample": "{\"__flags\":{\"object\":42,...}}",
					"outputDataExample": "{\"__flags\":{\"object\":42,...}}"
				},
				{
					"simStepId": "2d3eac35-a4f4-4e3a-8972-b34f2d7ee4fc",
					"diagramNodeId": "c1f07aac-5242-4cdd-baad-33459f5ec2c4",
					"simStepLabel": "Chain Assertion Object",
					"simStepDescription": "The `.be` property getter returns the `Assertion` object, continuing the chain.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "lib/chai/utils/addProperty.js",
						"startLine": "67",
						"endLine": "67",
						"relevantVariables": [
							"return newAssertion;"
						]
					},
					"inputDataExample": "{\"__flags\":{\"object\":42,...}}",
					"outputDataExample": "{\"__flags\":{\"object\":42,...}}"
				},
				{
					"simStepId": "18f82911-1e52-49ae-843f-5675d5cbc1ad",
					"diagramNodeId": "6c3832b1-0a35-45e0-9be8-2287555beaad",
					"simStepLabel": "Assertion Call: .a()",
					"simStepDescription": "The `.a('string')` method is called. This function (aliased from `an`) checks the type of the target object (42) against the expected type ('string'). The type detection identifies the target as a 'number', so the comparison fails.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "lib/chai/core/assertions.js",
						"startLine": "324",
						"endLine": "353",
						"relevantVariables": [
							"an",
							"_.type",
							"this.assert"
						]
					},
					"inputDataExample": "{\"assertionObject\":{\"__flags\":{\"object\":42}},\"type\":\"string\"}",
					"outputDataExample": "{\"_expr\": false, \"msg\": \"expected #{this} to be a string\", \"negateMsg\": \"expected #{this} not to be a string\"}"
				},
				{
					"simStepId": "712fbda5-68ef-43a1-93c2-7c03e8567d44",
					"diagramNodeId": "d8e3fd59-b0f1-455f-b2e8-2ae686a91ed1",
					"simStepLabel": "Internal Assertion Call",
					"simStepDescription": "Because the type check failed (`'number' !== 'string'`), the `.a()` method invokes the internal `.assert()` method with a failing expression (`false`) and the appropriate error messages.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "lib/chai/core/assertions.js",
						"startLine": "347",
						"endLine": "352",
						"relevantVariables": [
							"this.assert",
							"type === detectedType"
						]
					},
					"inputDataExample": "{\"_expr\": false, \"msg\": \"expected #{this} to be a string\", \"negateMsg\": \"expected #{this} not to be a string\"}",
					"outputDataExample": "{\"_expr\": false, \"msg\": \"expected #{this} to be a string\", \"negateMsg\": \"expected #{this} not to be a string\"}"
				},
				{
					"simStepId": "d8f9e7de-962e-4b46-b53b-3c6fc57a7a3d",
					"diagramNodeId": "76d13f4d-2e39-4075-8e09-1a5dfd58eb75",
					"simStepLabel": "Execute Assertion and Prepare Error",
					"simStepDescription": "The `assert` method on the `Assertion` prototype receives the failing expression. Since the check fails (`!ok` is true), it proceeds to construct an `AssertionError`. It gathers the actual value (42), expected value ('string'), and formats the error message.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "lib/chai/assertion.js",
						"startLine": "157",
						"endLine": "185",
						"relevantVariables": [
							"assert",
							"ok",
							"util.getMessage",
							"util.getActual",
							"AssertionError"
						]
					},
					"inputDataExample": "{\"_expr\": false, \"msg\": \"expected #{this} to be a string\", \"_negateMsg\": \"expected #{this} not to be a string\", \"expected\": \"string\", \"_actual\": 42}",
					"outputDataExample": "{\"name\": \"AssertionError\", \"message\": \"expected 42 to be a string\", \"actual\": 42, \"expected\": \"string\", \"showDiff\": true}"
				},
				{
					"simStepId": "dcb95fcf-a6d8-4531-bf5e-ad9aa369ec83",
					"diagramNodeId": "016a9626-27a3-4671-91d4-ced879f9b94f",
					"simStepLabel": "Transmit Error Details",
					"simStepDescription": "The details for the failure, including the formatted message, actual value, and expected value, are passed to the `AssertionError` constructor.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "lib/chai/assertion.js",
						"startLine": "178",
						"endLine": "184",
						"relevantVariables": [
							"AssertionError",
							"msg",
							"assertionErrorObjectProperties"
						]
					},
					"inputDataExample": "{\"message\":\"expected 42 to be a string\",\"properties\":{\"actual\":42,\"expected\":\"string\",\"showDiff\":true,\"operator\":\"strictEqual\"}}",
					"outputDataExample": "{\"message\":\"expected 42 to be a string\",\"properties\":{\"actual\":42,\"expected\":\"string\",\"showDiff\":true,\"operator\":\"strictEqual\"}}"
				},
				{
					"simStepId": "01b6f0f7-8851-47a1-8b07-ecd389092dc5",
					"diagramNodeId": "626f7856-8bdf-4df3-bf89-f68eedf5585e",
					"simStepLabel": "Throw AssertionError",
					"simStepDescription": "The newly created `AssertionError` is thrown, which causes the test to fail. The test runner (e.g., Mocha) will catch this error and report the test failure with the detailed message.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "lib/chai/assertion.js",
						"startLine": "178",
						"endLine": "184",
						"relevantVariables": [
							"throw new AssertionError"
						]
					},
					"inputDataExample": "{\"name\": \"AssertionError\", \"message\": \"expected 42 to be a string\", \"actual\": 42, \"expected\": \"string\", \"showDiff\": true}",
					"outputDataExample": "{\"name\": \"AssertionError\", \"message\": \"expected 42 to be a string\", \"actual\": 42, \"expected\": \"string\", \"showDiff\": true}"
				}
			],
			"description": "<ul><li>Provides a chainable, readable syntax for assertions (e</li><li>g</li><li>, <code>expect(foo)</li><li>to</li><li>be</li><li>a('string')</code>)</li><li>The entry point is the <code>expect()</code> function which wraps the target value in an <code>Assertion</code> object</li><li>Supports language chains like <code></li><li>to</code>, <code></li><li>be</code>, <code></li><li>and</code> to form human-readable sentences</li><li>This is the most popular BDD interface provided by Chai</li></ul>",
			"simulationNodesAndEdges": {
				"3d7b6b57-5884-429f-9697-7b237b43fc8e": {
					"simStepIds": [
						"ffbf2b31-d402-4666-a860-80eef02213b8"
					]
				},
				"9a018c67-2789-4a30-99bb-21f2cbb1086a": {
					"simStepIds": [
						"0ded55ff-7ad5-41e9-aeba-b55a1dc27961"
					]
				},
				"98fe157b-c465-40e7-9879-af8abb572a33": {
					"simStepIds": [
						"6befc5d9-1a5d-4e39-b0d6-e5c6dfb1302f"
					]
				},
				"6c3832b1-0a35-45e0-9be8-2287555beaad": {
					"simStepIds": [
						"18f82911-1e52-49ae-843f-5675d5cbc1ad"
					]
				},
				"76d13f4d-2e39-4075-8e09-1a5dfd58eb75": {
					"simStepIds": [
						"d8f9e7de-962e-4b46-b53b-3c6fc57a7a3d"
					]
				},
				"626f7856-8bdf-4df3-bf89-f68eedf5585e": {
					"simStepIds": [
						"01b6f0f7-8851-47a1-8b07-ecd389092dc5"
					]
				},
				"99c7836f-37a1-4e37-a2bc-de0a6ccfcb2a": {
					"simStepIds": [
						"b31c7d39-49be-4587-b49d-4f5e56f817a7"
					]
				},
				"f0466bf2-9593-4717-8b9e-75f4189007be": {
					"simStepIds": [
						"bbb4e818-7b45-4b41-98a3-dc39c7bca5a8"
					]
				},
				"c1f07aac-5242-4cdd-baad-33459f5ec2c4": {
					"simStepIds": [
						"2d3eac35-a4f4-4e3a-8972-b34f2d7ee4fc"
					]
				},
				"d8e3fd59-b0f1-455f-b2e8-2ae686a91ed1": {
					"simStepIds": [
						"712fbda5-68ef-43a1-93c2-7c03e8567d44"
					]
				},
				"016a9626-27a3-4671-91d4-ced879f9b94f": {
					"simStepIds": [
						"dcb95fcf-a6d8-4531-bf5e-ad9aa369ec83"
					]
				}
			},
			"isAIGenerated": true,
			"keywords": "expect, Assertion, to.be",
			"generationPrompt": "Write BDD-style assertions using the `expect` interface",
			"generationKeywords": "expect, Assertion, to.be"
		},
		"Write classical TDD-style assertions using the `assert` interface": {
			"name": "Write classical TDD-style assertions using the `assert` interface",
			"simSteps": [
				{
					"simStepId": "50e26f9d-f638-4309-9221-1627533d9fd5",
					"diagramNodeId": "1ff0ef00-7650-4720-8e55-fe8c4297be0f",
					"simStepLabel": "User Invokes `assert.deepEqual`",
					"simStepDescription": "A developer writes a test case to assert that two objects are deeply equal. In this example, the assertion is expected to fail because the 'tea' properties have different values.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "test/assert.js",
						"startLine": "420",
						"endLine": "422",
						"relevantVariables": [
							"assert.deepEqual"
						]
					},
					"inputDataExample": "{\n  \"actual\": {\"tea\": \"chai\"},\n  \"expected\": {\"tea\": \"black\"},\n  \"message\": \"blah\"\n}",
					"outputDataExample": "{\n  \"AssertionError\": {\n    \"message\": \"blah: expected { tea: 'chai' } to deeply equal { tea: 'black' }\",\n    \"showDiff\": true,\n    \"actual\": {\"tea\": \"chai\"},\n    \"expected\": {\"tea\": \"black\"}\n  }\n}"
				},
				{
					"simStepId": "ef02992f-6021-45fe-b499-e25cbad27a50",
					"diagramNodeId": "873db434-a86b-4d1e-b89d-8382ae899428",
					"simStepLabel": "Transmitting Assertion Arguments",
					"simStepDescription": "The `actual` object, `expected` object, and the custom message are passed as arguments to the `assert.deepEqual` function.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "lib/chai/interface/assert.js",
						"startLine": "219",
						"endLine": "219",
						"relevantVariables": [
							"act",
							"exp",
							"msg"
						]
					},
					"inputDataExample": "{\n  \"act\": {\"tea\": \"chai\"},\n  \"exp\": {\"tea\": \"black\"},\n  \"msg\": \"blah\"\n}",
					"outputDataExample": "{\n  \"act\": {\"tea\": \"chai\"},\n  \"exp\": {\"tea\": \"black\"},\n  \"msg\": \"blah\"\n}"
				},
				{
					"simStepId": "c2ab5700-b28e-47da-b48e-64702ccbfc6c",
					"diagramNodeId": "e835a025-f767-405a-a33a-c0f542b392f7",
					"simStepLabel": "Creating an Assertion Object",
					"simStepDescription": "Inside `assert.deepEqual`, a new `Assertion` object is instantiated. This object holds the `actual` value (`act`) and other metadata (flags) for the assertion chain. The BDD-style `.to.eql(exp)` method is then immediately called on this new object to perform the comparison.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "lib/chai/interface/assert.js",
						"startLine": "220",
						"endLine": "220",
						"relevantVariables": [
							"Assertion",
							"eql"
						]
					},
					"inputDataExample": "{\n  \"act\": {\"tea\": \"chai\"},\n  \"exp\": {\"tea\": \"black\"},\n  \"msg\": \"blah\"\n}",
					"outputDataExample": "{\n  \"assertionObject\": {\n    \"__flags\": {\n      \"object\": {\"tea\": \"chai\"},\n      \"message\": \"blah\",\n      \"ssfi\": \"[Function: deepEqual]\",\n      \"lockSsfi\": true\n    }\n  }\n}"
				},
				{
					"simStepId": "b98120ff-1aa4-4348-b4d8-e52c6e0a27c2",
					"diagramNodeId": "80b86db7-c802-4db0-afd1-2bf07c766061",
					"simStepLabel": "Invoking the `.eql` method",
					"simStepDescription": "The `.eql` method, which handles deep equality, is called on the `Assertion` object. The `expected` value is passed as an argument. This triggers the deep equality comparison logic located in core assertions.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "lib/chai/core/assertions.js",
						"startLine": "1188",
						"endLine": "1188",
						"relevantVariables": [
							"assertEql"
						]
					},
					"inputDataExample": "{\n  \"expected_value\": {\"tea\": \"black\"}\n}",
					"outputDataExample": "{\n  \"expected_value\": {\"tea\": \"black\"}\n}"
				},
				{
					"simStepId": "95a68fa3-8b62-4ba9-ab86-83b614b68d43",
					"diagramNodeId": "7e1b33fe-16d9-4d47-9794-0dd9f3d99673",
					"simStepLabel": "Performing Deep Equality Check",
					"simStepDescription": "The `assertEql` function (the implementation for `.eql`) retrieves the deep equality function from the `deep-eql` utility. It then compares the `actual` object (stored in the assertion's flags) with the `expected` object. In this case, the comparison returns `false`.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "lib/chai/core/assertions.js",
						"startLine": "1190",
						"endLine": "1196",
						"relevantVariables": [
							"eql",
							"flag",
							"this.assert"
						]
					},
					"inputDataExample": "{\n  \"actual\": {\"tea\": \"chai\"},\n  \"expected\": {\"tea\": \"black\"}\n}",
					"outputDataExample": "{\n  \"comparisonResult\": false\n}"
				},
				{
					"simStepId": "39b93340-7bd0-441d-a8c3-61204d721a90",
					"diagramNodeId": "fd96522e-38e1-4722-9f0d-c1ee8ce25178",
					"simStepLabel": "Passing Comparison Result to Core `assert`",
					"simStepDescription": "The boolean result (`false`) of the deep equality check, along with template error messages, the expected value, and the actual value, are passed to the core `Assertion.prototype.assert` method, which is responsible for handling all assertion outcomes.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "lib/chai/assertion.js",
						"startLine": "161",
						"endLine": "161",
						"relevantVariables": [
							"_expr",
							"msg",
							"_negateMsg",
							"expected"
						]
					},
					"inputDataExample": "{\n  \"_expr\": false,\n  \"msg\": \"expected #{this} to deeply equal #{exp}\",\n  \"_negateMsg\": \"expected #{this} to not deeply equal #{exp}\",\n  \"expected\": {\"tea\": \"black\"}\n}",
					"outputDataExample": "{\n  \"_expr\": false,\n  \"msg\": \"expected #{this} to deeply equal #{exp}\",\n  \"_negateMsg\": \"expected #{this} to not deeply equal #{exp}\",\n  \"expected\": {\"tea\": \"black\"}\n}"
				},
				{
					"simStepId": "ae18b83b-875b-445d-abeb-50324decfa1a",
					"diagramNodeId": "7edfbeb5-0c32-424f-8365-128c3ca419ab",
					"simStepLabel": "Evaluating Assertion and Preparing Error",
					"simStepDescription": "The core `assert` method receives the `false` comparison result. Since the check failed (`!ok`), it proceeds to generate a detailed error message. It uses `util.getMessage` to replace template placeholders like `#{this}` and `#{exp}` with inspected string representations of the actual and expected values.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "lib/chai/assertion.js",
						"startLine": "163",
						"endLine": "164",
						"relevantVariables": [
							"ok",
							"util.getMessage",
							"msg"
						]
					},
					"inputDataExample": "{\n  \"_expr\": false,\n  \"msg\": \"expected #{this} to deeply equal #{exp}\",\n  \"expected\": {\"tea\": \"black\"},\n  \"actual_from_flag\": {\"tea\": \"chai\"}\n}",
					"outputDataExample": "{\n  \"formattedMessage\": \"blah: expected { tea: 'chai' } to deeply equal { tea: 'black' }\"\n}"
				},
				{
					"simStepId": "91b7f77a-84dd-49bc-8736-a7bf94925ff2",
					"diagramNodeId": "019c2fe0-4d65-43d2-afe4-cfccf451e2b3",
					"simStepLabel": "Transmitting Error Details to `AssertionError`",
					"simStepDescription": "The final formatted message and an object containing the `actual` value, `expected` value, and `showDiff` flag are passed to the `AssertionError` constructor to create a rich error object.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "lib/chai/assertion.js",
						"startLine": "181",
						"endLine": "181",
						"relevantVariables": [
							"AssertionError",
							"msg",
							"assertionErrorObjectProperties"
						]
					},
					"inputDataExample": "{\n  \"message\": \"blah: expected { tea: 'chai' } to deeply equal { tea: 'black' }\",\n  \"properties\": {\n    \"actual\": {\"tea\": \"chai\"},\n    \"expected\": {\"tea\": \"black\"},\n    \"showDiff\": true\n  }\n}",
					"outputDataExample": "{\n  \"message\": \"blah: expected { tea: 'chai' } to deeply equal { tea: 'black' }\",\n  \"properties\": {\n    \"actual\": {\"tea\": \"chai\"},\n    \"expected\": {\"tea\": \"black\"},\n    \"showDiff\": true\n  }\n}"
				},
				{
					"simStepId": "aa64de71-da77-4554-a657-f7e1b144751a",
					"diagramNodeId": "f1c5ff6e-d843-410e-9e49-51660521e9d1",
					"simStepLabel": "Throwing the `AssertionError`",
					"simStepDescription": "A new `AssertionError` is instantiated with all the relevant details. This error object is then thrown, causing the test to fail. The test runner catches this error and reports the failure to the user, displaying the detailed message and diff if configured.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "lib/chai/assertion.js",
						"startLine": "181",
						"endLine": "186",
						"relevantVariables": [
							"AssertionError"
						]
					},
					"inputDataExample": "{\n  \"message\": \"blah: expected { tea: 'chai' } to deeply equal { tea: 'black' }\",\n  \"properties\": {\n    \"actual\": {\"tea\": \"chai\"},\n    \"expected\": {\"tea\": \"black\"},\n    \"showDiff\": true\n  }\n}",
					"outputDataExample": "{\n  \"error\": {\n    \"message\": \"blah: expected { tea: 'chai' } to deeply equal { tea: 'black' }\",\n    \"actual\": {\"tea\": \"chai\"},\n    \"expected\": {\"tea\": \"black\"}\n  }\n}"
				}
			],
			"description": "<ul><li>Provides a static, function-based assertion style similar to Node</li><li>js's built-in <code>assert</code> module</li><li>Each assertion is a direct function call (e</li><li>g</li><li>, <code>assert</li><li>equal(foo, 'bar')</code>)</li><li>Offers a wide range of assertion functions for equality, type checking, truthiness, and more</li><li>Generally used in Test-Driven Development (TDD) workflows</li></ul>",
			"simulationNodesAndEdges": {
				"1ff0ef00-7650-4720-8e55-fe8c4297be0f": {
					"simStepIds": [
						"50e26f9d-f638-4309-9221-1627533d9fd5"
					]
				},
				"e835a025-f767-405a-a33a-c0f542b392f7": {
					"simStepIds": [
						"c2ab5700-b28e-47da-b48e-64702ccbfc6c"
					]
				},
				"7e1b33fe-16d9-4d47-9794-0dd9f3d99673": {
					"simStepIds": [
						"95a68fa3-8b62-4ba9-ab86-83b614b68d43"
					]
				},
				"7edfbeb5-0c32-424f-8365-128c3ca419ab": {
					"simStepIds": [
						"ae18b83b-875b-445d-abeb-50324decfa1a"
					]
				},
				"f1c5ff6e-d843-410e-9e49-51660521e9d1": {
					"simStepIds": [
						"aa64de71-da77-4554-a657-f7e1b144751a"
					]
				},
				"873db434-a86b-4d1e-b89d-8382ae899428": {
					"simStepIds": [
						"ef02992f-6021-45fe-b499-e25cbad27a50"
					]
				},
				"80b86db7-c802-4db0-afd1-2bf07c766061": {
					"simStepIds": [
						"b98120ff-1aa4-4348-b4d8-e52c6e0a27c2"
					]
				},
				"fd96522e-38e1-4722-9f0d-c1ee8ce25178": {
					"simStepIds": [
						"39b93340-7bd0-441d-a8c3-61204d721a90"
					]
				},
				"019c2fe0-4d65-43d2-afe4-cfccf451e2b3": {
					"simStepIds": [
						"91b7f77a-84dd-49bc-8736-a7bf94925ff2"
					]
				}
			},
			"isAIGenerated": true,
			"keywords": "assert, isOk, deepEqual",
			"generationPrompt": "Write classical TDD-style assertions using the `assert` interface",
			"generationKeywords": "assert, isOk, deepEqual"
		},
		"Write BDD-style assertions using the `should` property": {
			"name": "Write BDD-style assertions using the `should` property",
			"simSteps": [
				{
					"simStepId": "acf99cce-daff-4078-a332-e2600bb3824e",
					"diagramNodeId": "4c2d40e1-545b-4139-bbe7-a6a013a0b3cb",
					"simStepLabel": "Initialization: Activate `should` Interface",
					"simStepDescription": "The user activates the `should` assertion style, typically by calling `chai.should()`. This executes the `loadShould` function which is responsible for setting up the BDD-style interface.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "lib/chai/interface/should.js",
						"startLine": "12",
						"endLine": "228",
						"relevantVariables": [
							"loadShould"
						]
					},
					"inputDataExample": "{}",
					"outputDataExample": "{\"fail\": \"[function]\", \"equal\": \"[function]\", \"Throw\": \"[function]\", \"exist\": \"[function]\", \"not\": {\"equal\": \"[function]\", \"Throw\": \"[function]\", \"exist\": \"[function]\"}}"
				},
				{
					"simStepId": "3feaf417-d874-4376-8a94-99247d36b533",
					"diagramNodeId": "b0ae7ae0-8463-4138-8fa1-502e7f67c9ee",
					"simStepLabel": "Initialization: Trigger Prototype Modification",
					"simStepDescription": "The activation call triggers a crucial side-effect: modifying the global `Object.prototype` to add the `.should` property. This is what makes the property available on all objects.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "lib/chai/interface/should.js",
						"startLine": "46",
						"endLine": "51",
						"relevantVariables": [
							"Object.defineProperty",
							"Object.prototype"
						]
					},
					"inputDataExample": "{\"target\": \"Object.prototype\", \"property\": \"should\", \"descriptor\": {\"get\": \"shouldGetter\", \"set\": \"shouldSetter\", \"configurable\": true}}",
					"outputDataExample": "{\"target\": \"Object.prototype\", \"property\": \"should\", \"descriptor\": {\"get\": \"shouldGetter\", \"set\": \"shouldSetter\", \"configurable\": true}}"
				},
				{
					"simStepId": "442c0d21-f8f0-4d4e-aba9-bf042cb1ab8a",
					"diagramNodeId": "59be314e-78d5-49d0-b962-bf711c994978",
					"simStepLabel": "Initialization: Add `.should` Getter to Object.prototype",
					"simStepDescription": "`Object.defineProperty` adds the `should` property with a custom getter (`shouldGetter`) to `Object.prototype`. Now any object in JavaScript will have access to this `.should` property via its prototype chain.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "lib/chai/interface/should.js",
						"startLine": "46",
						"endLine": "51",
						"relevantVariables": [
							"shouldGetter",
							"shouldSetter"
						]
					},
					"inputDataExample": "{\"target\": \"Object.prototype\", \"property\": \"should\"}",
					"outputDataExample": "{\"status\": \"complete\", \"sideEffect\": \"Object.prototype is now extended with a 'should' property.\"}"
				},
				{
					"simStepId": "b13560a9-f13f-46b2-bd81-a11b3521e58f",
					"diagramNodeId": "29ddb142-2459-46fa-b75f-7bd1b5a855c3",
					"simStepLabel": "Assertion: Access `.should` Property",
					"simStepDescription": "The test code accesses the `.should` property on a target object (e.g., the string 'test'). Since the property doesn't exist on the string itself, the JavaScript engine looks up the prototype chain and finds the getter on `Object.prototype`, which is then executed.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "lib/chai/interface/should.js",
						"startLine": "48",
						"endLine": "48",
						"relevantVariables": [
							"shouldGetter"
						]
					},
					"inputDataExample": "{\"object\": \"test\"}",
					"outputDataExample": "{\"triggered\": \"shouldGetter\", \"context\": \"test\"}"
				},
				{
					"simStepId": "d83fef71-09df-4d0d-b945-402208573085",
					"diagramNodeId": "5b89f24c-4bd1-496d-91df-80d188f400cc",
					"simStepLabel": "Assertion: Invoke `shouldGetter`",
					"simStepDescription": "The `shouldGetter` function is invoked with the target object ('test') as its context (`this`).",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "lib/chai/interface/should.js",
						"startLine": "18",
						"endLine": "27",
						"relevantVariables": [
							"shouldGetter"
						]
					},
					"inputDataExample": "{\"this\": \"test\"}",
					"outputDataExample": "{\"this\": \"test\"}"
				},
				{
					"simStepId": "f9e7b88f-8956-4e45-838d-77484d39b33b",
					"diagramNodeId": "1c04e1fd-12be-4748-8350-56b2dcb56d36",
					"simStepLabel": "Assertion: Create New Assertion Instance",
					"simStepDescription": "The `shouldGetter` creates a new `Assertion` object. The target object ('test') is passed to the `Assertion` constructor, storing it in an internal `object` flag for later use by the assertion logic.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "lib/chai/interface/should.js",
						"startLine": "26",
						"endLine": "26",
						"relevantVariables": [
							"Assertion"
						]
					},
					"inputDataExample": "{\"constructorParams\": [\"test\", null, \"[Function shouldGetter]\"]}",
					"outputDataExample": "{\"assertionInstance\": {\"__flags\": {\"object\": \"test\"}}}"
				},
				{
					"simStepId": "4c2d035f-6342-4cba-8cef-faf80c11316f",
					"diagramNodeId": "b460ae4c-64b7-4ac5-9736-84946e6973e4",
					"simStepLabel": "Assertion: Pass Assertion Object Through Chain",
					"simStepDescription": "The newly created `Assertion` instance is returned and passed through any subsequent language chains, such as `.be`. These are simple property getters that return `this` to allow for more readable assertions.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "lib/chai/core/assertions.js",
						"startLine": "231",
						"endLine": "233",
						"relevantVariables": [
							"addProperty",
							"Assertion.prototype"
						]
					},
					"inputDataExample": "{\"assertionInstance\": {\"__flags\": {\"object\": \"test\"}}}",
					"outputDataExample": "{\"assertionInstance\": {\"__flags\": {\"object\": \"test\"}}}"
				},
				{
					"simStepId": "4b9fbed0-f3c8-4802-8efa-3361f71fda4d",
					"diagramNodeId": "a1109ae1-7092-4965-b238-8a25b920c091",
					"simStepLabel": "Assertion: Execute Terminal Assertion Method",
					"simStepDescription": "The final method in the chain, `.a('string')`, is called. This is an alias for the `typeOf` assertion. It retrieves the stored object ('test') from the assertion instance's flags and checks if its type matches the expected type ('string').",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "lib/chai/core/assertions.js",
						"startLine": "895",
						"endLine": "909",
						"relevantVariables": [
							"assertTypeOf"
						]
					},
					"inputDataExample": "{\"method\": \"a\", \"arguments\": [\"string\"]}",
					"outputDataExample": "{\"result\": \"pass\"}"
				},
				{
					"simStepId": "11b78e56-2cd3-428c-b99b-068d1ef09172",
					"diagramNodeId": "",
					"simStepLabel": "Assertion: Final Result",
					"simStepDescription": "The assertion logic inside `assertTypeOf` completes. If the check is successful, nothing is returned and the test execution continues. If it fails, an `AssertionError` is constructed and thrown, which typically causes the test to fail.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "lib/chai/core/assertions.js",
						"startLine": "902",
						"endLine": "908",
						"relevantVariables": [
							"this.assert"
						]
					},
					"inputDataExample": "{\"actualType\": \"string\", \"expectedType\": \"string\", \"negate\": false}",
					"outputDataExample": "{\"status\": \"passed\"}"
				}
			],
			"description": "<ul><li>Extends <code>Object</li><li>prototype</code> to provide a <code></li><li>should</code> property on all objects, enabling a chainable BDD syntax</li><li>Allows for assertions that read like natural language (e</li><li>g</li><li>, <code>foo</li><li>should</li><li>be</li><li>a('string')</code>)</li><li>Requires an initial call to <code>should()</code> to activate the functionality</li><li>Offers the same chainable assertions as the <code>expect</code> interface but with the caveat of modifying a global prototype</li></ul>",
			"simulationNodesAndEdges": {
				"4c2d40e1-545b-4139-bbe7-a6a013a0b3cb": {
					"simStepIds": [
						"acf99cce-daff-4078-a332-e2600bb3824e"
					]
				},
				"59be314e-78d5-49d0-b962-bf711c994978": {
					"simStepIds": [
						"442c0d21-f8f0-4d4e-aba9-bf042cb1ab8a"
					]
				},
				"29ddb142-2459-46fa-b75f-7bd1b5a855c3": {
					"simStepIds": [
						"b13560a9-f13f-46b2-bd81-a11b3521e58f"
					]
				},
				"1c04e1fd-12be-4748-8350-56b2dcb56d36": {
					"simStepIds": [
						"f9e7b88f-8956-4e45-838d-77484d39b33b"
					]
				},
				"a1109ae1-7092-4965-b238-8a25b920c091": {
					"simStepIds": [
						"4b9fbed0-f3c8-4802-8efa-3361f71fda4d"
					]
				},
				"b0ae7ae0-8463-4138-8fa1-502e7f67c9ee": {
					"simStepIds": [
						"3feaf417-d874-4376-8a94-99247d36b533"
					]
				},
				"5b89f24c-4bd1-496d-91df-80d188f400cc": {
					"simStepIds": [
						"d83fef71-09df-4d0d-b945-402208573085"
					]
				},
				"b460ae4c-64b7-4ac5-9736-84946e6973e4": {
					"simStepIds": [
						"4c2d035f-6342-4cba-8cef-faf80c11316f"
					]
				}
			},
			"isAIGenerated": true,
			"keywords": "should, Object.prototype, shouldGetter",
			"generationPrompt": "Write BDD-style assertions using the `should` property",
			"generationKeywords": "should, Object.prototype, shouldGetter"
		},
		"Perform powerful value and type assertions": {
			"name": "Perform powerful value and type assertions",
			"simSteps": [
				{
					"simStepId": "2d29b02e-fb70-46a9-b0f4-5adebf7bdbb2",
					"diagramNodeId": "78c5daf9-33aa-4345-8ce8-0b3d6779ad32",
					"simStepLabel": "Flow 1 (expect): Call `expect()` to Start Assertion",
					"simStepDescription": "The user initiates an assertion chain by calling `expect()` with the value to be tested. This function creates and returns a new `Assertion` instance, which holds the target value and other metadata for the chain.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "lib/chai/interface/expect.js",
						"startLine": "16",
						"endLine": "18",
						"relevantVariables": [
							"expect",
							"Assertion"
						]
					},
					"inputDataExample": "{\"val\": {\"a\": 1}, \"message\": \"Optional custom message\"}",
					"outputDataExample": "{\"__flags\":{\"ssfi\":\"[Function: expect]\",\"lockSsfi\":null,\"object\":{\"a\":1},\"message\":\"Optional custom message\",\"eql\":\"[Function: eql]\"}}"
				},
				{
					"simStepId": "ef19b0bb-0a81-4c70-ac29-b4ec8c85a589",
					"diagramNodeId": "48b56c37-0c89-4129-9ecc-6639a1b56534",
					"simStepLabel": "Flow 1 (expect): Assertion Object Propagation",
					"simStepDescription": "The newly created `Assertion` object is returned, allowing subsequent properties and methods to be chained.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "lib/chai/interface/expect.js",
						"startLine": "17",
						"endLine": "17",
						"relevantVariables": [
							"new Assertion(val, message)"
						]
					},
					"inputDataExample": "{\"__flags\":{\"ssfi\":\"[Function: expect]\",\"lockSsfi\":null,\"object\":{\"a\":1},\"message\":\"Optional custom message\",\"eql\":\"[Function: eql]\"}}",
					"outputDataExample": "{\"__flags\":{\"ssfi\":\"[Function: expect]\",\"lockSsfi\":null,\"object\":{\"a\":1},\"message\":\"Optional custom message\",\"eql\":\"[Function: eql]\"}}"
				},
				{
					"simStepId": "1a394d13-0086-4c4d-b853-c0dcc32a6c4a",
					"diagramNodeId": "d0e4abd6-88c2-4a83-a735-efeb4261bc1a",
					"simStepLabel": "Flow 1 (expect): Access `.deep` Property to Set Flag",
					"simStepDescription": "The `.deep` property is accessed in the chain. This is a getter that sets a 'deep' flag on the `Assertion` instance to `true`, modifying the behavior of subsequent equality assertions to perform a deep, recursive comparison.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "lib/chai/core/assertions.js",
						"startLine": "131",
						"endLine": "133",
						"relevantVariables": [
							"Assertion.addProperty",
							"deep",
							"flag"
						]
					},
					"inputDataExample": "{\"__flags\":{\"object\":{\"a\":1}}}",
					"outputDataExample": "{\"__flags\":{\"object\":{\"a\":1},\"deep\":true}}"
				},
				{
					"simStepId": "e1db538c-c652-4ed2-bf4d-3a3937b0707f",
					"diagramNodeId": "87ac7881-87ff-48d0-8cbd-2c14d57c526f",
					"simStepLabel": "Flow 1 (expect): Modified Assertion Object Propagation",
					"simStepDescription": "The `Assertion` object, now with the `deep` flag enabled, is passed along the chain to the next method.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "lib/chai/core/assertions.js",
						"startLine": "132",
						"endLine": "132",
						"relevantVariables": [
							"flag(this, 'deep', true)"
						]
					},
					"inputDataExample": "{\"__flags\":{\"object\":{\"a\":1},\"deep\":true}}",
					"outputDataExample": "{\"__flags\":{\"object\":{\"a\":1},\"deep\":true}}"
				},
				{
					"simStepId": "217b5149-3ea4-4940-8139-454ee1ca8997",
					"diagramNodeId": "311ab964-3643-4a03-a2eb-86baa60c3803",
					"simStepLabel": "Flow 1 (expect): Call `.equal()` to Perform Comparison",
					"simStepDescription": "The `.equal()` method is called with the expected value. It checks if the `deep` flag is set. Since it is, it performs a deep equality comparison between the actual value (`{a: 1}`) and the expected value (`{a: 1}`). The result of this comparison is then passed to the internal `.assert()` method.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "lib/chai/core/assertions.js",
						"startLine": "1116",
						"endLine": "1133",
						"relevantVariables": [
							"assertEqual",
							"isDeep",
							"this.assert"
						]
					},
					"inputDataExample": "{\"val\":{\"a\":1}}",
					"outputDataExample": "{\"_expr\":true,\"msg\":\"expected #{this} to deeply equal #{exp}\",\"_negateMsg\":\"expected #{this} to not deeply equal #{exp}\",\"expected\":{\"a\":1},\"_actual\":{\"a\":1}}"
				},
				{
					"simStepId": "609a9228-dfda-4fdb-b53b-5a5e49be22ac",
					"diagramNodeId": "9134c622-6ef3-42f8-afb4-08b8c1a32d61",
					"simStepLabel": "Flow 1 (expect): Pass Result to Core Assert Logic",
					"simStepDescription": "The boolean result of the deep equality check (`true`), along with positive and negative assertion messages, is passed to the core `.assert()` method for final processing.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "lib/chai/core/assertions.js",
						"startLine": "1121",
						"endLine": "1121",
						"relevantVariables": [
							"this.assert"
						]
					},
					"inputDataExample": "{\"_expr\":true,\"msg\":\"expected #{this} to deeply equal #{exp}\",\"_negateMsg\":\"expected #{this} to not deeply equal #{exp}\",\"expected\":{\"a\":1},\"_actual\":{\"a\":1}}",
					"outputDataExample": "{\"_expr\":true,\"msg\":\"expected #{this} to deeply equal #{exp}\",\"_negateMsg\":\"expected #{this} to not deeply equal #{exp}\",\"expected\":{\"a\":1},\"_actual\":{\"a\":1}}"
				},
				{
					"simStepId": "b1e6f16e-f82c-4a24-9a4b-aed194145180",
					"diagramNodeId": "33c4932a-9999-4a12-a99c-e7fa68d52a3b",
					"simStepLabel": "Flow 1 (expect): Final Assertion Execution",
					"simStepDescription": "The core `.assert()` method on the `Assertion` prototype evaluates the expression passed to it. Since the expression is `true`, the assertion passes, and execution continues without throwing an error.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "lib/chai/assertion.js",
						"startLine": "159",
						"endLine": "183",
						"relevantVariables": [
							"assert",
							"util.test",
							"ok",
							"AssertionError"
						]
					},
					"inputDataExample": "{\"_expr\":true,\"msg\":\"expected { a: 1 } to deeply equal { a: 1 }\"}",
					"outputDataExample": "null"
				},
				{
					"simStepId": "a52400a4-a4c6-4519-b969-bc376e992511",
					"diagramNodeId": "5d95bf56-eb2d-4a9a-84ff-c22854329ade",
					"simStepLabel": "Flow 2 (assert): Call `assert.deepEqual()`",
					"simStepDescription": "The user calls `assert.deepEqual()` with the actual and expected values. This function acts as a shortcut, creating a new `Assertion` instance internally and calling the `.to.eql()` method on it.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "lib/chai/interface/assert.js",
						"startLine": "216",
						"endLine": "218",
						"relevantVariables": [
							"assert.deepEqual",
							"new Assertion(act, msg, assert.deepEqual, true).to.eql(exp)"
						]
					},
					"inputDataExample": "{\"act\":{\"a\":1},\"exp\":{\"a\":1},\"msg\":\"Optional message\"}",
					"outputDataExample": "{\"__flags\":{\"object\":{\"a\":1},\"message\":\"Optional message\"}}"
				},
				{
					"simStepId": "651b4b15-e6ed-41da-8993-1d475ca13f6d",
					"diagramNodeId": "0306bdf0-17b6-4e64-b59a-bcb5f9487753",
					"simStepLabel": "Flow 2 (assert): Internal Call to `eql`",
					"simStepDescription": "The `assert.deepEqual` function internally creates an `Assertion` object and immediately invokes the `.eql()` method, which handles deep equality checks.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "lib/chai/interface/assert.js",
						"startLine": "217",
						"endLine": "217",
						"relevantVariables": [
							"new Assertion(act, msg, assert.deepEqual, true).to.eql(exp)"
						]
					},
					"inputDataExample": "{\"__flags\":{\"object\":{\"a\":1},\"message\":\"Optional message\"}}",
					"outputDataExample": "{\"__flags\":{\"object\":{\"a\":1},\"message\":\"Optional message\"}}"
				},
				{
					"simStepId": "0ef6d789-f28a-461c-af3a-397cda0df6c0",
					"diagramNodeId": "6eef333b-2667-42fb-b1d6-1ade44f08169",
					"simStepLabel": "Flow 2 (assert): Execute `.eql()` Deep Comparison",
					"simStepDescription": "The `.eql()` method is executed. It uses a deep equality comparison utility to compare the actual and expected objects. The boolean result is then passed to the internal `.assert()` method.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "lib/chai/core/assertions.js",
						"startLine": "1180",
						"endLine": "1191",
						"relevantVariables": [
							"assertEql",
							"eql",
							"this.assert"
						]
					},
					"inputDataExample": "{\"obj\":{\"a\":1},\"msg\":\"Optional message\"}",
					"outputDataExample": "{\"_expr\":true,\"msg\":\"expected #{this} to deeply equal #{exp}\",\"_negateMsg\":\"expected #{this} to not deeply equal #{exp}\",\"expected\":{\"a\":1}}"
				},
				{
					"simStepId": "8f8a132f-645a-4cf6-bb6a-eb331ba80e2b",
					"diagramNodeId": "24352a06-6984-42d3-83f4-a9736f36f8c2",
					"simStepLabel": "Flow 2 (assert): Pass Result to Core Assert Logic",
					"simStepDescription": "The boolean result (`true`) from the deep equality check, along with assertion messages, is passed to the core `.assert()` method for final processing.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "lib/chai/core/assertions.js",
						"startLine": "1184",
						"endLine": "1184",
						"relevantVariables": [
							"this.assert"
						]
					},
					"inputDataExample": "{\"_expr\":true,\"msg\":\"expected #{this} to deeply equal #{exp}\",\"_negateMsg\":\"expected #{this} to not deeply equal #{exp}\",\"expected\":{\"a\":1}}",
					"outputDataExample": "{\"_expr\":true,\"msg\":\"expected #{this} to deeply equal #{exp}\",\"_negateMsg\":\"expected #{this} to not deeply equal #{exp}\",\"expected\":{\"a\":1}}"
				},
				{
					"simStepId": "9870feb3-8225-47fd-9c93-d10b98d026d7",
					"diagramNodeId": "aa2ef5c6-dd9d-48fa-ae4b-6c7e431eabcf",
					"simStepLabel": "Flow 2 (assert): Final Assertion Execution",
					"simStepDescription": "The core `.assert()` method evaluates the expression. Since it's `true`, the assertion passes, and execution completes without any errors.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "lib/chai/assertion.js",
						"startLine": "159",
						"endLine": "183",
						"relevantVariables": [
							"assert",
							"util.test",
							"ok",
							"AssertionError"
						]
					},
					"inputDataExample": "{\"_expr\":true,\"msg\":\"expected { a: 1 } to deeply equal { a: 1 }\"}",
					"outputDataExample": "null"
				},
				{
					"simStepId": "ef2a8e1a-5e6e-45c9-b04a-985fa1c48b52",
					"diagramNodeId": "87dbf5e6-441d-4764-9508-43ab5d27a5b9",
					"simStepLabel": "Flow 3 (type check): Call `assert.typeOf()`",
					"simStepDescription": "The user calls `assert.typeOf()` with a value and the expected type name. This function creates a new `Assertion` instance and calls the chain `.to.be.a(type)`.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "lib/chai/interface/assert.js",
						"startLine": "829",
						"endLine": "831",
						"relevantVariables": [
							"assert.typeOf",
							"new Assertion(val, msg, assert.typeOf, true).to.be.a(type)"
						]
					},
					"inputDataExample": "{\"val\":\"test\",\"type\":\"string\",\"msg\":\"Optional message\"}",
					"outputDataExample": "{\"__flags\":{\"object\":\"test\",\"message\":\"Optional message\"}}"
				},
				{
					"simStepId": "5cdbf0f8-d933-46c1-9de9-c91ac66ef06f",
					"diagramNodeId": "9019d3ca-3407-4b99-85cc-b3e58ffebd0f",
					"simStepLabel": "Flow 3 (type check): Internal Call to `.a()`",
					"simStepDescription": "The `Assertion` object is passed through the `.to.be` language chainers to the `.a()` method for type checking.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "lib/chai/interface/assert.js",
						"startLine": "830",
						"endLine": "830",
						"relevantVariables": [
							".to.be.a(type)"
						]
					},
					"inputDataExample": "{\"__flags\":{\"object\":\"test\",\"message\":\"Optional message\"}}",
					"outputDataExample": "{\"__flags\":{\"object\":\"test\",\"message\":\"Optional message\"}}"
				},
				{
					"simStepId": "0c66b723-e954-45a4-9bff-654a9ae5d898",
					"diagramNodeId": "867c90fe-63e6-47e3-a6bc-8a4780fb7948",
					"simStepLabel": "Flow 3 (type check): Execute `.a()` Type Assertion",
					"simStepDescription": "The `.a()` method (aliased from `an`) detects the type of the target object using an internal `type-detect` utility. It compares the detected type with the expected type and passes the boolean result to the core `.assert()` method.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "lib/chai/core/assertions.js",
						"startLine": "327",
						"endLine": "348",
						"relevantVariables": [
							"an",
							"_.type",
							"detectedType",
							"this.assert"
						]
					},
					"inputDataExample": "{\"type\":\"string\",\"msg\":\"Optional message\"}",
					"outputDataExample": "{\"_expr\":true,\"msg\":\"expected #{this} to be a string\",\"_negateMsg\":\"expected #{this} not to be a string\"}"
				},
				{
					"simStepId": "7e926776-4565-4718-8fe0-67fccedad28a",
					"diagramNodeId": "84523489-6af8-4277-b04b-8dec81c35a09",
					"simStepLabel": "Flow 3 (type check): Pass Result to Core Assert Logic",
					"simStepDescription": "The result of the type comparison (`true`) and relevant messages are passed to the core `.assert()` method for final validation.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "lib/chai/core/assertions.js",
						"startLine": "340",
						"endLine": "345",
						"relevantVariables": [
							"this.assert"
						]
					},
					"inputDataExample": "{\"_expr\":true,\"msg\":\"expected #{this} to be a string\",\"_negateMsg\":\"expected #{this} not to be a string\"}",
					"outputDataExample": "{\"_expr\":true,\"msg\":\"expected #{this} to be a string\",\"_negateMsg\":\"expected #{this} not to be a string\"}"
				},
				{
					"simStepId": "e99f28a4-883f-4312-aa9b-b72b2c04d898",
					"diagramNodeId": "79cfa8e5-df26-4e28-a847-e90640711609",
					"simStepLabel": "Flow 3 (type check): Final Assertion Execution",
					"simStepDescription": "The core `.assert()` method evaluates the boolean expression. Since it is `true`, the assertion passes and execution completes successfully.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "lib/chai/assertion.js",
						"startLine": "159",
						"endLine": "183",
						"relevantVariables": [
							"assert",
							"util.test",
							"ok",
							"AssertionError"
						]
					},
					"inputDataExample": "{\"_expr\":true,\"msg\":\"expected 'test' to be a string\"}",
					"outputDataExample": "null"
				}
			],
			"description": "<ul><li>Provides a rich set of assertions to check for strict (<code>===</code>) and deep equality</li><li>Includes assertions for checking the type of a variable (e</li><li>g</li><li>, <code></li><li>a('string')</code>, <code>assert</li><li>isNumber()</code>)</li><li>Offers simple truthiness checks such as <code></li><li>ok</code>, <code></li><li>true</code>, <code></li><li>false</code>, <code></li><li>null</code>, and <code></li><li>undefined</code></li><li>The <code></li><li>deep</code> flag modifies equality and inclusion assertions to perform deep, recursive comparisons of objects and arrays</li></ul>",
			"simulationNodesAndEdges": {
				"78c5daf9-33aa-4345-8ce8-0b3d6779ad32": {
					"simStepIds": [
						"2d29b02e-fb70-46a9-b0f4-5adebf7bdbb2"
					]
				},
				"d0e4abd6-88c2-4a83-a735-efeb4261bc1a": {
					"simStepIds": [
						"1a394d13-0086-4c4d-b853-c0dcc32a6c4a"
					]
				},
				"311ab964-3643-4a03-a2eb-86baa60c3803": {
					"simStepIds": [
						"217b5149-3ea4-4940-8139-454ee1ca8997"
					]
				},
				"33c4932a-9999-4a12-a99c-e7fa68d52a3b": {
					"simStepIds": [
						"b1e6f16e-f82c-4a24-9a4b-aed194145180"
					]
				},
				"5d95bf56-eb2d-4a9a-84ff-c22854329ade": {
					"simStepIds": [
						"a52400a4-a4c6-4519-b969-bc376e992511"
					]
				},
				"6eef333b-2667-42fb-b1d6-1ade44f08169": {
					"simStepIds": [
						"0ef6d789-f28a-461c-af3a-397cda0df6c0"
					]
				},
				"aa2ef5c6-dd9d-48fa-ae4b-6c7e431eabcf": {
					"simStepIds": [
						"9870feb3-8225-47fd-9c93-d10b98d026d7"
					]
				},
				"87dbf5e6-441d-4764-9508-43ab5d27a5b9": {
					"simStepIds": [
						"ef2a8e1a-5e6e-45c9-b04a-985fa1c48b52"
					]
				},
				"867c90fe-63e6-47e3-a6bc-8a4780fb7948": {
					"simStepIds": [
						"0c66b723-e954-45a4-9bff-654a9ae5d898"
					]
				},
				"79cfa8e5-df26-4e28-a847-e90640711609": {
					"simStepIds": [
						"e99f28a4-883f-4312-aa9b-b72b2c04d898"
					]
				},
				"48b56c37-0c89-4129-9ecc-6639a1b56534": {
					"simStepIds": [
						"ef19b0bb-0a81-4c70-ac29-b4ec8c85a589"
					]
				},
				"87ac7881-87ff-48d0-8cbd-2c14d57c526f": {
					"simStepIds": [
						"e1db538c-c652-4ed2-bf4d-3a3937b0707f"
					]
				},
				"9134c622-6ef3-42f8-afb4-08b8c1a32d61": {
					"simStepIds": [
						"609a9228-dfda-4fdb-b53b-5a5e49be22ac"
					]
				},
				"0306bdf0-17b6-4e64-b59a-bcb5f9487753": {
					"simStepIds": [
						"651b4b15-e6ed-41da-8993-1d475ca13f6d"
					]
				},
				"24352a06-6984-42d3-83f4-a9736f36f8c2": {
					"simStepIds": [
						"8f8a132f-645a-4cf6-bb6a-eb331ba80e2b"
					]
				},
				"9019d3ca-3407-4b99-85cc-b3e58ffebd0f": {
					"simStepIds": [
						"5cdbf0f8-d933-46c1-9de9-c91ac66ef06f"
					]
				},
				"84523489-6af8-4277-b04b-8dec81c35a09": {
					"simStepIds": [
						"7e926776-4565-4718-8fe0-67fccedad28a"
					]
				}
			},
			"isAIGenerated": true,
			"keywords": "equal, deep.equal, a, an",
			"generationPrompt": "Perform powerful value and type assertions",
			"generationKeywords": "equal, deep.equal, a, an"
		},
		"Assert on object properties, keys, and structure": {
			"name": "Assert on object properties, keys, and structure",
			"simSteps": [
				{
					"simStepId": "746137a6-3544-4c70-bc76-88636ec01d1f",
					"diagramNodeId": "aeb183a9-7b12-49ce-ba93-64b25e9a7d80",
					"simStepLabel": "Property Assertion Flow: Start Assertion with `expect()`",
					"simStepDescription": "The test begins by calling `expect()` with the target object, which creates and returns a new `Assertion` object. This object holds the target (`_obj`) and various flags for the assertion chain. This is the entry point for the `expect` BDD interface.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "test/expect.js",
						"startLine": "1761",
						"endLine": "1761",
						"relevantVariables": [
							"expect"
						]
					},
					"inputDataExample": "{\"val\": {\"a\": {\"b\": \"c\"}}, \"message\": \"Test assertion\"}",
					"outputDataExample": "{\"__flags\": {\"object\": {\"a\": {\"b\": \"c\"}}, \"message\": \"Test assertion\"}}"
				},
				{
					"simStepId": "143eae5b-325d-40e7-8a16-158b8ac33b80",
					"diagramNodeId": "294876f2-5e6d-4265-b46c-31c4e00fe3b4",
					"simStepLabel": "Property Assertion Flow: Chain Assertion Object",
					"simStepDescription": "The newly created `Assertion` object, containing the target object and initial flags, is passed to the next link in the chain.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "lib/chai/assertion.js",
						"startLine": "189",
						"endLine": "191",
						"relevantVariables": [
							"_obj"
						]
					},
					"inputDataExample": "{\"__flags\": {\"object\": {\"a\": {\"b\": \"c\"}}, \"message\": \"Test assertion\"}}",
					"outputDataExample": "{\"__flags\": {\"object\": {\"a\": {\"b\": \"c\"}}, \"message\": \"Test assertion\"}}"
				},
				{
					"simStepId": "83534e6d-9a92-477c-a4d1-22454ac97df5",
					"diagramNodeId": "21921551-9e0d-4282-9389-af27e5d0114e",
					"simStepLabel": "Property Assertion Flow: Set `.nested` Flag",
					"simStepDescription": "Accessing the `.nested` property acts as a getter that sets the 'nested' flag on the assertion object to `true`. This informs subsequent property assertions, like `.property()`, to interpret the property name as a dot-separated path for deep object traversal.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "lib/chai/core/assertions.js",
						"startLine": "161",
						"endLine": "163",
						"relevantVariables": [
							"Assertion.addProperty",
							"nested",
							"flag"
						]
					},
					"inputDataExample": "{\"__flags\": {\"object\": {\"a\": {\"b\": \"c\"}}, \"message\": \"Test assertion\"}}",
					"outputDataExample": "{\"__flags\": {\"object\": {\"a\": {\"b\": \"c\"}}, \"message\": \"Test assertion\", \"nested\": true}}"
				},
				{
					"simStepId": "3ed10e00-58bb-4a7f-9226-fb364837d55d",
					"diagramNodeId": "42b0d357-26ae-4201-8bb2-bc90bf01af18",
					"simStepLabel": "Property Assertion Flow: Chain Assertion with `nested` flag",
					"simStepDescription": "The `Assertion` object, now with the `nested` flag enabled, is passed along the chain to the `.property()` method.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "lib/chai/utils/flag.js",
						"startLine": "25",
						"endLine": "33",
						"relevantVariables": [
							"flag"
						]
					},
					"inputDataExample": "{\"__flags\": {\"object\": {\"a\": {\"b\": \"c\"}}, \"message\": \"Test assertion\", \"nested\": true}}",
					"outputDataExample": "{\"__flags\": {\"object\": {\"a\": {\"b\": \"c\"}}, \"message\": \"Test assertion\", \"nested\": true}}"
				},
				{
					"simStepId": "9e76524f-243c-4912-9e3b-9edfef97cb41",
					"diagramNodeId": "55e16a39-7839-4cc4-9acc-239022050196",
					"simStepLabel": "Property Assertion Flow: Call `.property()` for Nested Value Check",
					"simStepDescription": "The `.property()` method is called with the nested path 'a.b' and the expected value 'c'. This triggers the `assertProperty` function, which contains the core logic for property-based assertions.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "lib/chai/core/assertions.js",
						"startLine": "1922",
						"endLine": "2021",
						"relevantVariables": [
							"assertProperty"
						]
					},
					"inputDataExample": "{\"name\": \"a.b\", \"val\": \"c\"}",
					"outputDataExample": "null"
				},
				{
					"simStepId": "893c4144-0feb-4ab7-8ae2-c21459d1301d",
					"diagramNodeId": "8aa2962b-1ace-4fb9-801f-1ee6e08d55ca",
					"simStepLabel": "Property Assertion Flow: Evaluate Nested Path",
					"simStepDescription": "Inside `assertProperty`, the 'nested' flag is detected. The path 'a.b' is parsed and evaluated against the target object to retrieve the value.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "lib/chai/core/assertions.js",
						"startLine": "1967",
						"endLine": "1972",
						"relevantVariables": [
							"isNested",
							"pathInfo",
							"_.getPathInfo"
						]
					},
					"inputDataExample": "{\"path\": \"a.b\", \"object\": {\"a\": {\"b\": \"c\"}}}",
					"outputDataExample": "{\"path\": \"a.b\", \"object\": {\"a\": {\"b\": \"c\"}}}"
				},
				{
					"simStepId": "99ab9e7b-2050-4310-853b-5668c613a660",
					"diagramNodeId": "7e8fede8-26fd-4cab-b856-2e346e9af8f2",
					"simStepLabel": "Property Assertion Flow: Assert Nested Property Value",
					"simStepDescription": "The retrieved value 'c' is compared to the expected value 'c'. Since they are strictly equal, the `this.assert()` method is called with a truthy expression, and the assertion passes without throwing an error.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "lib/chai/core/assertions.js",
						"startLine": "2001",
						"endLine": "2019",
						"relevantVariables": [
							"this.assert",
							"val",
							"value"
						]
					},
					"inputDataExample": "{\"actualValue\": \"c\", \"expectedValue\": \"c\", \"negate\": false}",
					"outputDataExample": "null"
				},
				{
					"simStepId": "91b02ae5-4d01-42ca-a06f-23279795bceb",
					"diagramNodeId": "b17fcc8d-22b2-44d6-952d-c85bcf91b534",
					"simStepLabel": "Own Property Flow: Transition to New Scenario",
					"simStepDescription": "This edge represents a conceptual separation to the next feature demonstration: checking for an object's own properties.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "test/expect.js",
						"startLine": "1845",
						"endLine": "1845",
						"relevantVariables": [
							"own.property"
						]
					},
					"inputDataExample": "{}",
					"outputDataExample": "{}"
				},
				{
					"simStepId": "64369f59-020e-4bb8-ac7a-c747618aadd4",
					"diagramNodeId": "d721a770-8000-427b-89be-8bf3b5844697",
					"simStepLabel": "Own Property Flow: Set `.own` Flag",
					"simStepDescription": "In a new assertion chain like `expect(obj).to.have.own.property('a')`, accessing the `.own` property sets the 'own' flag. This instructs `.property()` to ignore the prototype chain and only check for properties directly on the object.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "lib/chai/core/assertions.js",
						"startLine": "187",
						"endLine": "189",
						"relevantVariables": [
							"Assertion.addProperty",
							"own",
							"flag"
						]
					},
					"inputDataExample": "{\"__flags\": {\"object\": {\"a\": 1}}}",
					"outputDataExample": "{\"__flags\": {\"object\": {\"a\": 1}, \"own\": true}}"
				},
				{
					"simStepId": "a4173368-a694-439a-95dc-cfca62d3239f",
					"diagramNodeId": "c43a8570-5daa-4a31-88a9-19deb661f03c",
					"simStepLabel": "Own Property Flow: Chain Assertion with `own` flag",
					"simStepDescription": "The `Assertion` object, now with the `own` flag set, is passed to the `.property()` method.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "lib/chai/utils/flag.js",
						"startLine": "25",
						"endLine": "33",
						"relevantVariables": [
							"flag"
						]
					},
					"inputDataExample": "{\"__flags\": {\"object\": {\"a\": 1}, \"own\": true}}",
					"outputDataExample": "{\"__flags\": {\"object\": {\"a\": 1}, \"own\": true}}"
				},
				{
					"simStepId": "f9ac5136-9a58-4213-bd61-88563d93e56d",
					"diagramNodeId": "68e92267-8ca9-47a7-b850-37cb8ad1e9d4",
					"simStepLabel": "Own Property Flow: Check for Own Property",
					"simStepDescription": "The `assertProperty` function is called. It detects the `own` flag and uses `Object.prototype.hasOwnProperty.call(obj, name)` to verify that the property exists directly on the object, not on its prototype.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "lib/chai/core/assertions.js",
						"startLine": "1990",
						"endLine": "1991",
						"relevantVariables": [
							"isOwn",
							"hasProperty",
							"Object.prototype.hasOwnProperty"
						]
					},
					"inputDataExample": "{\"name\": \"a\", \"object\": {\"a\": 1}}",
					"outputDataExample": "{\"hasProperty\": true}"
				},
				{
					"simStepId": "a57499e7-3803-41ad-89f8-fc84bd9d659f",
					"diagramNodeId": "f0263f23-4936-4a4e-8c37-828310016668",
					"simStepLabel": "Own Property Flow: Transmit Existence Result",
					"simStepDescription": "The boolean result of the `hasOwnProperty` check is passed to the final `assert` call.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "lib/chai/core/assertions.js",
						"startLine": "1997",
						"endLine": "2000",
						"relevantVariables": [
							"hasProperty",
							"this.assert"
						]
					},
					"inputDataExample": "{\"hasProperty\": true}",
					"outputDataExample": "{\"hasProperty\": true}"
				},
				{
					"simStepId": "98676212-6869-431d-b44e-7153e6a408cc",
					"diagramNodeId": "58e1a797-b38e-41d5-9709-2f9f5045a403",
					"simStepLabel": "Own Property Flow: Assert Own Property Existence",
					"simStepDescription": "The `this.assert()` method receives `true` because the own property was found, and the assertion passes.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "lib/chai/assertion.js",
						"startLine": "143",
						"endLine": "187",
						"relevantVariables": [
							"assert",
							"AssertionError"
						]
					},
					"inputDataExample": "{\"expression\": true, \"message\": \"expected { a: 1 } to have own property 'a'\"}",
					"outputDataExample": "null"
				},
				{
					"simStepId": "68bf7b2f-befe-477b-ab65-7aa1ce1ef1f2",
					"diagramNodeId": "864ab690-d41e-45b6-8c8d-691624634457",
					"simStepLabel": "Keys Assertion Flow: Transition to New Scenario",
					"simStepDescription": "This edge represents a conceptual separation to the next feature demonstration: checking an object's keys.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "test/expect.js",
						"startLine": "2583",
						"endLine": "2583",
						"relevantVariables": [
							"keys"
						]
					},
					"inputDataExample": "{}",
					"outputDataExample": "{}"
				},
				{
					"simStepId": "fdcb8440-3208-4a45-a16d-7627b454a604",
					"diagramNodeId": "30085bc9-0bfa-4cc9-bcf7-d56a98b03843",
					"simStepLabel": "Keys Assertion Flow: Call `.keys()` Method",
					"simStepDescription": "In an assertion like `expect(obj).to.have.keys(['a', 'b'])`, the `.keys()` method is called. This invokes the `assertKeys` function, which handles the logic for comparing key sets.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "lib/chai/core/assertions.js",
						"startLine": "2480",
						"endLine": "2591",
						"relevantVariables": [
							"assertKeys"
						]
					},
					"inputDataExample": "{\"keys\": [\"a\", \"b\"]}",
					"outputDataExample": "null"
				},
				{
					"simStepId": "544a1bb7-f237-40d2-a73c-40b941cb44c4",
					"diagramNodeId": "6b40f6f8-f5bb-4f00-bdb5-2e8306e4bc90",
					"simStepLabel": "Keys Assertion Flow: Retrieve Actual Keys",
					"simStepDescription": "The `assertKeys` function retrieves the own enumerable properties from the target object to get the list of actual keys.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "lib/chai/core/assertions.js",
						"startLine": "2503",
						"endLine": "2503",
						"relevantVariables": [
							"actual",
							"_.getOwnEnumerableProperties"
						]
					},
					"inputDataExample": "{\"object\": {\"a\": 1, \"b\": 2}}",
					"outputDataExample": "{\"object\": {\"a\": 1, \"b\": 2}}"
				},
				{
					"simStepId": "82ec3d5c-525b-45d8-b031-689545566b02",
					"diagramNodeId": "5672de1c-1b3b-4e88-a903-227864227636",
					"simStepLabel": "Keys Assertion Flow: Compare Key Sets",
					"simStepDescription": "The list of actual keys is compared against the expected keys. Flags such as `.all` (default), `.any`, and `.include` determine the comparison rules (e.g., exact match, subset, or partial match). For a default `.keys()` call, it checks for an exact match of key sets.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "lib/chai/core/assertions.js",
						"startLine": "2539",
						"endLine": "2557",
						"relevantVariables": [
							"ok",
							"any",
							"all",
							"isEql",
							"actual",
							"expected"
						]
					},
					"inputDataExample": "{\"actual\": [\"a\", \"b\"], \"expected\": [\"a\", \"b\"], \"flags\": {\"all\": true}}",
					"outputDataExample": "{\"match\": true}"
				},
				{
					"simStepId": "e7ddf573-2be2-4827-97b3-60e9d4c9910b",
					"diagramNodeId": "8cfff0c7-4a27-436d-8afd-c3cc5c55e206",
					"simStepLabel": "Assert Interface Flow: Transition to New Scenario",
					"simStepDescription": "This edge represents a conceptual separation to demonstrate how the `assert` interface utilizes the same core logic.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "test/assert.js",
						"startLine": "1489",
						"endLine": "1489",
						"relevantVariables": [
							"assert.property"
						]
					},
					"inputDataExample": "{}",
					"outputDataExample": "{}"
				},
				{
					"simStepId": "520ae158-b4c5-4849-9966-b6286f224dd1",
					"diagramNodeId": "33e4ebe1-541d-4240-9a7e-89cf413453fb",
					"simStepLabel": "Assert Interface Flow: User Call to `assert.property()`",
					"simStepDescription": "A user calls `assert.property()` from Chai's `assert` interface. This function serves as a wrapper that internally uses the same `Assertion` logic as `expect` and `should`.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "lib/chai/interface/assert.js",
						"startLine": "1263",
						"endLine": "1265",
						"relevantVariables": [
							"assert.property"
						]
					},
					"inputDataExample": "{\"obj\": {\"tea\": \"green\"}, \"prop\": \"tea\"}",
					"outputDataExample": "null"
				},
				{
					"simStepId": "21ff4725-9d80-45d9-96ba-40ad65c9de71",
					"diagramNodeId": "",
					"simStepLabel": "Assert Interface Flow: Delegate to Core Property Assertion",
					"simStepDescription": "The `assert.property` function creates a new `Assertion` instance and immediately calls the `.property()` chain on it, transferring control to the core `assertProperty` function. This demonstrates how different interfaces converge on the same underlying assertion logic.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "lib/chai/interface/assert.js",
						"startLine": "1264",
						"endLine": "1264",
						"relevantVariables": [
							"new Assertion",
							".to.have.property"
						]
					},
					"inputDataExample": "{\"obj\": {\"tea\": \"green\"}, \"prop\": \"tea\"}",
					"outputDataExample": "{\"name\": \"tea\", \"flags\": {\"object\": {\"tea\": \"green\"}}}"
				}
			],
			"description": "<ul><li>Check for the existence of properties on an object using <code></li><li>property()</code></li><li>Assert on the value of a property with <code></li><li>property(name, value)</code></li><li>Verify the set of keys an object contains using <code></li><li>keys()</code></li><li>Use the <code></li><li>nested</code> flag to check deep properties with dot or bracket notation (e</li><li>g</li><li>, <code>'a</li><li>b0'</code>)</li><li>Use the <code></li><li>own</code> flag to limit checks to an object's own properties, ignoring the prototype chain</li></ul>",
			"simulationNodesAndEdges": {
				"aeb183a9-7b12-49ce-ba93-64b25e9a7d80": {
					"simStepIds": [
						"746137a6-3544-4c70-bc76-88636ec01d1f"
					]
				},
				"21921551-9e0d-4282-9389-af27e5d0114e": {
					"simStepIds": [
						"83534e6d-9a92-477c-a4d1-22454ac97df5"
					]
				},
				"55e16a39-7839-4cc4-9acc-239022050196": {
					"simStepIds": [
						"9e76524f-243c-4912-9e3b-9edfef97cb41"
					]
				},
				"7e8fede8-26fd-4cab-b856-2e346e9af8f2": {
					"simStepIds": [
						"99ab9e7b-2050-4310-853b-5668c613a660"
					]
				},
				"d721a770-8000-427b-89be-8bf3b5844697": {
					"simStepIds": [
						"64369f59-020e-4bb8-ac7a-c747618aadd4"
					]
				},
				"68e92267-8ca9-47a7-b850-37cb8ad1e9d4": {
					"simStepIds": [
						"f9ac5136-9a58-4213-bd61-88563d93e56d"
					]
				},
				"58e1a797-b38e-41d5-9709-2f9f5045a403": {
					"simStepIds": [
						"98676212-6869-431d-b44e-7153e6a408cc"
					]
				},
				"30085bc9-0bfa-4cc9-bcf7-d56a98b03843": {
					"simStepIds": [
						"fdcb8440-3208-4a45-a16d-7627b454a604"
					]
				},
				"5672de1c-1b3b-4e88-a903-227864227636": {
					"simStepIds": [
						"82ec3d5c-525b-45d8-b031-689545566b02"
					]
				},
				"33e4ebe1-541d-4240-9a7e-89cf413453fb": {
					"simStepIds": [
						"520ae158-b4c5-4849-9966-b6286f224dd1"
					]
				},
				"294876f2-5e6d-4265-b46c-31c4e00fe3b4": {
					"simStepIds": [
						"143eae5b-325d-40e7-8a16-158b8ac33b80"
					]
				},
				"42b0d357-26ae-4201-8bb2-bc90bf01af18": {
					"simStepIds": [
						"3ed10e00-58bb-4a7f-9226-fb364837d55d"
					]
				},
				"8aa2962b-1ace-4fb9-801f-1ee6e08d55ca": {
					"simStepIds": [
						"893c4144-0feb-4ab7-8ae2-c21459d1301d"
					]
				},
				"b17fcc8d-22b2-44d6-952d-c85bcf91b534": {
					"simStepIds": [
						"91b02ae5-4d01-42ca-a06f-23279795bceb"
					]
				},
				"c43a8570-5daa-4a31-88a9-19deb661f03c": {
					"simStepIds": [
						"a4173368-a694-439a-95dc-cfca62d3239f"
					]
				},
				"f0263f23-4936-4a4e-8c37-828310016668": {
					"simStepIds": [
						"a57499e7-3803-41ad-89f8-fc84bd9d659f"
					]
				},
				"864ab690-d41e-45b6-8c8d-691624634457": {
					"simStepIds": [
						"68bf7b2f-befe-477b-ab65-7aa1ce1ef1f2"
					]
				},
				"6b40f6f8-f5bb-4f00-bdb5-2e8306e4bc90": {
					"simStepIds": [
						"544a1bb7-f237-40d2-a73c-40b941cb44c4"
					]
				},
				"8cfff0c7-4a27-436d-8afd-c3cc5c55e206": {
					"simStepIds": [
						"e7ddf573-2be2-4827-97b3-60e9d4c9910b"
					]
				}
			},
			"isAIGenerated": true,
			"keywords": "property, keys, nested, own",
			"generationPrompt": "Assert on object properties, keys, and structure",
			"generationKeywords": "property, keys, nested, own"
		},
		"Extend Chai's functionality with custom assertions using plugins": {
			"name": "Extend Chai's functionality with custom assertions using plugins",
			"simSteps": [
				{
					"simStepId": "8b98f977-49ce-48d5-b22a-86378a513572",
					"diagramNodeId": "90441f2e-b541-4170-9701-b69c91cafa5d",
					"simStepLabel": "Plugin Registration: Invoke `chai.use()`",
					"simStepDescription": "The process begins when a developer calls `chai.use()` with a plugin function. This function contains the logic to extend Chai's default assertion capabilities.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "lib/chai.js",
						"startLine": "35",
						"endLine": "48",
						"relevantVariables": [
							"use",
							"fn",
							"used"
						]
					},
					"inputDataExample": "{\n  \"plugin\": \"function myPlugin(chai, utils) {\\n    chai.Assertion.addProperty('thing', function () {\\n      this.assert(this._obj.isThing === true, 'expected #{this} to be a thing');\\n    });\\n    chai.Assertion.addMethod('beAThing', function (thingName) {\\n      this.assert(this._obj.name === thingName, 'expected #{this} to be a thing named ' + thingName);\\n    });\\n  }\"\n}",
					"outputDataExample": "{\n  \"chai\": \"[Object with use, expect, Assertion, etc.]\"\n}"
				},
				{
					"simStepId": "edc31929-bf66-47ce-870c-bec1ab2c6bce",
					"diagramNodeId": "8a3b6945-9d4b-49fc-8bb6-59b29dfc7aa9",
					"simStepLabel": "Data Transmission: Plugin Function to `use`",
					"simStepDescription": "The plugin function itself is passed as an argument to `chai.use()`, where it will be executed.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "lib/chai.js",
						"startLine": "35",
						"endLine": "35",
						"relevantVariables": [
							"fn"
						]
					},
					"inputDataExample": "{\n  \"fn\": \"function myPlugin(chai, utils) { ... }\"\n}",
					"outputDataExample": "{\n  \"fn\": \"function myPlugin(chai, utils) { ... }\"\n}"
				},
				{
					"simStepId": "eb0ac5c7-aa37-4d95-af2b-f0b1a55b11d3",
					"diagramNodeId": "447c64cb-e6e2-4cff-a64b-8c0460e81904",
					"simStepLabel": "Plugin Execution: `use` Invokes Plugin",
					"simStepDescription": "The `use` function invokes the provided plugin, passing the `chai` exports and `util` objects as arguments. This gives the plugin access to Chai's core functionalities for extension.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "lib/chai.js",
						"startLine": "44",
						"endLine": "44",
						"relevantVariables": [
							"fn",
							"exports",
							"util"
						]
					},
					"inputDataExample": "{\n  \"exports\": \"[Object with Assertion, config, util, etc.]\",\n  \"util\": \"[Object with addMethod, addProperty, flag, etc.]\"\n}",
					"outputDataExample": "null"
				},
				{
					"simStepId": "c3516169-6418-4233-a65e-f58ec1772e88",
					"diagramNodeId": "1621b7b4-3b93-479a-a77a-a23d3be66442",
					"simStepLabel": "Data Transmission: Chai Internals to Plugin",
					"simStepDescription": "The plugin function receives the `chai` and `utils` objects, enabling it to interact with and extend Chai's assertion system.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "lib/chai.js",
						"startLine": "44",
						"endLine": "44",
						"relevantVariables": [
							"fn",
							"exports",
							"util"
						]
					},
					"inputDataExample": "{\n  \"chai\": {\n    \"Assertion\": \"[class Assertion]\",\n    \"util\": \"{...}\",\n    \"config\": \"{...}\"\n  },\n  \"utils\": {\n    \"addMethod\": \"[Function]\",\n    \"addProperty\": \"[Function]\",\n    \"flag\": \"[Function]\"\n  }\n}",
					"outputDataExample": "{\n  \"chai\": {\n    \"Assertion\": \"[class Assertion]\",\n    \"util\": \"{...}\",\n    \"config\": \"{...}\"\n  },\n  \"utils\": {\n    \"addMethod\": \"[Function]\",\n    \"addProperty\": \"[Function]\",\n    \"flag\": \"[Function]\"\n  }\n}"
				},
				{
					"simStepId": "73c3b54f-965e-47c4-a537-f04e5c978305",
					"diagramNodeId": "368b33b2-faaa-4ee1-9226-8a883a702652",
					"simStepLabel": "Extension: Plugin adds a Custom Property",
					"simStepDescription": "Inside the plugin, the developer calls `chai.Assertion.addProperty()` to register a new chainable property. This call delegates to the `util.addProperty` helper.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "lib/chai/assertion.js",
						"startLine": "93",
						"endLine": "96",
						"relevantVariables": [
							"addProperty",
							"util.addProperty"
						]
					},
					"inputDataExample": "{\n  \"name\": \"thing\",\n  \"fn\": \"function() { this.assert(this._obj.isThing === true, 'expected #{this} to be a thing'); }\"\n}",
					"outputDataExample": "null"
				},
				{
					"simStepId": "bc62fe32-e423-4341-92f6-aad24da37d66",
					"diagramNodeId": "87fa4415-4367-42b3-ab84-d91f0e8fa5e3",
					"simStepLabel": "Data Transmission: Property Details to Utility",
					"simStepDescription": "The property name (`'thing'`) and its getter function are passed from `Assertion.addProperty` to the underlying `util.addProperty` utility for registration.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "lib/chai/assertion.js",
						"startLine": "94",
						"endLine": "94",
						"relevantVariables": [
							"util.addProperty",
							"this.prototype",
							"name",
							"fn"
						]
					},
					"inputDataExample": "{\n  \"ctx\": \"Assertion.prototype\",\n  \"name\": \"thing\",\n  \"getter\": \"function() { ... }\"\n}",
					"outputDataExample": "{\n  \"ctx\": \"Assertion.prototype\",\n  \"name\": \"thing\",\n  \"getter\": \"function() { ... }\"\n}"
				},
				{
					"simStepId": "ea57401a-7532-4c9d-8c72-fed963ad0de5",
					"diagramNodeId": "1b6ddf15-ae7d-43c4-82f7-f9dba5b20e71",
					"simStepLabel": "Property Registration: Attach Property to Prototype",
					"simStepDescription": "The `addProperty` utility uses `Object.defineProperty` to add a new getter property to `Assertion.prototype`. When this property is accessed in an assertion chain, the provided function will be executed.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "lib/chai/utils/addProperty.js",
						"startLine": "38",
						"endLine": "74",
						"relevantVariables": [
							"addProperty",
							"Object.defineProperty",
							"ctx",
							"name",
							"getter"
						]
					},
					"inputDataExample": "{\n  \"ctx\": \"Assertion.prototype\",\n  \"name\": \"thing\",\n  \"getter\": \"function() { ... }\"\n}",
					"outputDataExample": "null"
				},
				{
					"simStepId": "09a523a3-d6f7-4e42-b3b8-5b773aeaba2f",
					"diagramNodeId": "1dfda9d3-2a94-43f7-a794-98e6f34e7c13",
					"simStepLabel": "Data Flow: `Assertion.prototype` is Mutated",
					"simStepDescription": "The `Assertion.prototype` object is mutated to include the new `thing` property getter. All future assertion instances will now have access to this property.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "lib/chai/utils/addProperty.js",
						"startLine": "41",
						"endLine": "71",
						"relevantVariables": [
							"ctx",
							"name",
							"getter"
						]
					},
					"inputDataExample": "{\n  \"Assertion.prototype\": {\n    \"thing\": \"[Getter]\"\n  }\n}",
					"outputDataExample": "{\n  \"Assertion.prototype\": {\n    \"thing\": \"[Getter]\"\n  }\n}"
				},
				{
					"simStepId": "21b1d00d-8dd5-4edd-b619-674d4d947f6c",
					"diagramNodeId": "e5c0ec36-1aca-4726-a72f-3abe6486de6d",
					"simStepLabel": "Extension: Plugin adds a Custom Method",
					"simStepDescription": "The plugin also calls `chai.Assertion.addMethod()` to register a new chainable method. This call delegates to the `util.addMethod` helper.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "lib/chai/assertion.js",
						"startLine": "101",
						"endLine": "104",
						"relevantVariables": [
							"addMethod",
							"util.addMethod"
						]
					},
					"inputDataExample": "{\n  \"name\": \"beAThing\",\n  \"fn\": \"function(thingName) { this.assert(this._obj.name === thingName, 'expected #{this} to be a thing named ' + thingName); }\"\n}",
					"outputDataExample": "null"
				},
				{
					"simStepId": "de96bc1a-90ea-40e2-9cf4-aa1e3c34568c",
					"diagramNodeId": "b39cb986-0d94-4f8f-9094-c7d5a64de62c",
					"simStepLabel": "Data Transmission: Method Details to Utility",
					"simStepDescription": "The method name (`'beAThing'`) and its implementation are passed from `Assertion.addMethod` to the underlying `util.addMethod` utility.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "lib/chai/assertion.js",
						"startLine": "102",
						"endLine": "102",
						"relevantVariables": [
							"util.addMethod",
							"this.prototype",
							"name",
							"fn"
						]
					},
					"inputDataExample": "{\n  \"ctx\": \"Assertion.prototype\",\n  \"name\": \"beAThing\",\n  \"method\": \"function(thingName) { ... }\"\n}",
					"outputDataExample": "{\n  \"ctx\": \"Assertion.prototype\",\n  \"name\": \"beAThing\",\n  \"method\": \"function(thingName) { ... }\"\n}"
				},
				{
					"simStepId": "c4a5e2d9-488a-4a05-933b-8986b9c4575f",
					"diagramNodeId": "24c28424-4ad9-42bb-aeb9-4019b6072a1f",
					"simStepLabel": "Method Registration: Attach Method to Prototype",
					"simStepDescription": "The `addMethod` utility creates a wrapper function around the plugin's implementation. This wrapper handles internal Chai logic (like stack trace cleaning) and attaches the new method to `Assertion.prototype`.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "lib/chai/utils/addMethod.js",
						"startLine": "36",
						"endLine": "70",
						"relevantVariables": [
							"addMethod",
							"methodWrapper",
							"ctx",
							"name"
						]
					},
					"inputDataExample": "{\n  \"ctx\": \"Assertion.prototype\",\n  \"name\": \"beAThing\",\n  \"method\": \"function(thingName) { ... }\"\n}",
					"outputDataExample": "null"
				},
				{
					"simStepId": "dad9c9fc-2d93-4476-b66f-c6fc79c0cf6b",
					"diagramNodeId": "29db87a9-9d2e-47e3-9fe9-0de786e801d1",
					"simStepLabel": "Data Flow: `Assertion.prototype` is Mutated",
					"simStepDescription": "The `Assertion.prototype` object is mutated again to include the new `beAThing` method. All assertion instances now have access to this method.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "lib/chai/utils/addMethod.js",
						"startLine": "66",
						"endLine": "66",
						"relevantVariables": [
							"ctx",
							"name",
							"methodWrapper"
						]
					},
					"inputDataExample": "{\n  \"Assertion.prototype\": {\n    \"thing\": \"[Getter]\",\n    \"beAThing\": \"[Function: methodWrapper]\"\n  }\n}",
					"outputDataExample": "{\n  \"Assertion.prototype\": {\n    \"thing\": \"[Getter]\",\n    \"beAThing\": \"[Function: methodWrapper]\"\n  }\n}"
				},
				{
					"simStepId": "6423490d-72d3-487f-b300-7c8847781040",
					"diagramNodeId": "5a48a5d6-6068-4649-848f-6e12bc2b0806",
					"simStepLabel": "Usage: Developer Uses Custom Assertion",
					"simStepDescription": "With the plugin registered, the developer can now use the custom property (`.thing`) and method (`.beAThing()`) in their tests. Accessing `.thing` triggers the getter, and calling `.beAThing()` executes the method, both running the custom logic defined in the plugin.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "lib/chai/utils/addProperty.js",
						"startLine": "43",
						"endLine": "68",
						"relevantVariables": [
							"propertyGetter"
						]
					},
					"inputDataExample": "{\n  \"testCode\": \"expect({ isThing: true, name: 'Gadget' }).to.be.a.thing.and.beAThing('Gadget');\"\n}",
					"outputDataExample": "null"
				}
			],
			"description": "<ul><li>Provides a robust plugin architecture via the <code>chai</li><li>use()</code> function</li><li>Allows developers to add their own chainable methods and properties for custom assertions</li><li>Enables the creation of specialized assertion libraries for specific frameworks or domains (e</li><li>g</li><li>, <code>chai-http</code>)</li><li>Core extensibility is managed through utility functions like <code>addMethod</code>, <code>addProperty</code>, and <code>addChainableMethod</code></li></ul>",
			"simulationNodesAndEdges": {
				"90441f2e-b541-4170-9701-b69c91cafa5d": {
					"simStepIds": [
						"8b98f977-49ce-48d5-b22a-86378a513572"
					]
				},
				"447c64cb-e6e2-4cff-a64b-8c0460e81904": {
					"simStepIds": [
						"eb0ac5c7-aa37-4d95-af2b-f0b1a55b11d3"
					]
				},
				"368b33b2-faaa-4ee1-9226-8a883a702652": {
					"simStepIds": [
						"73c3b54f-965e-47c4-a537-f04e5c978305"
					]
				},
				"1b6ddf15-ae7d-43c4-82f7-f9dba5b20e71": {
					"simStepIds": [
						"ea57401a-7532-4c9d-8c72-fed963ad0de5"
					]
				},
				"e5c0ec36-1aca-4726-a72f-3abe6486de6d": {
					"simStepIds": [
						"21b1d00d-8dd5-4edd-b619-674d4d947f6c"
					]
				},
				"24c28424-4ad9-42bb-aeb9-4019b6072a1f": {
					"simStepIds": [
						"c4a5e2d9-488a-4a05-933b-8986b9c4575f"
					]
				},
				"5a48a5d6-6068-4649-848f-6e12bc2b0806": {
					"simStepIds": [
						"6423490d-72d3-487f-b300-7c8847781040"
					]
				},
				"8a3b6945-9d4b-49fc-8bb6-59b29dfc7aa9": {
					"simStepIds": [
						"edc31929-bf66-47ce-870c-bec1ab2c6bce"
					]
				},
				"1621b7b4-3b93-479a-a77a-a23d3be66442": {
					"simStepIds": [
						"c3516169-6418-4233-a65e-f58ec1772e88"
					]
				},
				"87fa4415-4367-42b3-ab84-d91f0e8fa5e3": {
					"simStepIds": [
						"bc62fe32-e423-4341-92f6-aad24da37d66"
					]
				},
				"1dfda9d3-2a94-43f7-a794-98e6f34e7c13": {
					"simStepIds": [
						"09a523a3-d6f7-4e42-b3b8-5b773aeaba2f"
					]
				},
				"b39cb986-0d94-4f8f-9094-c7d5a64de62c": {
					"simStepIds": [
						"de96bc1a-90ea-40e2-9cf4-aa1e3c34568c"
					]
				},
				"29db87a9-9d2e-47e3-9fe9-0de786e801d1": {
					"simStepIds": [
						"dad9c9fc-2d93-4476-b66f-c6fc79c0cf6b"
					]
				}
			},
			"isAIGenerated": true,
			"keywords": "use, addMethod, addProperty",
			"generationPrompt": "Extend Chai's functionality with custom assertions using plugins",
			"generationKeywords": "use, addMethod, addProperty"
		},
		"Assert that a function throws or does not throw an error": {
			"name": "Assert that a function throws or does not throw an error",
			"simSteps": [
				{
					"simStepId": "9b37ec8b-ac85-4dfa-ae56-fba8c09fbd46",
					"diagramNodeId": "1899beed-01ef-4c54-b347-1cedacb7ae6b",
					"simStepLabel": "Flow 1: Start - `assert.throws` is called",
					"simStepDescription": "The user calls `assert.throws` to verify that a function (`badFn`) throws an error. The `assert` interface creates a new `Assertion` object and invokes the `.throw()` method on it, passing the expected error type and message fragment.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "lib/chai/interface/assert.js",
						"startLine": "1993",
						"endLine": "2000",
						"relevantVariables": [
							"assert.throws",
							"fn",
							"errorLike",
							"errMsgMatcher",
							"msg",
							"Assertion"
						]
					},
					"inputDataExample": "{\"fn\": \"function badFn() { throw new Error('testing'); }\", \"expectedError\": \"Error\", \"expectedMessage\": \"testing\", \"customMessage\": \"Assertion failed\"}",
					"outputDataExample": "{\"assertion\": {\"_obj\": \"function badFn() { ... }\", \"__flags\": {\"message\": \"Assertion failed\", \"ssfi\": \"assert.throws\"}}, \"errorLike\": \"Error\", \"errMsgMatcher\": \"testing\"}"
				},
				{
					"simStepId": "5b098e9f-3135-4349-85e4-d560dbf5c6e9",
					"diagramNodeId": "62849151-9f8d-4a3c-b751-42113f3f1ee8",
					"simStepLabel": "Flow 1: Assertion object passed to core logic",
					"simStepDescription": "The newly created assertion, containing the target function and assertion flags, is passed to the core `assertThrows` method for processing.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "lib/chai/interface/assert.js",
						"startLine": "1997",
						"endLine": "1997",
						"relevantVariables": [
							"to.throw"
						]
					},
					"inputDataExample": "{\"assertion\": {\"_obj\": \"function badFn() { ... }\", \"__flags\": {\"message\": \"Assertion failed\", \"ssfi\": \"assert.throws\"}}, \"errorLike\": \"Error\", \"errMsgMatcher\": \"testing\"}",
					"outputDataExample": "{\"assertion\": {\"_obj\": \"function badFn() { ... }\", \"__flags\": {\"message\": \"Assertion failed\", \"ssfi\": \"assert.throws\"}}, \"errorLike\": \"Error\", \"errMsgMatcher\": \"testing\"}"
				},
				{
					"simStepId": "9d7a6f18-acf6-4d81-bbb5-1fa24e9ba738",
					"diagramNodeId": "64a3623b-42f0-49bf-a81f-0e491a6a4740",
					"simStepLabel": "Flow 1: Core logic executes function and catches error",
					"simStepDescription": "The `assertThrows` method executes the target function within a `try...catch` block. The function throws an error as expected, which is caught and stored for validation.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "lib/chai/core/assertions.js",
						"startLine": "2769",
						"endLine": "2774",
						"relevantVariables": [
							"fn",
							"caughtErr",
							"errorWasThrown"
						]
					},
					"inputDataExample": "{\"_obj\": \"function badFn() { throw new Error('testing'); }\", \"errorLike\": \"Error\", \"errMsgMatcher\": \"testing\"}",
					"outputDataExample": "{\"errorWasThrown\": true, \"caughtErr\": {\"name\": \"Error\", \"message\": \"testing\"}}"
				},
				{
					"simStepId": "c8656bce-1b49-4380-a902-bd4fa75726ac",
					"diagramNodeId": "a50c1de7-c7d0-4915-a745-ebdd83a44c65",
					"simStepLabel": "Flow 1: Caught error is passed for validation",
					"simStepDescription": "The captured error object is passed to the validation logic within `assertThrows`.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "lib/chai/core/assertions.js",
						"startLine": "2773",
						"endLine": "2773",
						"relevantVariables": [
							"caughtErr"
						]
					},
					"inputDataExample": "{\"errorWasThrown\": true, \"caughtErr\": {\"name\": \"Error\", \"message\": \"testing\"}}",
					"outputDataExample": "{\"errorWasThrown\": true, \"caughtErr\": {\"name\": \"Error\", \"message\": \"testing\"}}"
				},
				{
					"simStepId": "ffd81900-4008-4a58-9dce-7234a88a5806",
					"diagramNodeId": "e3b13ece-10f4-48f0-8bb2-5ab92d7af2fa",
					"simStepLabel": "Flow 1: End - Assertion passes and returns error",
					"simStepDescription": "The validation logic confirms the caught error matches the expected type (`Error`) and its message includes the expected text (`testing`). Since the assertion is successful, no `AssertionError` is thrown. The caught error becomes the new subject of the assertion chain, allowing for further checks like `...throw().with.property('code', 42)`.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "lib/chai/core/assertions.js",
						"startLine": "2828",
						"endLine": "2920",
						"relevantVariables": [
							"errorLike",
							"errMsgMatcher",
							"caughtErr",
							"this.assert",
							"flag"
						]
					},
					"inputDataExample": "{\"errorWasThrown\": true, \"caughtErr\": {\"name\": \"Error\", \"message\": \"testing\"}, \"errorLike\": \"Error\", \"errMsgMatcher\": \"testing\"}",
					"outputDataExample": "{\"assertionSubject\": {\"name\": \"Error\", \"message\": \"testing\"}}"
				},
				{
					"simStepId": "75f3e294-cb8a-4f90-b0f0-f7afffcf88bd",
					"diagramNodeId": "b01e639f-18ef-4373-b85c-97964c77650e",
					"simStepLabel": "Flow 2: Start - `assert.doesNotThrow` is called",
					"simStepDescription": "The user calls `assert.doesNotThrow` to verify a function (`goodFn`) runs without errors. This interface method creates a new `Assertion`, sets the negation flag (`.not`), and invokes the `.throw()` method.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "lib/chai/interface/assert.js",
						"startLine": "2033",
						"endLine": "2041",
						"relevantVariables": [
							"assert.doesNotThrow",
							"fn",
							"message",
							"Assertion",
							"to.not.throw"
						]
					},
					"inputDataExample": "{\"fn\": \"function goodFn() { return 'success'; }\", \"message\": \"should not throw\"}",
					"outputDataExample": "{\"assertion\": {\"_obj\": \"function goodFn() { ... }\", \"__flags\": {\"message\": \"should not throw\", \"negate\": true, \"ssfi\": \"assert.doesNotThrow\"}}}"
				},
				{
					"simStepId": "e438e7b2-83f3-4600-a929-eca56b8b721b",
					"diagramNodeId": "fd7021ad-b9a7-4df1-b8da-d76bdd0c722b",
					"simStepLabel": "Flow 2: Assertion object passed to core logic",
					"simStepDescription": "The assertion object, now with the `negate` flag set to `true`, is passed to the core `assertThrows` method for processing.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "lib/chai/interface/assert.js",
						"startLine": "2039",
						"endLine": "2039",
						"relevantVariables": [
							"to.not.throw"
						]
					},
					"inputDataExample": "{\"assertion\": {\"_obj\": \"function goodFn() { ... }\", \"__flags\": {\"message\": \"should not throw\", \"negate\": true, \"ssfi\": \"assert.doesNotThrow\"}}}",
					"outputDataExample": "{\"assertion\": {\"_obj\": \"function goodFn() { ... }\", \"__flags\": {\"message\": \"should not throw\", \"negate\": true, \"ssfi\": \"assert.doesNotThrow\"}}}"
				},
				{
					"simStepId": "207dd1d1-9c91-469f-a2c3-df6b75e228c0",
					"diagramNodeId": "52112520-8bc4-4780-b274-db60aa7341c2",
					"simStepLabel": "Flow 2: Core logic executes function successfully",
					"simStepDescription": "The `assertThrows` method executes the target function (`goodFn`) in a `try...catch` block. The function completes its execution without throwing any errors.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "lib/chai/core/assertions.js",
						"startLine": "2769",
						"endLine": "2774",
						"relevantVariables": [
							"fn",
							"errorWasThrown",
							"caughtErr"
						]
					},
					"inputDataExample": "{\"_obj\": \"function goodFn() { ... }\", \"__flags\": {\"negate\": true}}",
					"outputDataExample": "{\"errorWasThrown\": false, \"caughtErr\": null}"
				},
				{
					"simStepId": "9ee866bf-f609-46b2-be10-3931ed9f9375",
					"diagramNodeId": "1100bfcd-96f6-428e-9cb4-9f299e01c268",
					"simStepLabel": "Flow 2: Result (no error) passed for validation",
					"simStepDescription": "The result of the execution—that no error was thrown—is passed to the final validation check within `assertThrows`.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "lib/chai/core/assertions.js",
						"startLine": "2774",
						"endLine": "2774",
						"relevantVariables": [
							"errorWasThrown"
						]
					},
					"inputDataExample": "{\"errorWasThrown\": false, \"caughtErr\": null}",
					"outputDataExample": "{\"errorWasThrown\": false, \"caughtErr\": null}"
				},
				{
					"simStepId": "672dc4b9-7e13-4359-a66c-d5f1f870d184",
					"diagramNodeId": "c57f08a5-f7e3-4c59-bc88-899d76966cad",
					"simStepLabel": "Flow 2: End - Negated assertion passes",
					"simStepDescription": "The validation logic checks if an error was thrown. Since `errorWasThrown` is `false` and the `negate` flag is `true`, the condition `!errorWasThrown` passes. The assertion is successful, and the method completes without throwing an `AssertionError`.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "lib/chai/core/assertions.js",
						"startLine": "2820",
						"endLine": "2825",
						"relevantVariables": [
							"this.assert",
							"errorWasThrown"
						]
					},
					"inputDataExample": "{\"errorWasThrown\": false, \"negate\": true}",
					"outputDataExample": "null"
				},
				{
					"simStepId": "288bceb1-84ea-43f8-9be0-81b6da69a036",
					"diagramNodeId": "6419a1c1-4003-4f53-a1f5-2f40b7c0fa4f",
					"simStepLabel": "Flow 3 (Failure): `assert.throws` is called with a non-throwing function",
					"simStepDescription": "The user incorrectly asserts that `goodFn` will throw an error. The `assert.throws` interface creates an `Assertion` object to check for a thrown error.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "lib/chai/interface/assert.js",
						"startLine": "1993",
						"endLine": "2000",
						"relevantVariables": [
							"assert.throws",
							"fn",
							"Assertion"
						]
					},
					"inputDataExample": "{\"fn\": \"function goodFn() { return 'success'; }\"}",
					"outputDataExample": "{\"assertion\": {\"_obj\": \"function goodFn() { ... }\"}}"
				},
				{
					"simStepId": "c07d18ab-c07f-4fd2-b23e-759556458c7a",
					"diagramNodeId": "9416e139-1247-48c5-ae43-7d7baa4319fa",
					"simStepLabel": "Flow 3 (Failure): Assertion object passed to core logic",
					"simStepDescription": "The assertion object is passed to `assertThrows` with the expectation that an error will be thrown.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "lib/chai/interface/assert.js",
						"startLine": "1997",
						"endLine": "1997",
						"relevantVariables": [
							"to.throw"
						]
					},
					"inputDataExample": "{\"assertion\": {\"_obj\": \"function goodFn() { ... }\"}}",
					"outputDataExample": "{\"assertion\": {\"_obj\": \"function goodFn() { ... }\"}}"
				},
				{
					"simStepId": "9f36bb1a-c41c-4b43-8d3f-6308d788fdb0",
					"diagramNodeId": "354859c5-3779-42f5-acdd-6bc7cc000499",
					"simStepLabel": "Flow 3 (Failure): Core logic finds no error",
					"simStepDescription": "`assertThrows` executes `goodFn` in a `try...catch` block, but the function completes normally and no error is caught.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "lib/chai/core/assertions.js",
						"startLine": "2769",
						"endLine": "2774",
						"relevantVariables": [
							"fn",
							"errorWasThrown",
							"caughtErr"
						]
					},
					"inputDataExample": "{\"_obj\": \"function goodFn() { ... }\"}",
					"outputDataExample": "{\"errorWasThrown\": false, \"caughtErr\": null}"
				},
				{
					"simStepId": "87339037-b5e5-4d1f-9033-964ef9471ffe",
					"diagramNodeId": "aab0a4c6-30a9-4fc4-b321-5dddd67bc636",
					"simStepLabel": "Flow 3 (Failure): Failure condition passed to `this.assert`",
					"simStepDescription": "Since no error was thrown (`errorWasThrown` is false) and the assertion was not negated, `assertThrows` calls the master `this.assert` method with a failing condition.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "lib/chai/core/assertions.js",
						"startLine": "2820",
						"endLine": "2825",
						"relevantVariables": [
							"this.assert",
							"errorWasThrown"
						]
					},
					"inputDataExample": "{\"errorWasThrown\": false}",
					"outputDataExample": "{\"expression\": false, \"message\": \"expected #{this} to throw an error\", \"negateMessage\": \"expected #{this} to not throw an error but #{act} was thrown\"}"
				},
				{
					"simStepId": "9b790ebe-a0d9-402a-b578-afb3a141bf29",
					"diagramNodeId": "1af6ee46-5ea3-408a-9022-e8633ccb7410",
					"simStepLabel": "Flow 3 (Failure): `Assertion.prototype.assert` throws `AssertionError`",
					"simStepDescription": "The central `assert` method receives a failing expression (`ok` is false). It constructs a new `AssertionError` with a detailed message and throws it, causing the test to fail.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "lib/chai/assertion.js",
						"startLine": "163",
						"endLine": "184",
						"relevantVariables": [
							"ok",
							"msg",
							"AssertionError",
							"config.includeStack"
						]
					},
					"inputDataExample": "{\"ok\": false, \"msg\": \"expected [Function goodFn] to throw an error\", \"actual\": \"[Function goodFn]\", \"expected\": \"an error\"}",
					"outputDataExample": "{\"error\": {\"name\": \"AssertionError\", \"message\": \"expected [Function goodFn] to throw an error\"}}"
				}
			],
			"description": "<ul><li>Provides the <code></li><li>throw()</code> assertion to verify that a function throws an error</li><li>Can check the type of error thrown (e</li><li>g</li><li>, <code>ReferenceError</code>)</li><li>Can assert that the error message includes a specific string or matches a regular expression</li><li>Can be negated with <code></li><li>not</li><li>throw()</code> to ensure a function executes without errors</li></ul>",
			"simulationNodesAndEdges": {
				"1899beed-01ef-4c54-b347-1cedacb7ae6b": {
					"simStepIds": [
						"9b37ec8b-ac85-4dfa-ae56-fba8c09fbd46"
					]
				},
				"64a3623b-42f0-49bf-a81f-0e491a6a4740": {
					"simStepIds": [
						"9d7a6f18-acf6-4d81-bbb5-1fa24e9ba738"
					]
				},
				"e3b13ece-10f4-48f0-8bb2-5ab92d7af2fa": {
					"simStepIds": [
						"ffd81900-4008-4a58-9dce-7234a88a5806"
					]
				},
				"b01e639f-18ef-4373-b85c-97964c77650e": {
					"simStepIds": [
						"75f3e294-cb8a-4f90-b0f0-f7afffcf88bd"
					]
				},
				"52112520-8bc4-4780-b274-db60aa7341c2": {
					"simStepIds": [
						"207dd1d1-9c91-469f-a2c3-df6b75e228c0"
					]
				},
				"c57f08a5-f7e3-4c59-bc88-899d76966cad": {
					"simStepIds": [
						"672dc4b9-7e13-4359-a66c-d5f1f870d184"
					]
				},
				"6419a1c1-4003-4f53-a1f5-2f40b7c0fa4f": {
					"simStepIds": [
						"288bceb1-84ea-43f8-9be0-81b6da69a036"
					]
				},
				"354859c5-3779-42f5-acdd-6bc7cc000499": {
					"simStepIds": [
						"9f36bb1a-c41c-4b43-8d3f-6308d788fdb0"
					]
				},
				"1af6ee46-5ea3-408a-9022-e8633ccb7410": {
					"simStepIds": [
						"9b790ebe-a0d9-402a-b578-afb3a141bf29"
					]
				},
				"62849151-9f8d-4a3c-b751-42113f3f1ee8": {
					"simStepIds": [
						"5b098e9f-3135-4349-85e4-d560dbf5c6e9"
					]
				},
				"a50c1de7-c7d0-4915-a745-ebdd83a44c65": {
					"simStepIds": [
						"c8656bce-1b49-4380-a902-bd4fa75726ac"
					]
				},
				"fd7021ad-b9a7-4df1-b8da-d76bdd0c722b": {
					"simStepIds": [
						"e438e7b2-83f3-4600-a929-eca56b8b721b"
					]
				},
				"1100bfcd-96f6-428e-9cb4-9f299e01c268": {
					"simStepIds": [
						"9ee866bf-f609-46b2-be10-3931ed9f9375"
					]
				},
				"9416e139-1247-48c5-ae43-7d7baa4319fa": {
					"simStepIds": [
						"c07d18ab-c07f-4fd2-b23e-759556458c7a"
					]
				},
				"aab0a4c6-30a9-4fc4-b321-5dddd67bc636": {
					"simStepIds": [
						"87339037-b5e5-4d1f-9033-964ef9471ffe"
					]
				}
			},
			"isAIGenerated": true,
			"keywords": "throw, throws, AssertionError",
			"generationPrompt": "Assert that a function throws or does not throw an error",
			"generationKeywords": "throw, throws, AssertionError"
		},
		"Assert on the contents and members of arrays and other collections": {
			"name": "Assert on the contents and members of arrays and other collections",
			"simSteps": [
				{
					"simStepId": "ee854269-5b2d-4d59-a901-c6adae36606e",
					"diagramNodeId": "9dea3048-df0f-44e5-9e90-43986b3487e6",
					"simStepLabel": "User Assertion: Check for Inclusion",
					"simStepDescription": "A test is written to assert that an array contains a specific value using `expect(...).to.include(...)`. This is the entry point for the `include` assertion.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "lib/chai/core/assertions.js",
						"startLine": "519",
						"endLine": "522",
						"relevantVariables": [
							"include"
						]
					},
					"inputDataExample": "{\"array\": [\"foo\", \"bar\"], \"value\": \"foo\"}",
					"outputDataExample": "{\"assertion\": \"ChaiAssertion\"}"
				},
				{
					"simStepId": "d169293d-9c11-46cc-8366-83ea2d6be3ba",
					"diagramNodeId": "a32af246-a534-4581-ad06-a4e6cccafe26",
					"simStepLabel": "Data Transmission to `include`",
					"simStepDescription": "The target array `['foo', 'bar']` and the value to find `'foo'` are passed to the `include` assertion method.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "lib/chai/core/assertions.js",
						"startLine": "641",
						"endLine": "641",
						"relevantVariables": [
							"Assertion.addChainableMethod"
						]
					},
					"inputDataExample": "{\"target\": [\"foo\", \"bar\"], \"value\": \"foo\"}",
					"outputDataExample": "{\"target\": [\"foo\", \"bar\"], \"value\": \"foo\"}"
				},
				{
					"simStepId": "abd6c2e9-0410-4f60-aa65-ae91e5f8608b",
					"diagramNodeId": "618aefbe-9477-42a6-a6d7-d5f60f805f29",
					"simStepLabel": "`include` Assertion Logic",
					"simStepDescription": "The `include` method checks the type of the target object. Since it's an array, it uses `indexOf` for strict equality to see if the value is present.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "lib/chai/core/assertions.js",
						"startLine": "570",
						"endLine": "575",
						"relevantVariables": [
							"obj",
							"val",
							"included"
						]
					},
					"inputDataExample": "{\"obj\": [\"foo\", \"bar\"], \"val\": \"foo\", \"isDeep\": false}",
					"outputDataExample": "{\"included\": true}"
				},
				{
					"simStepId": "63f01c78-da76-4893-97b8-54a3dd701d5e",
					"diagramNodeId": "b36d7bf5-a7fd-45a2-bc58-9c4b688a78d4",
					"simStepLabel": "Assertion Result Transmission",
					"simStepDescription": "The `include` method determined the value is present, and the positive result is passed to the core assertion validation logic.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "lib/chai/core/assertions.js",
						"startLine": "631",
						"endLine": "635",
						"relevantVariables": [
							"this.assert",
							"included"
						]
					},
					"inputDataExample": "{\"assertionResult\": true, \"message\": \"expected ['foo', 'bar'] to include 'foo'\"}",
					"outputDataExample": "{\"assertionResult\": true, \"message\": \"expected ['foo', 'bar'] to include 'foo'\"}"
				},
				{
					"simStepId": "1cd9a38f-377c-471b-a498-826b8fe7af3e",
					"diagramNodeId": "1ac5073d-fc9a-43ed-914f-9da183d33cf4",
					"simStepLabel": "Assertion Succeeded",
					"simStepDescription": "The core `assert` method receives a successful result. Since the assertion passed, no error is thrown, and the test runner continues executing subsequent tests.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "lib/chai/assertion.js",
						"startLine": "178",
						"endLine": "186",
						"relevantVariables": [
							"this.assert"
						]
					},
					"inputDataExample": "{\"result\": true}",
					"outputDataExample": "{}"
				},
				{
					"simStepId": "b490ed32-3851-4515-9583-e1f59a78b99e",
					"diagramNodeId": "313ceff3-447c-4c19-99e8-5a7ec009b617",
					"simStepLabel": "User Assertion: Check for Same Members",
					"simStepDescription": "A test is written to assert that an array has the same members as another, regardless of order. Example: `expect([5, 4]).to.have.members([4, 5])`.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "lib/chai/core/assertions.js",
						"startLine": "3277",
						"endLine": "3277",
						"relevantVariables": [
							"members"
						]
					},
					"inputDataExample": "{\"actual\": [5, 4], \"expected\": [4, 5]}",
					"outputDataExample": "{\"assertion\": \"ChaiAssertion\"}"
				},
				{
					"simStepId": "58d32935-8d6f-451b-ac11-cfa0c4770b70",
					"diagramNodeId": "eda3425e-cae9-40dc-9a09-0fbb2baabf6e",
					"simStepLabel": "Data Transmission to `members`",
					"simStepDescription": "The target array `[5, 4]` and the expected members `[4, 5]` are passed to the `members` assertion method.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "lib/chai/core/assertions.js",
						"startLine": "3277",
						"endLine": "3277",
						"relevantVariables": [
							"Assertion.addMethod"
						]
					},
					"inputDataExample": "{\"target\": [5, 4], \"subset\": [4, 5]}",
					"outputDataExample": "{\"target\": [5, 4], \"subset\": [4, 5]}"
				},
				{
					"simStepId": "07078074-9216-43ba-b37a-c50abb096f98",
					"diagramNodeId": "f6a060df-b7b2-4ddf-a5d6-ecc8fc05573e",
					"simStepLabel": "`members` Assertion Logic",
					"simStepDescription": "The `members` method compares the two arrays. By default, it checks for the same members without considering order, allowing for differences in sequence.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "lib/chai/core/assertions.js",
						"startLine": "3311",
						"endLine": "3323",
						"relevantVariables": [
							"obj",
							"subset",
							"missing"
						]
					},
					"inputDataExample": "{\"obj\": [5, 4], \"subset\": [4, 5], \"flags\": {\"ordered\": false, \"deep\": false, \"contains\": false}}",
					"outputDataExample": "{\"pass\": true}"
				},
				{
					"simStepId": "dd8252da-0a7a-4545-abfa-788f5a573670",
					"diagramNodeId": "b52e6420-664e-4141-a71e-4b0f257b4b3b",
					"simStepLabel": "Assertion Result Transmission",
					"simStepDescription": "The method confirms both arrays have the same members, so a successful result is passed to the core assertion validation logic.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "lib/chai/core/assertions.js",
						"startLine": "3343",
						"endLine": "3347",
						"relevantVariables": [
							"this.assert"
						]
					},
					"inputDataExample": "{\"assertionResult\": true, \"message\": \"expected [ 5, 4 ] to have the same members as [ 4, 5 ]\"}",
					"outputDataExample": "{\"assertionResult\": true, \"message\": \"expected [ 5, 4 ] to have the same members as [ 4, 5 ]\"}"
				},
				{
					"simStepId": "0c16e099-0844-4e09-85c6-61500c93bffa",
					"diagramNodeId": "a37a5560-1ee5-4f31-bd53-fbbfd3d5301d",
					"simStepLabel": "Assertion Succeeded",
					"simStepDescription": "The core `assert` method receives a successful result. No error is thrown, and the test runner continues execution.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "lib/chai/assertion.js",
						"startLine": "178",
						"endLine": "186",
						"relevantVariables": [
							"this.assert"
						]
					},
					"inputDataExample": "{\"result\": true}",
					"outputDataExample": "{}"
				},
				{
					"simStepId": "880afa8e-d530-474a-b77d-25f76dae4c20",
					"diagramNodeId": "285d4dde-717f-4ab2-87f1-694b42c51e9e",
					"simStepLabel": "User Assertion: Enable Ordered Check",
					"simStepDescription": "The `.ordered` chainable property is used before `.members()` to set a flag that enforces an order-sensitive comparison.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "lib/chai/core/assertions.js",
						"startLine": "206",
						"endLine": "209",
						"relevantVariables": [
							"ordered"
						]
					},
					"inputDataExample": "{\"array\": [1, 2, 3]}",
					"outputDataExample": "{\"assertion\": \"ChaiAssertion\", \"flags\": {\"ordered\": true}}"
				},
				{
					"simStepId": "69871210-180b-4e13-a54d-dee0a1e9769f",
					"diagramNodeId": "f3329c0d-a97d-46d9-9d75-29b00dcd6b65",
					"simStepLabel": "`ordered` Flag Set",
					"simStepDescription": "The `ordered` flag is set to `true` on the assertion object, which will be checked by the subsequent `.members()` call.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "lib/chai/core/assertions.js",
						"startLine": "208",
						"endLine": "208",
						"relevantVariables": [
							"flag"
						]
					},
					"inputDataExample": "{\"flagName\": \"ordered\", \"value\": true}",
					"outputDataExample": "{\"flagName\": \"ordered\", \"value\": true}"
				},
				{
					"simStepId": "d4c4d6ee-ef26-4698-bd8f-9970a2ea15de",
					"diagramNodeId": "5f37baa4-b3d9-4f39-ad43-014a9bb088b4",
					"simStepLabel": "`members` Called with Order Enforcement",
					"simStepDescription": "The `.members()` method is now called. Inside, it detects the `ordered` flag and performs a direct, element-by-element comparison of the two arrays. Example: `expect([1, 2, 3]).to.have.ordered.members([1, 2, 3])`.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "lib/chai/core/assertions.js",
						"startLine": "3327",
						"endLine": "3331",
						"relevantVariables": [
							"obj",
							"subset",
							"ordered",
							"isEql"
						]
					},
					"inputDataExample": "{\"obj\": [1, 2, 3], \"subset\": [1, 2, 3], \"flags\": {\"ordered\": true, \"deep\": false, \"contains\": false}}",
					"outputDataExample": "{\"pass\": true}"
				},
				{
					"simStepId": "2f2f0366-372a-49a7-bee3-680364b83c12",
					"diagramNodeId": "49a6e174-0dc2-49f9-a752-6298a1c48b17",
					"simStepLabel": "Assertion Result Transmission",
					"simStepDescription": "The arrays are identical in content and order, so a successful result is passed to the core assertion validation logic.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "lib/chai/core/assertions.js",
						"startLine": "3343",
						"endLine": "3347",
						"relevantVariables": [
							"this.assert"
						]
					},
					"inputDataExample": "{\"assertionResult\": true, \"message\": \"expected [ 1, 2, 3 ] to have the same ordered members as [ 1, 2, 3 ]\"}",
					"outputDataExample": "{\"assertionResult\": true, \"message\": \"expected [ 1, 2, 3 ] to have the same ordered members as [ 1, 2, 3 ]\"}"
				},
				{
					"simStepId": "bd045f3b-60a4-474b-a89c-b03fbaf0fcc9",
					"diagramNodeId": "5cad8e76-7113-4346-8782-4158978c317b",
					"simStepLabel": "Assertion Succeeded",
					"simStepDescription": "The core `assert` method receives a successful result. The test passes and the test runner continues execution.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "lib/chai/assertion.js",
						"startLine": "178",
						"endLine": "186",
						"relevantVariables": [
							"this.assert"
						]
					},
					"inputDataExample": "{\"result\": true}",
					"outputDataExample": "{}"
				},
				{
					"simStepId": "9d0b52b3-5f2d-4216-ba5e-b6e80f3aa801",
					"diagramNodeId": "176e2036-2d1e-4abd-a885-29b414e3aaf7",
					"simStepLabel": "User Assertion: Check Length",
					"simStepDescription": "A test is written to assert that a string, array, Set, or Map has a specific length or size. Example: `expect('test').to.have.lengthOf(4)`.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "lib/chai/core/assertions.js",
						"startLine": "2259",
						"endLine": "2262",
						"relevantVariables": [
							"assertLength"
						]
					},
					"inputDataExample": "{\"object\": \"test\", \"expectedLength\": 4}",
					"outputDataExample": "{\"assertion\": \"ChaiAssertion\"}"
				},
				{
					"simStepId": "012f307d-8ce8-4525-b749-9b02dca6f100",
					"diagramNodeId": "325db70c-7165-4d3e-8c76-f5547ccadd00",
					"simStepLabel": "Data Transmission to `lengthOf`",
					"simStepDescription": "The target object `'test'` and the expected length `4` are passed to the `lengthOf` assertion method.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "lib/chai/core/assertions.js",
						"startLine": "2294",
						"endLine": "2294",
						"relevantVariables": [
							"Assertion.addChainableMethod"
						]
					},
					"inputDataExample": "{\"target\": \"test\", \"length\": 4}",
					"outputDataExample": "{\"target\": \"test\", \"length\": 4}"
				},
				{
					"simStepId": "8f6cf4f0-5cfc-4950-b515-9d177c36eb64",
					"diagramNodeId": "ce702a01-133b-434c-813b-e89a1811b230",
					"simStepLabel": "`lengthOf` Assertion Logic",
					"simStepDescription": "The `lengthOf` method retrieves the `length` property from the string (or `.size` for Map/Set) and compares it to the expected value.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "lib/chai/core/assertions.js",
						"startLine": "2269",
						"endLine": "2285",
						"relevantVariables": [
							"obj",
							"n",
							"len"
						]
					},
					"inputDataExample": "{\"obj\": \"test\", \"n\": 4}",
					"outputDataExample": "{\"actualLength\": 4}"
				},
				{
					"simStepId": "cd08c58c-4a98-489b-ab05-50c80ac467ae",
					"diagramNodeId": "970d7816-7875-46ca-bab1-a3a0e1416800",
					"simStepLabel": "Assertion Result Transmission",
					"simStepDescription": "The actual length matches the expected length, so a successful result is passed to the core assertion validation logic.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "lib/chai/core/assertions.js",
						"startLine": "2282",
						"endLine": "2285",
						"relevantVariables": [
							"this.assert"
						]
					},
					"inputDataExample": "{\"assertionResult\": true, \"message\": \"expected 'test' to have a length of 4 but got 4\"}",
					"outputDataExample": "{\"assertionResult\": true, \"message\": \"expected 'test' to have a length of 4 but got 4\"}"
				},
				{
					"simStepId": "0577ff22-519e-44bb-b234-0e0a28a9f1db",
					"diagramNodeId": "a5d34bfc-a3cf-45a6-86d3-94f8e9bfa9cc",
					"simStepLabel": "Assertion Succeeded",
					"simStepDescription": "The core `assert` method receives a successful result. The test passes and the test runner continues execution.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "lib/chai/assertion.js",
						"startLine": "178",
						"endLine": "186",
						"relevantVariables": [
							"this.assert"
						]
					},
					"inputDataExample": "{\"result\": true}",
					"outputDataExample": "{}"
				}
			],
			"description": "<ul><li>Check for the inclusion of specific values in an array or string using <code></li><li>include()</code></li><li>Assert that an array has the exact same members as another, regardless of order, using <code></li><li>members()</code></li><li>Use the <code></li><li>ordered</code> flag with <code></li><li>members()</code> to enforce strict order</li><li>Check the <code>length</code> of an array/string or <code>size</code> of a <code>Set</code>/<code>Map</code> with <code></li><li>lengthOf()</code></li></ul>",
			"simulationNodesAndEdges": {
				"9dea3048-df0f-44e5-9e90-43986b3487e6": {
					"simStepIds": [
						"ee854269-5b2d-4d59-a901-c6adae36606e"
					]
				},
				"618aefbe-9477-42a6-a6d7-d5f60f805f29": {
					"simStepIds": [
						"abd6c2e9-0410-4f60-aa65-ae91e5f8608b"
					]
				},
				"1ac5073d-fc9a-43ed-914f-9da183d33cf4": {
					"simStepIds": [
						"1cd9a38f-377c-471b-a498-826b8fe7af3e"
					]
				},
				"313ceff3-447c-4c19-99e8-5a7ec009b617": {
					"simStepIds": [
						"b490ed32-3851-4515-9583-e1f59a78b99e"
					]
				},
				"f6a060df-b7b2-4ddf-a5d6-ecc8fc05573e": {
					"simStepIds": [
						"07078074-9216-43ba-b37a-c50abb096f98"
					]
				},
				"a37a5560-1ee5-4f31-bd53-fbbfd3d5301d": {
					"simStepIds": [
						"0c16e099-0844-4e09-85c6-61500c93bffa"
					]
				},
				"285d4dde-717f-4ab2-87f1-694b42c51e9e": {
					"simStepIds": [
						"880afa8e-d530-474a-b77d-25f76dae4c20"
					]
				},
				"5f37baa4-b3d9-4f39-ad43-014a9bb088b4": {
					"simStepIds": [
						"d4c4d6ee-ef26-4698-bd8f-9970a2ea15de"
					]
				},
				"5cad8e76-7113-4346-8782-4158978c317b": {
					"simStepIds": [
						"bd045f3b-60a4-474b-a89c-b03fbaf0fcc9"
					]
				},
				"176e2036-2d1e-4abd-a885-29b414e3aaf7": {
					"simStepIds": [
						"9d0b52b3-5f2d-4216-ba5e-b6e80f3aa801"
					]
				},
				"ce702a01-133b-434c-813b-e89a1811b230": {
					"simStepIds": [
						"8f6cf4f0-5cfc-4950-b515-9d177c36eb64"
					]
				},
				"a5d34bfc-a3cf-45a6-86d3-94f8e9bfa9cc": {
					"simStepIds": [
						"0577ff22-519e-44bb-b234-0e0a28a9f1db"
					]
				},
				"a32af246-a534-4581-ad06-a4e6cccafe26": {
					"simStepIds": [
						"d169293d-9c11-46cc-8366-83ea2d6be3ba"
					]
				},
				"b36d7bf5-a7fd-45a2-bc58-9c4b688a78d4": {
					"simStepIds": [
						"63f01c78-da76-4893-97b8-54a3dd701d5e"
					]
				},
				"eda3425e-cae9-40dc-9a09-0fbb2baabf6e": {
					"simStepIds": [
						"58d32935-8d6f-451b-ac11-cfa0c4770b70"
					]
				},
				"b52e6420-664e-4141-a71e-4b0f257b4b3b": {
					"simStepIds": [
						"dd8252da-0a7a-4545-abfa-788f5a573670"
					]
				},
				"f3329c0d-a97d-46d9-9d75-29b00dcd6b65": {
					"simStepIds": [
						"69871210-180b-4e13-a54d-dee0a1e9769f"
					]
				},
				"49a6e174-0dc2-49f9-a752-6298a1c48b17": {
					"simStepIds": [
						"2f2f0366-372a-49a7-bee3-680364b83c12"
					]
				},
				"325db70c-7165-4d3e-8c76-f5547ccadd00": {
					"simStepIds": [
						"012f307d-8ce8-4525-b749-9b02dca6f100"
					]
				},
				"970d7816-7875-46ca-bab1-a3a0e1416800": {
					"simStepIds": [
						"cd08c58c-4a98-489b-ab05-50c80ac467ae"
					]
				}
			},
			"isAIGenerated": true,
			"keywords": "members, include, lengthOf",
			"generationPrompt": "Assert on the contents and members of arrays and other collections",
			"generationKeywords": "members, include, lengthOf"
		},
		"Enhance test readability with chainable language helpers": {
			"name": "Enhance test readability with chainable language helpers",
			"simSteps": [
				{
					"simStepId": "53e9a83c-fd5c-4904-ac31-42976bc36617",
					"diagramNodeId": "ddeb7b36-bb2d-429a-b928-35cd5010095f",
					"simStepLabel": "Setup: Define Language Chains",
					"simStepDescription": "Chai defines an array of keywords that act as 'language chains'. These are getters that improve assertion readability but perform no logic themselves. They include words like 'to', 'be', 'and', 'which'.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "lib/chai/core/assertions.js",
						"startLine": "43",
						"endLine": "60",
						"relevantVariables": [
							"Assertion.addProperty"
						]
					},
					"inputDataExample": "null",
					"outputDataExample": "{\"chains\": [\"to\", \"be\", \"been\", \"is\", \"and\", \"has\", \"have\", \"with\", \"that\", \"which\", \"at\", \"of\", \"same\", \"but\", \"does\", \"still\", \"also\"]}"
				},
				{
					"simStepId": "501ef523-f810-4d04-b466-8cc39b708193",
					"diagramNodeId": "74e21110-13cc-49d3-8c1b-76be0ba1d7cf",
					"simStepLabel": "Setup: Register Language Chain Property 'to'",
					"simStepDescription": "The system iterates through the list of language chain keywords. For each keyword, such as 'to', it calls `Assertion.addProperty` to register a getter on the `Assertion` prototype.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "lib/chai/core/assertions.js",
						"startLine": "59",
						"endLine": "59",
						"relevantVariables": [
							"Assertion.addProperty(chain)"
						]
					},
					"inputDataExample": "{\"ctx\": \"Assertion.prototype\", \"name\": \"to\"}",
					"outputDataExample": "{\"ctx\": \"Assertion.prototype\", \"name\": \"to\"}"
				},
				{
					"simStepId": "f2ca94bb-ebb0-496f-bfac-4194fddabdef",
					"diagramNodeId": "a38ba456-b539-4581-848b-6dfd39a43a50",
					"simStepLabel": "Setup: Implement Chainable Getter",
					"simStepDescription": "The `addProperty` utility defines a getter on the `Assertion` prototype. For language chains, no specific getter logic is provided, so it defaults to a function that simply returns the assertion object itself (`this`). This is the core mechanism that enables chaining.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "lib/chai/utils/addProperty.js",
						"startLine": "39",
						"endLine": "60",
						"relevantVariables": [
							"addProperty",
							"getter",
							"propertyGetter"
						]
					},
					"inputDataExample": "{\"ctx\": \"Assertion.prototype\", \"name\": \"to\", \"getter\": null}",
					"outputDataExample": "{\"status\": \"A getter is now defined on Assertion.prototype for the 'to' property.\"}"
				},
				{
					"simStepId": "93ab2626-ff8c-4b2e-808a-df5c417e9534",
					"diagramNodeId": "23863589-0536-4ae4-8d65-20c9ea92f194",
					"simStepLabel": "Execution: Access Language Chain in Test",
					"simStepDescription": "During a test run, an assertion like `expect('test').to.be...` is executed. Accessing the `.to` property on the `Assertion` object (created by `expect('test')`) triggers the registered getter.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "lib/chai/utils/addProperty.js",
						"startLine": "43",
						"endLine": "43",
						"relevantVariables": [
							"get: function propertyGetter()"
						]
					},
					"inputDataExample": "{\"assertionObject\": {\"__flags\": {\"object\": \"test\", \"negate\": false}}}",
					"outputDataExample": "{\"assertionObject\": {\"__flags\": {\"object\": \"test\", \"negate\": false}}}"
				},
				{
					"simStepId": "61f56926-7e65-46f7-8886-0267f2dc1da5",
					"diagramNodeId": "de166f66-5ad7-496e-bfb7-d2d856d0f616",
					"simStepLabel": "Execution: Return Assertion for Chaining",
					"simStepDescription": "The getter for the `.to` property is executed. Since it's a language chain, its purpose is to return the current `Assertion` instance. This allows the next property in the chain, `.be`, to be accessed on the same assertion object.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "lib/chai/utils/addProperty.js",
						"startLine": "43",
						"endLine": "55",
						"relevantVariables": [
							"propertyGetter",
							"getter.call(this)",
							"return this"
						]
					},
					"inputDataExample": "{\"this\": {\"__flags\": {\"object\": \"test\", \"negate\": false}}}",
					"outputDataExample": "{\"this\": {\"__flags\": {\"object\": \"test\", \"negate\": false}}}"
				},
				{
					"simStepId": "3da7a42e-7feb-4a22-b5af-fa4a0604dac6",
					"diagramNodeId": "984fc8c8-fe77-472c-bf0a-7dcf817a5b3e",
					"simStepLabel": "Execution: Pass Assertion to Next Chain",
					"simStepDescription": "The `Assertion` instance returned by the `.to` getter is immediately used to access the next property in the chain, `.be`.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "lib/chai/core/assertions.js",
						"startLine": "44",
						"endLine": "44",
						"relevantVariables": [
							"be"
						]
					},
					"inputDataExample": "{\"assertionObject\": {\"__flags\": {\"object\": \"test\", \"negate\": false}}}",
					"outputDataExample": "{\"assertionObject\": {\"__flags\": {\"object\": \"test\", \"negate\": false}}}"
				},
				{
					"simStepId": "25bea7dc-f163-4a24-9dc5-8a7adab3e5e3",
					"diagramNodeId": "36131db5-91db-403c-ac25-5f117ec0e635",
					"simStepLabel": "Execution: Continue Chain",
					"simStepDescription": "The getter for the `.be` property executes. Similar to `.to`, it returns the same `Assertion` instance, allowing the chain to continue until a method that performs an actual assertion (like `.a()`) is called.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "lib/chai/utils/addProperty.js",
						"startLine": "43",
						"endLine": "55",
						"relevantVariables": [
							"propertyGetter",
							"getter.call(this)",
							"return this"
						]
					},
					"inputDataExample": "{\"this\": {\"__flags\": {\"object\": \"test\", \"negate\": false}}}",
					"outputDataExample": "{\"this\": {\"__flags\": {\"object\": \"test\", \"negate\": false}}, \"next_in_chain\": \".a('string')\"}"
				}
			],
			"description": "<ul><li>Chai's BDD interfaces (<code>expect</code>/<code>should</code>) use getter properties that do not perform assertions themselves but improve readability</li><li>These 'language chains' like <code></li><li>to</code>, <code></li><li>be</code>, <code></li><li>is</code>, <code></li><li>and</code>, <code></li><li>has</code> allow developers to write tests that read like natural language sentences</li><li>For example, <code>expect(foo)</li><li>to</li><li>be</li><li>an('object')</li><li>with</li><li>property('bar')</code></li></ul>",
			"simulationNodesAndEdges": {
				"ddeb7b36-bb2d-429a-b928-35cd5010095f": {
					"simStepIds": [
						"53e9a83c-fd5c-4904-ac31-42976bc36617"
					]
				},
				"a38ba456-b539-4581-848b-6dfd39a43a50": {
					"simStepIds": [
						"f2ca94bb-ebb0-496f-bfac-4194fddabdef"
					]
				},
				"de166f66-5ad7-496e-bfb7-d2d856d0f616": {
					"simStepIds": [
						"61f56926-7e65-46f7-8886-0267f2dc1da5"
					]
				},
				"36131db5-91db-403c-ac25-5f117ec0e635": {
					"simStepIds": [
						"25bea7dc-f163-4a24-9dc5-8a7adab3e5e3"
					]
				},
				"74e21110-13cc-49d3-8c1b-76be0ba1d7cf": {
					"simStepIds": [
						"501ef523-f810-4d04-b466-8cc39b708193"
					]
				},
				"23863589-0536-4ae4-8d65-20c9ea92f194": {
					"simStepIds": [
						"93ab2626-ff8c-4b2e-808a-df5c417e9534"
					]
				},
				"984fc8c8-fe77-472c-bf0a-7dcf817a5b3e": {
					"simStepIds": [
						"3da7a42e-7feb-4a22-b5af-fa4a0604dac6"
					]
				}
			},
			"isAIGenerated": true,
			"keywords": "to, be, and, which",
			"generationPrompt": "Enhance test readability with chainable language helpers",
			"generationKeywords": "to, be, and, which"
		},
		"Customize assertion behavior and error reporting": {
			"name": "Customize assertion behavior and error reporting",
			"simSteps": [
				{
					"simStepId": "b0ad61f5-b704-4f1a-b498-a60db2195f2a",
					"diagramNodeId": "7960cb22-e502-47ae-99aa-d8339852ad00",
					"simStepLabel": "Config: Define Default Configuration",
					"simStepDescription": "Chai defines a global configuration object with default values for various behaviors. This includes `includeStack` (false), `showDiff` (true), and `truncateThreshold` (40).",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "lib/chai/config.js",
						"startLine": "1",
						"endLine": "101",
						"relevantVariables": [
							"config",
							"includeStack",
							"showDiff",
							"truncateThreshold"
						]
					},
					"inputDataExample": "{}",
					"outputDataExample": "{\"includeStack\": false, \"showDiff\": true, \"truncateThreshold\": 40, \"useProxy\": true}"
				},
				{
					"simStepId": "11672c3e-3d11-45d1-baa0-fb8b6bcc1ef2",
					"diagramNodeId": "500a71c2-7b6b-4d9e-a2d4-4170d7671f48",
					"simStepLabel": "Config: Export Configuration Object",
					"simStepDescription": "The `config` object is exported as part of the main Chai module, making it accessible to users for customization.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "lib/chai.js",
						"startLine": "54",
						"endLine": "54",
						"relevantVariables": [
							"config"
						]
					},
					"inputDataExample": "{\"includeStack\": false, \"showDiff\": true, \"truncateThreshold\": 40, \"useProxy\": true}",
					"outputDataExample": "{\"includeStack\": false, \"showDiff\": true, \"truncateThreshold\": 40, \"useProxy\": true}"
				},
				{
					"simStepId": "3eb64751-6689-45d7-b71f-7203d9d71d5e",
					"diagramNodeId": "34a70d5e-a66a-4f0f-97fc-e07a744b6941",
					"simStepLabel": "User Action: Customize Chai Configuration",
					"simStepDescription": "A user modifies the global `chai.config` object in their test setup to override default behaviors. In this example, they enable stack traces, disable diffs, and set a specific truncation threshold.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "lib/chai.js",
						"startLine": "34",
						"endLine": "34",
						"relevantVariables": [
							"config"
						]
					},
					"inputDataExample": "{\"includeStack\": false, \"showDiff\": true, \"truncateThreshold\": 40}",
					"outputDataExample": "{\"includeStack\": true, \"showDiff\": false, \"truncateThreshold\": 20}"
				},
				{
					"simStepId": "175a4c1f-895b-4b6e-8071-8298fb19d316",
					"diagramNodeId": "0faeee74-7d2d-475e-b7aa-020f11493950",
					"simStepLabel": "State Update: Modified Configuration Propagates",
					"simStepDescription": "The modified configuration is now globally available within the Chai library, affecting all subsequent assertions.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "lib/chai/config.js",
						"startLine": "1",
						"endLine": "1",
						"relevantVariables": [
							"config"
						]
					},
					"inputDataExample": "{\"includeStack\": true, \"showDiff\": false, \"truncateThreshold\": 20}",
					"outputDataExample": "{\"includeStack\": true, \"showDiff\": false, \"truncateThreshold\": 20}"
				},
				{
					"simStepId": "81b87a51-1503-4308-b64b-74f2eaa90bf3",
					"diagramNodeId": "ac612a19-34b5-44f3-a209-01b54c8f2336",
					"simStepLabel": "Assertion: An Assertion Fails",
					"simStepDescription": "A test assertion fails, triggering the internal `assert` method within Chai's `Assertion` class. This method is the central point for handling assertion logic and error generation.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "lib/chai/assertion.js",
						"startLine": "157",
						"endLine": "186",
						"relevantVariables": [
							"assert",
							"ok",
							"util.test",
							"msg",
							"actual",
							"expected"
						]
					},
					"inputDataExample": "{\"_expr\": false, \"msg\": \"expected #{this} to deeply equal #{exp}\", \"expected\": {\"v\": \"x\"}, \"_actual\": {\"v\": \"a string longer than 20 chars\"}, \"showDiff\": true}",
					"outputDataExample": "{\"message\": \"expected { Object (v) } to deeply equal { v: 'x' }\", \"properties\": {\"showDiff\": false, \"actual\": {\"v\": \"a string longer than 20 chars\"}, \"expected\": {\"v\": \"x\"}}, \"ssfi\": \"[Function: assert]\"}"
				},
				{
					"simStepId": "9a8fc88f-a8ce-4077-be61-7eb53441a3ff",
					"diagramNodeId": "213ef39d-bd63-4f1d-84d2-38ad99a83f14",
					"simStepLabel": "Data Access: Configuration is Read for Error Handling",
					"simStepDescription": "The `assert` method imports and accesses the global `config` object to determine how the assertion error should be created and displayed.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "lib/chai/assertion.js",
						"startLine": "8",
						"endLine": "8",
						"relevantVariables": [
							"config"
						]
					},
					"inputDataExample": "{\"includeStack\": true, \"showDiff\": false, \"truncateThreshold\": 20}",
					"outputDataExample": "{\"includeStack\": true, \"showDiff\": false, \"truncateThreshold\": 20}"
				},
				{
					"simStepId": "6fed5695-b1b1-4c70-b0c2-dc0dd21381ed",
					"diagramNodeId": "574766f7-f27a-47cb-82a5-130e36b00aff",
					"simStepLabel": "Error Handling: Process `includeStack` and `showDiff`",
					"simStepDescription": "Inside the `assert` method, `config.showDiff` is checked to decide if the `showDiff` flag on the error should be false. Then, `config.includeStack` is checked to determine the `ssfi` (start stack function indicator), which controls whether Chai's internal stack is included in the error trace.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "lib/chai/assertion.js",
						"startLine": "161",
						"endLine": "183",
						"relevantVariables": [
							"config.showDiff",
							"config.includeStack",
							"AssertionError"
						]
					},
					"inputDataExample": "{\"config.showDiff\": false, \"config.includeStack\": true}",
					"outputDataExample": "{\"showDiffFlagForError\": false, \"ssfiForError\": \"[Function: assert]\"}"
				},
				{
					"simStepId": "0d4e28d9-0f96-4736-bd45-370ef248b805",
					"diagramNodeId": "4cb0c888-8a58-4fba-bcdb-98727b5f7e41",
					"simStepLabel": "Data Flow: Object Passed to Message Formatter",
					"simStepDescription": "To generate the error message, the `assert` method calls `util.getMessage`, which in turn relies on other utilities like `objDisplay` to get a string representation of the actual and expected values.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "lib/chai/assertion.js",
						"startLine": "164",
						"endLine": "164",
						"relevantVariables": [
							"util.getMessage"
						]
					},
					"inputDataExample": "{\"object\": {\"v\": \"a string longer than 20 chars\"}}",
					"outputDataExample": "{\"object\": {\"v\": \"a string longer than 20 chars\"}}"
				},
				{
					"simStepId": "bff42bea-6d33-4fac-9f5b-118e65dcb673",
					"diagramNodeId": "6f06b54f-8fd6-4b17-b471-6640ca1910cf",
					"simStepLabel": "Data Transformation: Process `truncateThreshold`",
					"simStepDescription": "The `objDisplay` utility function reads `config.truncateThreshold`. It checks if the string representation of an object exceeds this threshold. If it does, the string is truncated to a summary like `{ Object (prop1, prop2) }`.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "lib/chai/utils/objDisplay.js",
						"startLine": "26",
						"endLine": "40",
						"relevantVariables": [
							"objDisplay",
							"inspect",
							"config.truncateThreshold",
							"str"
						]
					},
					"inputDataExample": "{\"obj\": {\"v\": \"a string longer than 20 chars\"}, \"config.truncateThreshold\": 20}",
					"outputDataExample": "\"{ Object (v) }\""
				},
				{
					"simStepId": "20b807c7-040d-4aed-9559-929f7718128d",
					"diagramNodeId": "ae37d70f-af46-4160-ad9c-307e9042cf37",
					"simStepLabel": "Data Flow: Formatted Message Returned",
					"simStepDescription": "The truncated string representation of the object is returned and incorporated into the final error message.",
					"isEdge": 1,
					"sourceCodeMapping": {
						"filePath": "lib/chai/utils/objDisplay.js",
						"startLine": "41",
						"endLine": "41",
						"relevantVariables": [
							"str"
						]
					},
					"inputDataExample": "\"{ Object (v) }\"",
					"outputDataExample": "\"{ Object (v) }\""
				},
				{
					"simStepId": "969abbd0-74ba-47c5-9031-fb69889c56be",
					"diagramNodeId": "d063631a-4d01-41f9-8dfd-e59f39c1f37b",
					"simStepLabel": "Error Handling: Final Error is Thrown",
					"simStepDescription": "Back in the `assert` method, a new `AssertionError` is instantiated with the formatted message and properties derived from the configuration (`showDiff`, `includeStack`). This error is then thrown, causing the test to fail with a descriptive message.",
					"isEdge": 0,
					"sourceCodeMapping": {
						"filePath": "lib/chai/assertion.js",
						"startLine": "178",
						"endLine": "184",
						"relevantVariables": [
							"AssertionError",
							"msg",
							"assertionErrorObjectProperties",
							"config.includeStack"
						]
					},
					"inputDataExample": "{\"msg\": \"expected { Object (v) } to deeply equal { v: 'x' }\", \"properties\": {\"showDiff\": false, \"actual\": {\"v\": \"a string longer than 20 chars\"}, \"expected\": {\"v\": \"x\"}}, \"ssfi\": \"[Function: assert]\"}",
					"outputDataExample": "{\"name\": \"AssertionError\", \"message\": \"expected { Object (v) } to deeply equal { v: 'x' }\", \"showDiff\": false, \"stack\": \"AssertionError: expected { Object (v) } to deeply equal { v: 'x' }\\n    at Assertion.assert (...)\"}"
				}
			],
			"description": "<ul><li>Provides a global <code>chai</li><li>config</code> object to modify the library's behavior</li><li><code>config</li><li>includeStack</code> controls the inclusion of Chai's internal stack trace in error messages</li><li><code>config</li><li>showDiff</code> enables or disables showing value diffs in error reports</li><li><code>config</li><li>truncateThreshold</code> sets the character limit for displaying large objects in error messages before they are truncated</li></ul>",
			"simulationNodesAndEdges": {
				"7960cb22-e502-47ae-99aa-d8339852ad00": {
					"simStepIds": [
						"b0ad61f5-b704-4f1a-b498-a60db2195f2a"
					]
				},
				"34a70d5e-a66a-4f0f-97fc-e07a744b6941": {
					"simStepIds": [
						"3eb64751-6689-45d7-b71f-7203d9d71d5e"
					]
				},
				"ac612a19-34b5-44f3-a209-01b54c8f2336": {
					"simStepIds": [
						"81b87a51-1503-4308-b64b-74f2eaa90bf3"
					]
				},
				"574766f7-f27a-47cb-82a5-130e36b00aff": {
					"simStepIds": [
						"6fed5695-b1b1-4c70-b0c2-dc0dd21381ed"
					]
				},
				"6f06b54f-8fd6-4b17-b471-6640ca1910cf": {
					"simStepIds": [
						"bff42bea-6d33-4fac-9f5b-118e65dcb673"
					]
				},
				"d063631a-4d01-41f9-8dfd-e59f39c1f37b": {
					"simStepIds": [
						"969abbd0-74ba-47c5-9031-fb69889c56be"
					]
				},
				"500a71c2-7b6b-4d9e-a2d4-4170d7671f48": {
					"simStepIds": [
						"11672c3e-3d11-45d1-baa0-fb8b6bcc1ef2"
					]
				},
				"0faeee74-7d2d-475e-b7aa-020f11493950": {
					"simStepIds": [
						"175a4c1f-895b-4b6e-8071-8298fb19d316"
					]
				},
				"213ef39d-bd63-4f1d-84d2-38ad99a83f14": {
					"simStepIds": [
						"9a8fc88f-a8ce-4077-be61-7eb53441a3ff"
					]
				},
				"4cb0c888-8a58-4fba-bcdb-98727b5f7e41": {
					"simStepIds": [
						"0d4e28d9-0f96-4736-bd45-370ef248b805"
					]
				},
				"ae37d70f-af46-4160-ad9c-307e9042cf37": {
					"simStepIds": [
						"20b807c7-040d-4aed-9559-929f7718128d"
					]
				}
			},
			"isAIGenerated": true,
			"keywords": "config, includeStack, truncateThreshold",
			"generationPrompt": "Customize assertion behavior and error reporting",
			"generationKeywords": "config, includeStack, truncateThreshold"
		}
	},
	"cellToPath": {
		"1f5c4ae6-1ee0-44d5-af43-2b58776742c5": "lib",
		"3b40d2fd-134a-4e51-a482-b1661a48d960": "lib/chai",
		"da5ad0fd-2820-4a06-a046-1943ee671a0f": "lib/chai/interface",
		"70f0d932-23c0-40f2-b1ae-7a592a892276": "lib/chai/core",
		"365dcd1f-e369-4e23-b3b7-84fb25a3fa18": "lib/chai/utils",
		"d6094e8b-04ee-4fd8-ba2c-2dcf2209cd63": "lib/chai/assertion.js",
		"d029c765-a63a-4466-991a-3ca0ac663ea4": "lib/chai/interface/expect.js",
		"cb2d632b-b1e7-41e2-8642-977653392c81": "lib/chai/core/assertions.js",
		"c192a443-274d-45d6-acca-463e2a0eb9a6": "lib/chai/utils/addProperty.js",
		"3d7b6b57-5884-429f-9697-7b237b43fc8e": "lib/chai/interface/expect.js-simstep-ffbf2b31-d402-4666-a860-80eef02213b8",
		"9a018c67-2789-4a30-99bb-21f2cbb1086a": "lib/chai/core/assertions.js-simstep-0ded55ff-7ad5-41e9-aeba-b55a1dc27961",
		"98fe157b-c465-40e7-9879-af8abb572a33": "lib/chai/core/assertions.js-simstep-6befc5d9-1a5d-4e39-b0d6-e5c6dfb1302f",
		"6c3832b1-0a35-45e0-9be8-2287555beaad": "lib/chai/core/assertions.js-simstep-18f82911-1e52-49ae-843f-5675d5cbc1ad",
		"76d13f4d-2e39-4075-8e09-1a5dfd58eb75": "lib/chai/assertion.js-simstep-d8f9e7de-962e-4b46-b53b-3c6fc57a7a3d",
		"626f7856-8bdf-4df3-bf89-f68eedf5585e": "lib/chai/assertion.js-simstep-01b6f0f7-8851-47a1-8b07-ecd389092dc5",
		"99c7836f-37a1-4e37-a2bc-de0a6ccfcb2a": "generated-edge-simstep-b31c7d39-49be-4587-b49d-4f5e56f817a7-99c7836f-37a1-4e37-a2bc-de0a6ccfcb2a",
		"f0466bf2-9593-4717-8b9e-75f4189007be": "generated-edge-simstep-bbb4e818-7b45-4b41-98a3-dc39c7bca5a8-f0466bf2-9593-4717-8b9e-75f4189007be",
		"c1f07aac-5242-4cdd-baad-33459f5ec2c4": "generated-edge-simstep-2d3eac35-a4f4-4e3a-8972-b34f2d7ee4fc-c1f07aac-5242-4cdd-baad-33459f5ec2c4",
		"d8e3fd59-b0f1-455f-b2e8-2ae686a91ed1": "generated-edge-simstep-712fbda5-68ef-43a1-93c2-7c03e8567d44-d8e3fd59-b0f1-455f-b2e8-2ae686a91ed1",
		"016a9626-27a3-4671-91d4-ced879f9b94f": "generated-edge-simstep-dcb95fcf-a6d8-4531-bf5e-ad9aa369ec83-016a9626-27a3-4671-91d4-ced879f9b94f",
		"a1119216-5cf6-401f-a80f-bd9f6cddc124": "test",
		"1edb1e3d-0206-44a1-95bc-f047d3ef21d9": "test/assert.js",
		"1ddd4839-b3e2-43af-8b5e-9b585c757bb7": "lib/chai/interface/assert.js",
		"1ff0ef00-7650-4720-8e55-fe8c4297be0f": "test/assert.js-simstep-50e26f9d-f638-4309-9221-1627533d9fd5",
		"e835a025-f767-405a-a33a-c0f542b392f7": "lib/chai/interface/assert.js-simstep-c2ab5700-b28e-47da-b48e-64702ccbfc6c",
		"7e1b33fe-16d9-4d47-9794-0dd9f3d99673": "lib/chai/core/assertions.js-simstep-95a68fa3-8b62-4ba9-ab86-83b614b68d43",
		"7edfbeb5-0c32-424f-8365-128c3ca419ab": "lib/chai/assertion.js-simstep-ae18b83b-875b-445d-abeb-50324decfa1a",
		"f1c5ff6e-d843-410e-9e49-51660521e9d1": "lib/chai/assertion.js-simstep-aa64de71-da77-4554-a657-f7e1b144751a",
		"873db434-a86b-4d1e-b89d-8382ae899428": "generated-edge-simstep-ef02992f-6021-45fe-b499-e25cbad27a50-873db434-a86b-4d1e-b89d-8382ae899428",
		"80b86db7-c802-4db0-afd1-2bf07c766061": "generated-edge-simstep-b98120ff-1aa4-4348-b4d8-e52c6e0a27c2-80b86db7-c802-4db0-afd1-2bf07c766061",
		"fd96522e-38e1-4722-9f0d-c1ee8ce25178": "generated-edge-simstep-39b93340-7bd0-441d-a8c3-61204d721a90-fd96522e-38e1-4722-9f0d-c1ee8ce25178",
		"019c2fe0-4d65-43d2-afe4-cfccf451e2b3": "generated-edge-simstep-91b7f77a-84dd-49bc-8736-a7bf94925ff2-019c2fe0-4d65-43d2-afe4-cfccf451e2b3",
		"66baa147-b9dc-4dfa-a269-bef39a73c529": "lib/chai/interface/should.js",
		"4c2d40e1-545b-4139-bbe7-a6a013a0b3cb": "lib/chai/interface/should.js-simstep-acf99cce-daff-4078-a332-e2600bb3824e",
		"59be314e-78d5-49d0-b962-bf711c994978": "lib/chai/interface/should.js-simstep-442c0d21-f8f0-4d4e-aba9-bf042cb1ab8a",
		"29ddb142-2459-46fa-b75f-7bd1b5a855c3": "lib/chai/interface/should.js-simstep-b13560a9-f13f-46b2-bd81-a11b3521e58f",
		"1c04e1fd-12be-4748-8350-56b2dcb56d36": "lib/chai/interface/should.js-simstep-f9e7b88f-8956-4e45-838d-77484d39b33b",
		"a1109ae1-7092-4965-b238-8a25b920c091": "lib/chai/core/assertions.js-simstep-4b9fbed0-f3c8-4802-8efa-3361f71fda4d",
		"b0ae7ae0-8463-4138-8fa1-502e7f67c9ee": "generated-edge-simstep-3feaf417-d874-4376-8a94-99247d36b533-b0ae7ae0-8463-4138-8fa1-502e7f67c9ee",
		"5b89f24c-4bd1-496d-91df-80d188f400cc": "generated-edge-simstep-d83fef71-09df-4d0d-b945-402208573085-5b89f24c-4bd1-496d-91df-80d188f400cc",
		"b460ae4c-64b7-4ac5-9736-84946e6973e4": "generated-edge-simstep-4c2d035f-6342-4cba-8cef-faf80c11316f-b460ae4c-64b7-4ac5-9736-84946e6973e4",
		"78c5daf9-33aa-4345-8ce8-0b3d6779ad32": "lib/chai/interface/expect.js-simstep-2d29b02e-fb70-46a9-b0f4-5adebf7bdbb2",
		"d0e4abd6-88c2-4a83-a735-efeb4261bc1a": "lib/chai/core/assertions.js-simstep-1a394d13-0086-4c4d-b853-c0dcc32a6c4a",
		"311ab964-3643-4a03-a2eb-86baa60c3803": "lib/chai/core/assertions.js-simstep-217b5149-3ea4-4940-8139-454ee1ca8997",
		"33c4932a-9999-4a12-a99c-e7fa68d52a3b": "lib/chai/assertion.js-simstep-b1e6f16e-f82c-4a24-9a4b-aed194145180",
		"5d95bf56-eb2d-4a9a-84ff-c22854329ade": "lib/chai/interface/assert.js-simstep-a52400a4-a4c6-4519-b969-bc376e992511",
		"6eef333b-2667-42fb-b1d6-1ade44f08169": "lib/chai/core/assertions.js-simstep-0ef6d789-f28a-461c-af3a-397cda0df6c0",
		"aa2ef5c6-dd9d-48fa-ae4b-6c7e431eabcf": "lib/chai/assertion.js-simstep-9870feb3-8225-47fd-9c93-d10b98d026d7",
		"87dbf5e6-441d-4764-9508-43ab5d27a5b9": "lib/chai/interface/assert.js-simstep-ef2a8e1a-5e6e-45c9-b04a-985fa1c48b52",
		"867c90fe-63e6-47e3-a6bc-8a4780fb7948": "lib/chai/core/assertions.js-simstep-0c66b723-e954-45a4-9bff-654a9ae5d898",
		"79cfa8e5-df26-4e28-a847-e90640711609": "lib/chai/assertion.js-simstep-e99f28a4-883f-4312-aa9b-b72b2c04d898",
		"48b56c37-0c89-4129-9ecc-6639a1b56534": "generated-edge-simstep-ef19b0bb-0a81-4c70-ac29-b4ec8c85a589-48b56c37-0c89-4129-9ecc-6639a1b56534",
		"87ac7881-87ff-48d0-8cbd-2c14d57c526f": "generated-edge-simstep-e1db538c-c652-4ed2-bf4d-3a3937b0707f-87ac7881-87ff-48d0-8cbd-2c14d57c526f",
		"9134c622-6ef3-42f8-afb4-08b8c1a32d61": "generated-edge-simstep-609a9228-dfda-4fdb-b53b-5a5e49be22ac-9134c622-6ef3-42f8-afb4-08b8c1a32d61",
		"0306bdf0-17b6-4e64-b59a-bcb5f9487753": "generated-edge-simstep-651b4b15-e6ed-41da-8993-1d475ca13f6d-0306bdf0-17b6-4e64-b59a-bcb5f9487753",
		"24352a06-6984-42d3-83f4-a9736f36f8c2": "generated-edge-simstep-8f8a132f-645a-4cf6-bb6a-eb331ba80e2b-24352a06-6984-42d3-83f4-a9736f36f8c2",
		"9019d3ca-3407-4b99-85cc-b3e58ffebd0f": "generated-edge-simstep-5cdbf0f8-d933-46c1-9de9-c91ac66ef06f-9019d3ca-3407-4b99-85cc-b3e58ffebd0f",
		"84523489-6af8-4277-b04b-8dec81c35a09": "generated-edge-simstep-7e926776-4565-4718-8fe0-67fccedad28a-84523489-6af8-4277-b04b-8dec81c35a09",
		"1799216e-8b13-4638-9ea3-7258f10a4448": "test/expect.js",
		"8516dde4-fdc7-49cf-90a5-5abb0588348e": "lib/chai/utils/flag.js",
		"aeb183a9-7b12-49ce-ba93-64b25e9a7d80": "test/expect.js-simstep-746137a6-3544-4c70-bc76-88636ec01d1f",
		"21921551-9e0d-4282-9389-af27e5d0114e": "lib/chai/core/assertions.js-simstep-83534e6d-9a92-477c-a4d1-22454ac97df5",
		"55e16a39-7839-4cc4-9acc-239022050196": "lib/chai/core/assertions.js-simstep-9e76524f-243c-4912-9e3b-9edfef97cb41",
		"7e8fede8-26fd-4cab-b856-2e346e9af8f2": "lib/chai/core/assertions.js-simstep-99ab9e7b-2050-4310-853b-5668c613a660",
		"d721a770-8000-427b-89be-8bf3b5844697": "lib/chai/core/assertions.js-simstep-64369f59-020e-4bb8-ac7a-c747618aadd4",
		"68e92267-8ca9-47a7-b850-37cb8ad1e9d4": "lib/chai/core/assertions.js-simstep-f9ac5136-9a58-4213-bd61-88563d93e56d",
		"58e1a797-b38e-41d5-9709-2f9f5045a403": "lib/chai/assertion.js-simstep-98676212-6869-431d-b44e-7153e6a408cc",
		"30085bc9-0bfa-4cc9-bcf7-d56a98b03843": "lib/chai/core/assertions.js-simstep-fdcb8440-3208-4a45-a16d-7627b454a604",
		"5672de1c-1b3b-4e88-a903-227864227636": "lib/chai/core/assertions.js-simstep-82ec3d5c-525b-45d8-b031-689545566b02",
		"33e4ebe1-541d-4240-9a7e-89cf413453fb": "lib/chai/interface/assert.js-simstep-520ae158-b4c5-4849-9966-b6286f224dd1",
		"294876f2-5e6d-4265-b46c-31c4e00fe3b4": "generated-edge-simstep-143eae5b-325d-40e7-8a16-158b8ac33b80-294876f2-5e6d-4265-b46c-31c4e00fe3b4",
		"42b0d357-26ae-4201-8bb2-bc90bf01af18": "generated-edge-simstep-3ed10e00-58bb-4a7f-9226-fb364837d55d-42b0d357-26ae-4201-8bb2-bc90bf01af18",
		"8aa2962b-1ace-4fb9-801f-1ee6e08d55ca": "generated-edge-simstep-893c4144-0feb-4ab7-8ae2-c21459d1301d-8aa2962b-1ace-4fb9-801f-1ee6e08d55ca",
		"b17fcc8d-22b2-44d6-952d-c85bcf91b534": "generated-edge-simstep-91b02ae5-4d01-42ca-a06f-23279795bceb-b17fcc8d-22b2-44d6-952d-c85bcf91b534",
		"c43a8570-5daa-4a31-88a9-19deb661f03c": "generated-edge-simstep-a4173368-a694-439a-95dc-cfca62d3239f-c43a8570-5daa-4a31-88a9-19deb661f03c",
		"f0263f23-4936-4a4e-8c37-828310016668": "generated-edge-simstep-a57499e7-3803-41ad-89f8-fc84bd9d659f-f0263f23-4936-4a4e-8c37-828310016668",
		"864ab690-d41e-45b6-8c8d-691624634457": "generated-edge-simstep-68bf7b2f-befe-477b-ab65-7aa1ce1ef1f2-864ab690-d41e-45b6-8c8d-691624634457",
		"6b40f6f8-f5bb-4f00-bdb5-2e8306e4bc90": "generated-edge-simstep-544a1bb7-f237-40d2-a73c-40b941cb44c4-6b40f6f8-f5bb-4f00-bdb5-2e8306e4bc90",
		"8cfff0c7-4a27-436d-8afd-c3cc5c55e206": "generated-edge-simstep-e7ddf573-2be2-4827-97b3-60e9d4c9910b-8cfff0c7-4a27-436d-8afd-c3cc5c55e206",
		"e3eb933b-c619-452d-ba91-b18a3e8e6c21": "lib/chai.js",
		"aca4b2ac-87ec-4d9e-b750-f0d056ff758f": "lib/chai/utils/addMethod.js",
		"90441f2e-b541-4170-9701-b69c91cafa5d": "lib/chai.js-simstep-8b98f977-49ce-48d5-b22a-86378a513572",
		"447c64cb-e6e2-4cff-a64b-8c0460e81904": "lib/chai.js-simstep-eb0ac5c7-aa37-4d95-af2b-f0b1a55b11d3",
		"368b33b2-faaa-4ee1-9226-8a883a702652": "lib/chai/assertion.js-simstep-73c3b54f-965e-47c4-a537-f04e5c978305",
		"1b6ddf15-ae7d-43c4-82f7-f9dba5b20e71": "lib/chai/utils/addProperty.js-simstep-ea57401a-7532-4c9d-8c72-fed963ad0de5",
		"e5c0ec36-1aca-4726-a72f-3abe6486de6d": "lib/chai/assertion.js-simstep-21b1d00d-8dd5-4edd-b619-674d4d947f6c",
		"24c28424-4ad9-42bb-aeb9-4019b6072a1f": "lib/chai/utils/addMethod.js-simstep-c4a5e2d9-488a-4a05-933b-8986b9c4575f",
		"5a48a5d6-6068-4649-848f-6e12bc2b0806": "lib/chai/utils/addProperty.js-simstep-6423490d-72d3-487f-b300-7c8847781040",
		"8a3b6945-9d4b-49fc-8bb6-59b29dfc7aa9": "generated-edge-simstep-edc31929-bf66-47ce-870c-bec1ab2c6bce-8a3b6945-9d4b-49fc-8bb6-59b29dfc7aa9",
		"1621b7b4-3b93-479a-a77a-a23d3be66442": "generated-edge-simstep-c3516169-6418-4233-a65e-f58ec1772e88-1621b7b4-3b93-479a-a77a-a23d3be66442",
		"87fa4415-4367-42b3-ab84-d91f0e8fa5e3": "generated-edge-simstep-bc62fe32-e423-4341-92f6-aad24da37d66-87fa4415-4367-42b3-ab84-d91f0e8fa5e3",
		"1dfda9d3-2a94-43f7-a794-98e6f34e7c13": "generated-edge-simstep-09a523a3-d6f7-4e42-b3b8-5b773aeaba2f-1dfda9d3-2a94-43f7-a794-98e6f34e7c13",
		"b39cb986-0d94-4f8f-9094-c7d5a64de62c": "generated-edge-simstep-de96bc1a-90ea-40e2-9cf4-aa1e3c34568c-b39cb986-0d94-4f8f-9094-c7d5a64de62c",
		"29db87a9-9d2e-47e3-9fe9-0de786e801d1": "generated-edge-simstep-dad9c9fc-2d93-4476-b66f-c6fc79c0cf6b-29db87a9-9d2e-47e3-9fe9-0de786e801d1",
		"1899beed-01ef-4c54-b347-1cedacb7ae6b": "lib/chai/interface/assert.js-simstep-9b37ec8b-ac85-4dfa-ae56-fba8c09fbd46",
		"64a3623b-42f0-49bf-a81f-0e491a6a4740": "lib/chai/core/assertions.js-simstep-9d7a6f18-acf6-4d81-bbb5-1fa24e9ba738",
		"e3b13ece-10f4-48f0-8bb2-5ab92d7af2fa": "lib/chai/core/assertions.js-simstep-ffd81900-4008-4a58-9dce-7234a88a5806",
		"b01e639f-18ef-4373-b85c-97964c77650e": "lib/chai/interface/assert.js-simstep-75f3e294-cb8a-4f90-b0f0-f7afffcf88bd",
		"52112520-8bc4-4780-b274-db60aa7341c2": "lib/chai/core/assertions.js-simstep-207dd1d1-9c91-469f-a2c3-df6b75e228c0",
		"c57f08a5-f7e3-4c59-bc88-899d76966cad": "lib/chai/core/assertions.js-simstep-672dc4b9-7e13-4359-a66c-d5f1f870d184",
		"6419a1c1-4003-4f53-a1f5-2f40b7c0fa4f": "lib/chai/interface/assert.js-simstep-288bceb1-84ea-43f8-9be0-81b6da69a036",
		"354859c5-3779-42f5-acdd-6bc7cc000499": "lib/chai/core/assertions.js-simstep-9f36bb1a-c41c-4b43-8d3f-6308d788fdb0",
		"1af6ee46-5ea3-408a-9022-e8633ccb7410": "lib/chai/assertion.js-simstep-9b790ebe-a0d9-402a-b578-afb3a141bf29",
		"62849151-9f8d-4a3c-b751-42113f3f1ee8": "generated-edge-simstep-5b098e9f-3135-4349-85e4-d560dbf5c6e9-62849151-9f8d-4a3c-b751-42113f3f1ee8",
		"a50c1de7-c7d0-4915-a745-ebdd83a44c65": "generated-edge-simstep-c8656bce-1b49-4380-a902-bd4fa75726ac-a50c1de7-c7d0-4915-a745-ebdd83a44c65",
		"fd7021ad-b9a7-4df1-b8da-d76bdd0c722b": "generated-edge-simstep-e438e7b2-83f3-4600-a929-eca56b8b721b-fd7021ad-b9a7-4df1-b8da-d76bdd0c722b",
		"1100bfcd-96f6-428e-9cb4-9f299e01c268": "generated-edge-simstep-9ee866bf-f609-46b2-be10-3931ed9f9375-1100bfcd-96f6-428e-9cb4-9f299e01c268",
		"9416e139-1247-48c5-ae43-7d7baa4319fa": "generated-edge-simstep-c07d18ab-c07f-4fd2-b23e-759556458c7a-9416e139-1247-48c5-ae43-7d7baa4319fa",
		"aab0a4c6-30a9-4fc4-b321-5dddd67bc636": "generated-edge-simstep-87339037-b5e5-4d1f-9033-964ef9471ffe-aab0a4c6-30a9-4fc4-b321-5dddd67bc636",
		"9dea3048-df0f-44e5-9e90-43986b3487e6": "lib/chai/core/assertions.js-simstep-ee854269-5b2d-4d59-a901-c6adae36606e",
		"618aefbe-9477-42a6-a6d7-d5f60f805f29": "lib/chai/core/assertions.js-simstep-abd6c2e9-0410-4f60-aa65-ae91e5f8608b",
		"1ac5073d-fc9a-43ed-914f-9da183d33cf4": "lib/chai/assertion.js-simstep-1cd9a38f-377c-471b-a498-826b8fe7af3e",
		"313ceff3-447c-4c19-99e8-5a7ec009b617": "lib/chai/core/assertions.js-simstep-b490ed32-3851-4515-9583-e1f59a78b99e",
		"f6a060df-b7b2-4ddf-a5d6-ecc8fc05573e": "lib/chai/core/assertions.js-simstep-07078074-9216-43ba-b37a-c50abb096f98",
		"a37a5560-1ee5-4f31-bd53-fbbfd3d5301d": "lib/chai/assertion.js-simstep-0c16e099-0844-4e09-85c6-61500c93bffa",
		"285d4dde-717f-4ab2-87f1-694b42c51e9e": "lib/chai/core/assertions.js-simstep-880afa8e-d530-474a-b77d-25f76dae4c20",
		"5f37baa4-b3d9-4f39-ad43-014a9bb088b4": "lib/chai/core/assertions.js-simstep-d4c4d6ee-ef26-4698-bd8f-9970a2ea15de",
		"5cad8e76-7113-4346-8782-4158978c317b": "lib/chai/assertion.js-simstep-bd045f3b-60a4-474b-a89c-b03fbaf0fcc9",
		"176e2036-2d1e-4abd-a885-29b414e3aaf7": "lib/chai/core/assertions.js-simstep-9d0b52b3-5f2d-4216-ba5e-b6e80f3aa801",
		"ce702a01-133b-434c-813b-e89a1811b230": "lib/chai/core/assertions.js-simstep-8f6cf4f0-5cfc-4950-b515-9d177c36eb64",
		"a5d34bfc-a3cf-45a6-86d3-94f8e9bfa9cc": "lib/chai/assertion.js-simstep-0577ff22-519e-44bb-b234-0e0a28a9f1db",
		"a32af246-a534-4581-ad06-a4e6cccafe26": "generated-edge-simstep-d169293d-9c11-46cc-8366-83ea2d6be3ba-a32af246-a534-4581-ad06-a4e6cccafe26",
		"b36d7bf5-a7fd-45a2-bc58-9c4b688a78d4": "generated-edge-simstep-63f01c78-da76-4893-97b8-54a3dd701d5e-b36d7bf5-a7fd-45a2-bc58-9c4b688a78d4",
		"eda3425e-cae9-40dc-9a09-0fbb2baabf6e": "generated-edge-simstep-58d32935-8d6f-451b-ac11-cfa0c4770b70-eda3425e-cae9-40dc-9a09-0fbb2baabf6e",
		"b52e6420-664e-4141-a71e-4b0f257b4b3b": "generated-edge-simstep-dd8252da-0a7a-4545-abfa-788f5a573670-b52e6420-664e-4141-a71e-4b0f257b4b3b",
		"f3329c0d-a97d-46d9-9d75-29b00dcd6b65": "generated-edge-simstep-69871210-180b-4e13-a54d-dee0a1e9769f-f3329c0d-a97d-46d9-9d75-29b00dcd6b65",
		"49a6e174-0dc2-49f9-a752-6298a1c48b17": "generated-edge-simstep-2f2f0366-372a-49a7-bee3-680364b83c12-49a6e174-0dc2-49f9-a752-6298a1c48b17",
		"325db70c-7165-4d3e-8c76-f5547ccadd00": "generated-edge-simstep-012f307d-8ce8-4525-b749-9b02dca6f100-325db70c-7165-4d3e-8c76-f5547ccadd00",
		"970d7816-7875-46ca-bab1-a3a0e1416800": "generated-edge-simstep-cd08c58c-4a98-489b-ab05-50c80ac467ae-970d7816-7875-46ca-bab1-a3a0e1416800",
		"ddeb7b36-bb2d-429a-b928-35cd5010095f": "lib/chai/core/assertions.js-simstep-53e9a83c-fd5c-4904-ac31-42976bc36617",
		"a38ba456-b539-4581-848b-6dfd39a43a50": "lib/chai/utils/addProperty.js-simstep-f2ca94bb-ebb0-496f-bfac-4194fddabdef",
		"de166f66-5ad7-496e-bfb7-d2d856d0f616": "lib/chai/utils/addProperty.js-simstep-61f56926-7e65-46f7-8886-0267f2dc1da5",
		"36131db5-91db-403c-ac25-5f117ec0e635": "lib/chai/utils/addProperty.js-simstep-25bea7dc-f163-4a24-9dc5-8a7adab3e5e3",
		"74e21110-13cc-49d3-8c1b-76be0ba1d7cf": "generated-edge-simstep-501ef523-f810-4d04-b466-8cc39b708193-74e21110-13cc-49d3-8c1b-76be0ba1d7cf",
		"23863589-0536-4ae4-8d65-20c9ea92f194": "generated-edge-simstep-93ab2626-ff8c-4b2e-808a-df5c417e9534-23863589-0536-4ae4-8d65-20c9ea92f194",
		"984fc8c8-fe77-472c-bf0a-7dcf817a5b3e": "generated-edge-simstep-3da7a42e-7feb-4a22-b5af-fa4a0604dac6-984fc8c8-fe77-472c-bf0a-7dcf817a5b3e",
		"93fdacaf-e207-4251-9e75-cc6f45f586a2": "lib/chai/config.js",
		"024e93d1-f1b8-417a-a584-01b228b125fa": "lib/chai/utils/objDisplay.js",
		"7960cb22-e502-47ae-99aa-d8339852ad00": "lib/chai/config.js-simstep-b0ad61f5-b704-4f1a-b498-a60db2195f2a",
		"34a70d5e-a66a-4f0f-97fc-e07a744b6941": "lib/chai.js-simstep-3eb64751-6689-45d7-b71f-7203d9d71d5e",
		"ac612a19-34b5-44f3-a209-01b54c8f2336": "lib/chai/assertion.js-simstep-81b87a51-1503-4308-b64b-74f2eaa90bf3",
		"574766f7-f27a-47cb-82a5-130e36b00aff": "lib/chai/assertion.js-simstep-6fed5695-b1b1-4c70-b0c2-dc0dd21381ed",
		"6f06b54f-8fd6-4b17-b471-6640ca1910cf": "lib/chai/utils/objDisplay.js-simstep-bff42bea-6d33-4fac-9f5b-118e65dcb673",
		"d063631a-4d01-41f9-8dfd-e59f39c1f37b": "lib/chai/assertion.js-simstep-969abbd0-74ba-47c5-9031-fb69889c56be",
		"500a71c2-7b6b-4d9e-a2d4-4170d7671f48": "generated-edge-simstep-11672c3e-3d11-45d1-baa0-fb8b6bcc1ef2-500a71c2-7b6b-4d9e-a2d4-4170d7671f48",
		"0faeee74-7d2d-475e-b7aa-020f11493950": "generated-edge-simstep-175a4c1f-895b-4b6e-8071-8298fb19d316-0faeee74-7d2d-475e-b7aa-020f11493950",
		"213ef39d-bd63-4f1d-84d2-38ad99a83f14": "generated-edge-simstep-9a8fc88f-a8ce-4077-be61-7eb53441a3ff-213ef39d-bd63-4f1d-84d2-38ad99a83f14",
		"4cb0c888-8a58-4fba-bcdb-98727b5f7e41": "generated-edge-simstep-0d4e28d9-0f96-4736-bd45-370ef248b805-4cb0c888-8a58-4fba-bcdb-98727b5f7e41",
		"ae37d70f-af46-4160-ad9c-307e9042cf37": "generated-edge-simstep-20b807c7-040d-4aed-9559-929f7718128d-ae37d70f-af46-4160-ad9c-307e9042cf37"
	}
}